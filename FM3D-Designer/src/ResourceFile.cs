using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using FM3D_Designer.src.ToolWindows.FileBrowser;
using MahApps.Metro.Controls.Dialogs;

namespace FM3D_Designer.src
{
    public class ResourceFile
    {

        private const string HEADER = @"//
//	DO NOT TOUCH THIS!!!
//	AUTOGENERATED FILE BY FM3D-DESIGNER!!!
//
#pragma once
#include <map>
#include <Engine.h>

";
        private const string RESOURCE_CLASS = @"
class Resources {
private:
	std::map<unsigned int, FM3D::Texture*> m_textures;
	std::map<unsigned int, FM3D::Mesh*> m_meshes;
	std::map<unsigned int, FM3D::Model*> m_models;
	std::map<unsigned int, FM3D::Skeleton*> m_skeleton;
	std::map<unsigned int, FM3D::Material*> m_materials;
public:
	inline FM3D::Texture* GetTexture(uint id) { return m_textures.at(id); }
	inline FM3D::Mesh* GetMesh(uint id) { return m_meshes.at(id); }
	inline FM3D::Model* GetModel(uint id) { return m_models.at(id); }
	inline FM3D::Skeleton* GetSkeleton(uint id) { return m_skeleton.at(id); }
	inline FM3D::Material* GetMaterial(uint id) { return m_materials.at(id); }

	void LoadResources();
};";

        public string Path_H { get; set; }
        public string Path_CPP { get; set; }

        public ResourceFile(string path)
        {
            this.Path_H = path + "/Resources.h";
            this.Path_CPP = path + "/Resources.cpp";
        }

        public bool WriteFile()
        {
            try
            {
                if (!File.Exists(Path_H)) File.Create(Path_H);
                using (FileStream fstream = new FileStream(Path_H, FileMode.Truncate, FileAccess.Write, FileShare.Read))
                {
                    using (StreamWriter file = new StreamWriter(fstream))
                    {
                        file.AutoFlush = true;

                        file.Write(HEADER);
                        uint i = 0;
                        if (Item.AllItems.ContainsKey(ItemTypes.TextureFile))
                        {
                            foreach (var f in Item.AllItems[ItemTypes.TextureFile])
                            {
                                file.WriteLine("#define TEXTURE_" + f.NameWithoutExtension.ToUpper().Replace('-', '_') + " " + i++.ToString());
                            }
                        }
                        i = 0;
                        if (Item.AllItems.ContainsKey(ItemTypes.MeshFile))
                        {
                            foreach (var f in Item.AllItems[ItemTypes.MeshFile])
                            {
                                file.WriteLine("#define MESH_" + f.NameWithoutExtension.ToUpper().Replace('-', '_') + " " + i++.ToString());
                            }
                        }
                        i = 0;
                        if (Item.AllItems.ContainsKey(ItemTypes.ModelFile))
                        {
                            foreach (var f in Item.AllItems[ItemTypes.ModelFile])
                            {
                                file.WriteLine("#define MODEL_" + f.NameWithoutExtension.ToUpper().Replace('-', '_') + " " + i++.ToString());
                            }
                        }
                        i = 0;
                        if (Item.AllItems.ContainsKey(ItemTypes.MaterialFile))
                        {
                            foreach (var f in Item.AllItems[ItemTypes.MaterialFile])
                            {
                                file.WriteLine("#define MATERIAL_" + f.NameWithoutExtension.ToUpper().Replace('-', '_') + " " + i++.ToString());
                            }
                        }
                        i = 0;
                        if (Item.AllItems.ContainsKey(ItemTypes.SkeletonFile))
                        {
                            foreach (var f in Item.AllItems[ItemTypes.SkeletonFile])
                            {
                                file.WriteLine("#define SKELETON_" + f.NameWithoutExtension.ToUpper().Replace('-', '_') + " " + i++.ToString());
                            }
                        }
                        file.Write(RESOURCE_CLASS);
                    }
                }
            }
            catch (Exception e)
            {
                MainWindow.Instance.ShowMessageAsync("Filewriting error", "Error on writing the Resource.h and Resource.cpp: \n" + e.Message);
                return false;
            }
            return true;
        }
    }
}
