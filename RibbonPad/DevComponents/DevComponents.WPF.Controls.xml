<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevComponents.WPF.Controls</name>
    </assembly>
    <members>
        <member name="T:DevComponents.WPF.Controls.AdvTabularControl">
            <summary>
            Abstract base class for controls which display data in a tabular format. The ItemsControl's containers are expected to derive from AdvRowControl. 
            (While AdvRowControl based controls display a collection of AdvCellControls.) This class exposes several common properties, methods and events
            used by such controls. Example inheritors are AdvTree and AdvGrid.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IItemsHost">
            <summary>
            Interface for controls which host a collection of items and displays them in UI containers.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ActiveItemChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for ActiveItemChanged. Routing stragety is Bubble. Handler is RoutedEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SortByColumnRequestedEvent">
            <summary>
            Using a Routed Event as backing store for SortByColumnRequested. Routing stragety is Bubble. Handler is SortByColumnRequestedEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SelectionChangedEvent">
            <summary>
            Using a Routed Event as backing store for SelectionChanged. Routing stragety is Bubble. Handler is RoutedEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ItemsChangedEvent">
            <summary>
            Using RoutedEvent as backing store for ItemsChanged. Routing stragety is Bubble. Handler type is ItemsChangedRoutedEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.DeletingSelectedItemsEvent">
            <summary>
            Using a RoutedEvent as the backing store for DeletingSelectedItems. Routing stragety is Bubble. Handler is RoutedEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.InitializingNewItemEvent">
            <summary>
            Using a RoutedEvent as the backing store for InitializingNewItem. Routing stragety is Bubble. Handler is InitializingNewItemEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.NewItemAddedEvent">
            <summary>
            Using a RoutedEvent as the backing store for NewItemAdded. Routing stragety is Bubble. Handler is NewItemAddedEventHandler.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ActiveItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for ActiveItem.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.AlternationCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlternationCount.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.CanUserDeleteItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanUserDeleteItem.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ColumnDefinitionsProperty">
            <summary>
            Using a dependency property as the backing store for ColumnDefinitions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.IsEmptyAlternateDisplayProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEmptyAlternativeDisplay.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.IsEmptyAlternateDisplayTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEmptyNotificationTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ErrorNotificationProperty">
            <summary>
            Using a DependencyProperty as the backing store for ErrorNotification.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ErrorNotificationDialogBoxStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ErrorNotificationDialogBoxStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.FilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for Filter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl._HasItemsPropertyKey">
            <summary>
            Using a DependencyProperty as the backing store for HasItems.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.HighlightSelectedCellColumnHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HighlightColumnHeadersOfSelectedCells.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.HorizontalGridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalGridLineBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.HorizontalGridLineHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalGridLineHeight.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.HotTrackProperty">
            <summary>
            Using a DependencyProperty as the backing store for HotTrack. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.IsByRowEditingEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsByRowEditingEnabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.IsDragDropEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDragDropEnabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.IsGroupingProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsGrouping.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.IsSelectionFocusAwareProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectionFocusAware.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ItemsSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsSource.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ItemContainerStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemContainerStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ItemContainerStyleSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemContainerStyleSelector.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.MouseSelectModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for MouseSelectMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.RowKeepsKeyboardFocusOnErrorProperty">
            <summary>
            Using a DependencyProperty as the backing store for RowKeepsKeyboardFocusOnError.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ScrollModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScrollMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SelectedCellProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedCell.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SelectedCellsProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedCell.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SelectedItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedItem.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SelectedItemsProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedItems.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.SelectionModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectionMode. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ShowHorizontalGridLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowHorizontalGridLines.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.ShowPinnedColumnOrRowSeparatorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowPinnedColumnOrRowSeparator.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.VirtualizingModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecyclingMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTabularControl.VisualStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisualStyle.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.CommitEdit(System.Boolean)">
            <summary>
            Commits pending changes to the Row or cell which is currently in edit mode.
            If By Row editing is enabled, the behavior depends on whether there is a cell currently
            in edit mode. If there is and if the cell is dirty, then the cell's pending changes are committed.
            If there are no cells in edit mode (or if the current cell is not dirty) then the
            the Row's pending changes are validated and committed.
            Returns false if the commit was not performed because of validation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.CommitEdit(System.Windows.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
            Commits pending changes to cell currently being edited. If editingUnit is Row then
            the Row is committed. Returns false only when pending changes are not committed due to validation errors.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.BringIntoView(System.Int32)">
            <summary>
            Bring item at specified index into view. Returns amount of vertical offset change in either positive or negative direction.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.BringIntoView(System.Object)">
            <summary>
            Bring item into view. Returns amount of vertical offset change in either positive or negative direction.
            </summary>        
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.BringIntoView(DevComponents.WPF.Controls.AdvRowControl)">
            <summary>
            Bring container into view. Returns amount of vertical offset change in either positive or negative direction.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.BringIntoView(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Bring column into view. Returns amount of horizontal offset change in either positive or negative direction.
            </summary>        
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.PinItem(System.Object,DevComponents.WPF.Controls.RowPin)">
            <summary>
            Set Pin on container for item. Pin can be one of: Top, Bottom, NotPinned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.SortByColumn(DevComponents.WPF.Controls.ColumnDefinition,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Causes the nodes to be sorted by the provided column.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.ClearSelection">
            <summary>
            Clears the existing selection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.SelectAll">
            <summary>
            If there are ColumnDefinitions defined, then all columns' IsSelected property is set to true.
            If there are no columns defined, then this method does nothing.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.CanAddtoCurrentSelection(DevComponents.WPF.Controls.AdvCellControl)">
            <summary>
            Return true if the newly selected cell can be added to the current selection after applying any
            selection rules. If false is returned, the current selection is cleared and the newly selected cell is
            made the lone selection. Overriders should call base implementation before returning.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.CanAddtoCurrentSelection(DevComponents.WPF.Controls.AdvRowControl)">
            <summary>
            Return true if the newly selected Row can be added to the current selection after applying any selection rules.
            If false is returned, the current selection is cleared and the newly selected Row is made the lone selection.
            Overriders should call base implementation before returning.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnSelectionChanged">
            <summary>
            Virtual method called when selection changes. Raises the SelectionChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnItemsChanged(DevComponents.WPF.Controls.ItemsChangedRoutedEventArgs)">
            <summary>
            Virtual method called with the Items collection changes. Raises the ItemsChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnSelectedItemChanged(System.Object,System.Object,DevComponents.WPF.Controls.AdvRowControl)">
            <summary>
            Virtual method called when SelectedItem changes. extendTo is the Row which owns the new selected item, if the Row exists in the visual tree.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnSelectedCellChanged(DevComponents.WPF.Controls.AdvCellSelectionData,DevComponents.WPF.Controls.AdvCellSelectionData,DevComponents.WPF.Controls.AdvCellControl)">
            <summary>
            Virtual method called when SelectedCell changes. selectedCell is the cell which is selected, if it currently exists in the visual tree.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnDeletingSelectedItems(System.Windows.RoutedEventArgs)">
            <summary>
            Virtual method called to raise the DeletingSelectedItems routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnActiveItemChanged">
            <summary>
            Virtual method called to raise the ActiveItemChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnSortByColumnRequested(DevComponents.WPF.Controls.SortByColumnRequestedEventArgs)">
            <summary>
            Virtual method called to raise the SortByColumnRequested routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnIsActiveChanged">
            <summary>
            Virtual method called to raise the IsActiveChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.OnHasItemsChanged">
            <summary>
            Virtual method called when the value of HasItems changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.VerifySelection">
            <summary>
            Called when Items changes, verifies that current selection is still in collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.PrepareColumnDefinitions(DevComponents.WPF.Controls.ColumnDefinitionCollection,DevComponents.WPF.Controls.ColumnDefinitionCollection)">
            <summary>
            Virtual method called to prepare the column definitions collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.HandleItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Virtual method called when the value of ItemsSource changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControl.GetNextRowForKeyboardNavigation(DevComponents.WPF.Controls.AdvRowControl,DevComponents.WPF.Controls.NavigationDirection,System.Windows.Input.KeyboardNavigationMode)">
            <summary>
            Virtual method for getting the next Row when user is navigating with keyboard.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsTemplateApplied">
            <summary>
            Gets whether the ApplyTemplate method has executed.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.ColumnDefinitionsChanged">
            <summary>
            Raised when the column definitions for the table change.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.IsActiveChanged">
            <summary>
            Raised when the value of IsActive changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.ActiveItemChanged">
            <summary>
            Routed event raised when the value of ActiveItem changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.SortByColumnRequested">
            <summary>
            Routed Event raised when the the user clicks a column header with intention of sorting.
            Handle this event to prevent the default sorting.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.SelectionChanged">
            <summary>
            Routed Event raised when the selection changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.ItemsChanged">
            <summary>
            Routed Event raised when the Items collection changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.DeletingSelectedItems">
            <summary>
            Event raised from the DeleteSelected method, just before the items are removed. Handle the event to prevent the deletion.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.InitializingNewItem">
            <summary>
            Routed event raised when a new item is being generated as a placeholder for the new item Row at bottom of the grid.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTabularControl.NewItemAdded">
            <summary>
            Routed event raised after a new item has been added to the parent's Items collection by means of either 
            method ItemsCollection.AddNewItem or method ItemsCollection.AddNew. The event arguments - NewItemAddedEventArgs -
            has a reference to the newly created item which can be initialized by client before becoming visible in the UI.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.MaintainOrderOfSelectedItems">
            <summary>
            If true, then when a Row is selected, its item is added to SelectedItems in order of the item's index within the table.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ItemContainerManager">
            <summary>
            Provides access to the ItemContainerManager object which is responsible for container generation and virtualization.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ScrollViewer">
            <summary>
            Provides access to the table's scroll viewer, if one is defined in the applied template.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ColumnsPresenter">
            <summary>
            Access to the control which renders the columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ItemsHost">
            <summary>
            Access to the hosting panel for the item containers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectedColumns">
            <summary>
            Returns an enumeration of all the selected columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectedColumn">
            <summary>
            Returns the first column selected, if there are any selected columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.AllSelected">
            <summary>
            Gets whether all columns have been selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.LogicalExtent">
            <summary>
            Gets the total number of rows.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SuppressCellVirtualization">
            <summary>
            When VirtualizingMode is set to Recycling, the normal behavior is for Cells to virtualize as well as rows.
            Set this property to true to suppress cell virtualization.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ExistingRows">
            <summary>
            Gets an enumeration of all existing (i.e. realized) rows.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ExistingCells">
            <summary>
            Gets an enumeration of all existing (i.e. realized) cells.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.RowValidationRules">
            <summary>
            Gets a reference to the collection of ValidationRule which are applied to a Row when its CommitEdit method is called.
            If a rule is added to this collection, IsByRowEditingEnabled will be set to true automatically.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.GroupDescriptors">
            <summary>
            Access the collection of GroupItemDescriptor objects.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ActiveItem">
            <summary>
            Gets or set the active item. This property is automatically managed to be the item associated with the Row which currently contains keyboard focus.
            Setting will cause the associated Row to be focused.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.AlternationCount">
            <summary>
            Get or Set Alternation Count. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.CanUserDeleteItem">
            <summary>
            Get or set whether the user can delete a selected item with the delete key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ColumnDefinitions">
            <summary>
            Get or Set the column definitions which define whether and how columns are presented.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsEmptyAlternateDisplay">
            <summary>
            Gets or sets an optional object which is displayed when there are no items in Items collection (HasItems is false.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsEmptyAlternateDisplayTemplate">
            <summary>
            Get or set a DataTemplate which shows how to render IsEmptyNotification object, if one is set.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ErrorNotification">
            <summary>
            Gets or sets a value which determines how the user is notified about Row errors. Applies when by Row editing is enabled and the value of IsValid is false.
            This is a dependency property. The default value is ValidatinErrorNotificatinType.ErrorTemplate.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ErrorNotificationDialogBoxStyle">
            <summary>
            Gets or sets the Style to apply to the DialogWindow which is opened to notify the user of Row level errors. Applies only when IsByRowEditingEnabled = true
            and ErrorNotification = MessageBox.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.Filter">
            <summary>
            Get or set a Predicate with which to filter the items with.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.HasItems">
            <summary>
            Get whether the Items collection count is greater than 0. This is a read-only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.HighlightSelectedCellColumnHeader">
            <summary>
            Gets or sets whether the column headers of selected cells should be highlighted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.HorizontalGridLineBrush">
            <summary>
            Get or Set the brush used for the horizontal grid line.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.HorizontalGridLineHeight">
            <summary>
            Get or Set the height of the horizontal grid line. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.HotTrack">
            <summary>
            Get or Set whether the Row with mouse over is highlighted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsActive">
            <summary>
            Gets whether the control is active.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsByRowEditingEnabled">
            <summary>
            Gets or sets whether by-row editing is enabled. By default, all edits are scoped to the currently active cell. If
            by row editing is enabled, commits and validation are performed at row level.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsDragDropEnabled">
            <summary>
            Get or set whether Drag and Drop is enabled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsGrouping">
            <summary>
            Gets whether the grid is in grouping mode. This is a read-only property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.IsSelectionFocusAware">
            <summary>
            Gets or sets whether the selection box highlighting selected item is grayed out when the Tree control does not have input focus.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ItemsSource">
            <summary>
            Gets or Sets the source for the items which populate the Items collection. Equivalent to ItemsControl.ItemsSource.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ItemContainerStyle">
            <summary>
            Style for item containers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ItemContainerStyleSelector">
            <summary>
            Style selector for selecting style of item containers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.MouseSelectMode">
            <summary>
            Gets or sets a value which specifies whether items (rows and/or cells) are selected by left mouse button down,
            right mouse button down, or both. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.RowKeepsKeyboardFocusOnError">
            <summary>
            Gets or sets whether rows prevent keyboard focus from leaving their boundary when their HasError property is true.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectedCell">
            <summary>
            Get the data behind the selected cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectedCells">
            <summary>
            Get or set the observable collection which tracks the selected cells. This is a dependency property. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectedItem">
            <summary>
            Get or Set the selected item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectedItems">
            <summary>
            Gets or sets a reference to an ObservableCollection which contains the updated list of selected items. Applies when SelectionMode is Multiple or Extended.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectionMode">
            <summary>
            Get or Set the selection mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.SelectOnHandledMouseEvent">
            <summary>
            Gets or sets whether selection should occur in the case where the mouse event is handled at the time it is recieved by the item to be selected.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ShowHorizontalGridLines">
            <summary>
            Get or Set whether horizontal grid lines are shown. This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.ShowPinnedColumnOrRowSeparator">
            <summary>
            Get or set whether the visual element which separates pinned columns or rows from scrollable content is visible. Ignored if there are
            no pinned columns or rows. This is a dependency property. Default is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.VirtualizingMode">
            <summary>
            Get or Set the virtualizing mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.VisualStyle">
            <summary>
            Get or Set the built-in theme to use.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTabularControl.CellSelectInternal">
            <summary>
            Abstract property, inheritors should return true if cells are selectable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.DataInitializingMessageStringKey">
            <summary>
            Identifies a resource which defines the string used when virtualizing data is initializing asychronously.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.DefaultGroupItemStyleKey">
            <summary>
            Identifies the resource which defines the Style to use by default for group items.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.RowDetailsExpandButtonColumnDefinitionKey">
            <summary>
            Identifies the resource which defines the ColumnDefinition used for the row details expand button column.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.RowDetailsExpandButtonStyleKey">
            <summary>
            Identifies the resource which defines the Style used for the toggle button which expands/collapses row details.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.BorderBrushKey">
            <summary>
            Identifies resource for BorderBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.BackgroundKey">
            <summary>
            Identifies resource for Background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.PaddingKey">
            <summary>
            Identifies resource for Padding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ScrollViewerStyleKey">
            <summary>
            Identifies resource for the style applied to the ScrollViwer.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ColumnHeaderDropAdornerTemplateKey">
            <summary>
            Identifies resource which defines DataTemplate for DropAdorner used by column headers.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ColumnHeaderDragAdornerTemplateKey">
            <summary>
            Identifies resourced which defines DataTemplate for the DragAdorner used by column headers.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.GridLineBrushKey">
            <summary>
            Resource key identifying the Brush used to paint the Grid Lines.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.HeaderCornerBackgroundKey">
            <summary>
            Identifies the Brush used for background of the header top right corner.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.HeaderCornerGlyphBrushKey">
            <summary>
            Identifies the Brush used for background of the header top right corner.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGrid.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.AutoGeneratingColumnEvent">
            <summary>
            Using a RoutedEvent as the backing store for AutoGeneratingColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.HeaderCornerClickEvent">
            <summary>
            Using a RoutedEvent for HeaderCornerClick.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.AllowColumnReorderProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnReorder.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.AllowColumnResizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnReorder.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.AutoGenerateColumnsProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoGenerateColumns.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.CanUserAddRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanUserAddRow.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ColumnAlternationCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnAlternationCount.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ColumnHeaderClickBehaviorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnHeaderClickBehavior.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ColumnHeaderClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnHeaderClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.FirstRowNumberProperty">
            <summary>
            Using a DependencyProperty as the backing store for FirstRowIndex.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.HeaderCornerClickBehaviorProperty">
            <Summary>
            Backing store for HeaderCornerClickBehavior.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.HighlightSelectedCellRowHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HighlightSelectedCellRowHeaders.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.LockRowHeaderWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for LockRowHeaderWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.LockRowHeightsProperty">
            <summary>
            Using a DependencyProperty as the backing store for LockRowHeights.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.RowDetailsTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for RowDetailsTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.RowDetailsShowModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for RowDetailsShowMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.RowHeaderWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for RowHeaderWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.SelectionUnitProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectionUnit.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ShowColumnGroupingPanelProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowColumnGroupingPanel.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ShowColumnHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowColumnHeaders.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ShowRowDetailsRootLineProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowRowDetailsRootLine.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ShowRowHeadersProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowRowHeaders.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ShowRowNumbersProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowRowIndexes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.ShowVerticalGridLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowVerticalGridLines.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGrid.VerticalGridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalGridLineBrush.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGrid.OnAutoGeneratingColumn(DevComponents.WPF.Controls.AutoGeneratingColumnEventArgs)">
            <summary>
            Virtual method called to raise the AutoGeneratingColumn routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGrid.OnHeaderCornerClick">
            <summary>
            Virtual method called to raise the HeaderCornerClick routed event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.HeaderCorner">
            <summary>
            Access the grid header corner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowLoadingMessageForAsynchronousData">
            <summary>
            Set to cause the "Data Loading" message to be displayed in rows when loading data asynchronously.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.CanGroup">
            <summary>
            Returns true if the rows can be grouped. Note that grouping is not supported when virtualizing is enabled. 
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvGrid.AutoGeneratingColumn">
            <summary>
            Routed event raised when a new column is being auto generated.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvGrid.HeaderCornerClick">
            <summary>
            Bubbling routed event raised when the ToggleButton at the top left corner of the grid is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.AllowColumnReorder">
            <summary>
            Get or Set whether the user is able to reorder columns using drag and drop. This property is mapped to the property of the same name in the column definition collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.AllowColumnResize">
            <summary>
            Get or Set whether the user is able to resize columns using the mouse. This property is mapped to the property of the same name in the column definition collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.AutoGenerateColumns">
            <summary>
            Get or Set whether columns are automatically generated from the data source if ColumnDefinitions are not provided.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.AutoSetRowHeaderWidth">
            <summary>
            Get or set whether row header widths are automatically set based on content. By default, this value is true if RowHeaderWidth
            is unset, false otherwise. When the user manually sets the row header width, this value is set to false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.CanUserAddRow">
            <summary>
            Get or set whether the user can add a new row.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ColumnAlternationCount">
            <summary>
            Get or Set the alternation count for columns. This works the same as Alternation Count for rows.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ColumnHeaderClickBehavior">
            <summary>
            Determines what happens when a column header is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ColumnHeaderClickMode">
            <summary>
            Get or set whether the click event of a column header happens on mouse left button press or release.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.FirstRowNumber">
            <summary>
            Get or set the index of the first row - i.e. whether the row indexing is 0 or 1 based. Default is 1.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.HeaderCornerClickBehavior">
            <summary>
            Gets or sets a value which determines what happens when the user clicks the button at the top left corner of the grid.
            This is a dependency property. The default value is Auto.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.HighlightSelectedCellRowHeader">
            <summary>
            Get or set whether the the row header of a selected cell should be highlighted. By default, this property
            is bound to property HighlightSelectedCellColumnHeader.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.IsContextMenuEnabled">
            <summary>
            Gets or Sets whether the built-in context menu is enabled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.LockRowHeaderWidth">
            <summary>
            Get or set whether the user can resize the row header width.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.LockRowHeights">
            <summary>
            Get or set whether the user can resize row heights.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.RowDetailsTemplate">
            <summary>
            Get or set a DataTemplate which defines how to render the details section of the rows.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.RowDetailsShowMode">
            <summary>
            Get or set when details are shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.RowHeaderWidth">
            <summary>
            Get or Set the width of the row headers. This is a dependency proeprty. The default value is NaN, which results in the value being auto calculated
            based on desired size of the headers of existing rows when the grid is loaded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.SelectionUnit">
            <summary>
            Gets or Sets a value which determines whether cells or rows or both are selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowColumnGroupingPanel">
            <summary>
            Gets or sets whether to show the panel where user can drag column headers to indicate that the data should be grouped against that column.
            Note that grouping is not supported when virtualization is enabled. If this property is set when virtualization is enabled it will have no effect.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowColumnHeader">
            <summary>
            Get or set whether column headers are show. Default is true. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowRowDetailsRootLine">
            <summary>
            Get or set whether the root line is drawn from expander button to row details content. Applies only when RowDetailsShowMode is ShowWithToggleButton. 
            Default value is false. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowRowHeaders">
            <summary>
            Get or set whether row headers are shown. Default is true. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowRowNumbers">
            <summary>
            Get or set whether the default row header content should be the row's index. Default is true. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.ShowVerticalGridLines">
            <summary>
            Gets or sets whether vertical grid lines are shown. Default is true. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGrid.VerticalGridLineBrush">
            <summary>
            Get or set the Brush used for Vertical grid lines. This property is here for convenience. Its value is passed on to 
            ColumnDefinitions.GridLineBrush. If a value is set on ColumnDefinitions, that value takes precidence.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.SelectedEvent">
            <summary>
            Using a RoutedEvent as backing for Selected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.UnselectedEvent">
            <summary>
            Using a RoutedEvent as backing for Unselected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.BeforeSelectedEvent">
            <summary>
            Using a RoutedEvent as backing for BeforeSelected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.EditBeginningEvent">
            <summary>
            Using a RoutedEvent as backing for EditBeginning event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.EditCommittedEvent">
            <summary>
            Using a RoutedEvent as backing for EditCommitted event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsDirtyChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for IsDirtyChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsEditingChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for IsEditingChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.BeginEditTriggerModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for BeginEditTriggerMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.CellDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellDefinition.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.ClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.EditTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.EditorStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsDirtyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDirty.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsEditableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsEditingProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditing.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsHighlightedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsHighlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsSelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectable. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvCellControl.SelectionStateProperty">
            <Summary>
            Backing store for SelectionState.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.BeginEdit(System.String)">
            <summary>
            Puts the cell into Edit mode, optionally setting the initial value presented to the user.
            Returns true if the cell is in edit mode when the method returns, otherwise false.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.CancelEdit">
            <summary>
            Cancels the current edit operation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.CommitEdit(System.Boolean)">
            <summary>
            Propagates the current value held by the underlying editing content control to the cell's Content property.
            If the parent row is not editing by row, then the changes are propagated to the underlying data source.
            If parent row is editing, changes are not propagated to parent row. It is left to the row to ensure 
            value are propagated when it commits its edit.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding to manage keyboard navigation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Overriding to begin edit.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to initiate edit mode if appropriate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to update Normal and Highlight states.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to force desired size to report as being same as constraint.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnSelected">
            <summary>
            Virtual method called when the value of IsSelected changes to True. Raises the Selected routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnUnselected">
            <summary>
            Virtual method called when the value of IsSelected changes to false. Raises the Unselected routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnBeforeSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Virtual method called to raise the BeforeSelected event. Setting the event args Handled property to 
            true cancels the selection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnEditBeginning(System.Windows.RoutedEventArgs)">
            <summary>
            Virtual method called immediately before the cell enters edit mode. Raises the EditBeginning routed event.
            Set args Handled to True to prevent the cell from entering edit mode.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnEditCommitted">
            <summary>
            Virtual method called when an edit has ended and the value committed. Raises the EditCommitted routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnIsDirtyChanged">
            <summary>
            Virtual method called when the value of IsDirty changes, raises IsDirtyChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.OnIsEditingChanged">
            <summary>
            Virtual method called to raise the IsEditingChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellControl.GoToSelectionState(DevComponents.WPF.Controls.AdvCellControl.CellSelectionState)">
            <summary>
            Virtual method called with the cell's selection state changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.Selected">
            <summary>
            Event fired when the value of IsSelected changes from False to True. This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.Unselected">
            <summary>
            Event fired when the value of IsSelected changes from True to False. This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.BeforeSelected">
            <summary>
            Event fired before the value of IsSelected changes from False to True. Setting the event handler's Handled
            property to True cancels the selection. This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.EditBeginning">
            <summary>
            Event fired before the cell enters edit mode. Set event args Handled property to true cancels the edit.
            This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.EditCommitted">
            <summary>
            Event is fired after an edit is successfully committed to the underlying data source.
            This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.IsDirtyChanged">
            <summary>
            Routed event raised when the value of IsDirty changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvCellControl.IsEditingChanged">
            <summary>
            Routed event raised when the value of IsEditing changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.Editor">
            <summary>
            Gets a reference to the internal editing control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.ParentRow">
            <summary>
            Get reference to this cell's parent row.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IndexInRow">
            <summary>
            Gets the zero based index of this cell within its parent row.
            (Including "fixed" columns - which are not part of ColumnDefinitionCollection proper.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.BeginEditTriggerMode">
            <summary>
            Get or Set the trigger mode for beginning an edit.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.CellDefinition">
            <summary>
            Gets the ColumnDefinition instance which defines the cell. This is a read only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.ClickMode">
            <summary>
            Get or set whethe selection and editing are triggered by mouse button down or up. ClickMode.Hover is not supported.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.EditTemplate">
            <summary>
            Get or Set ControlTemplate to be applied to the ContentEditingControl which both displays and edits the cells content. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.EditorStyle">
            <summary>
            Gets or sets the style used by the embedded EditingContentControl. By default this value is null and the 
            editor uses its default style. If unset and a value for CellEditStyle is set on the cell's CellDefinition,
            then EditorStyle is bound to CellDefinition's CellEditStyle property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsDirty">
            <summary>
            Gets whether there are changes to cell content which have not been committed to the underlying data source.
            This is a read-only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsEditable">
            <summary>
            Get or Set whether the cell is editable.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsEditing">
            <summary>
            Gets or sets whether the control is in edit mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsHighlighted">
            <summary>
            Get or Set whether the cell is highlighted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsSelectable">
            <summary>
            Get or Set whether this node can be selected. Default value is True. This is a dependency property. 
            The default value is to take on the coresponding value from parent Node.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsSelected">
            <summary>
            Get or Set whether this cell is selected. This value is ignored if AdvTree.SelectionMode is not Cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.SelectionState">
            <summary>
            Gets the cell's selection state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.SelectOnHandledMouseEvent">
            <summary>
            Gets or sets whether selection should occur in the case where the mouse event is handled at the time it is recieved.
            By default, this property is inherited from the parent row's property of the same name.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellControl.IsSelectableInternal">
            <summary>
            Returns true if the cell can be selected. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.PaddingKey">
            <summary>
            Identifies the Thickness used by default for Padding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.ForegroundKey">
            <summary>
            Identifies the Brush used by default for Foreground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.IsSelectedBorderBrushKey">
            <summary>
            Resource key identifying the brush used for the selection box border.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.IsSelectedBackgroundKey">
            <summary>
            Resource key identifying the brush used for the selection box background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.IsHighlightedBorderBrushKey">
            <summary>
            Resource key identifying the brush used for the highlight box border.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.IsHighlightedBackgroundKey">
            <summary>
            Resource key identifying the brush used for the highlight box background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.SelectedForegroundKey">
            <summary>
            Identifies the brush used for foreground of selected row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.HighlightForegroundKey">
            <summary>
            Identifies the brush used for foreground of highlighted row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.SelectedInactiveBackgroundKey">
            <summary>
            Resource key identifying the brush used for the background when the parent tree is inactive.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.SelectedInactiveBorderBrushKey">
            <summary>
            Resource key identifying the brush used for the border when the parent tree is inactive.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.ErrorTemplateKey">
            <summary>
            Identifies the default ErrorTemplate for this control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridCell.InnerOffsetWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for InnerOffsetWidth.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to measure.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellPanel.GetArrangeWidth(DevComponents.WPF.Controls.AdvCellControl,System.Int32)">
            <summary>
            Returns the width with which to arrange the cell. Being virtual gives inheritors to customize (AdvTree
            needs to be able to adjust for its _FirstCellOffset value.)
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellPanel.MeasureCell(DevComponents.WPF.Controls.AdvCellControl,System.Double,System.Int32)">
            <summary>
            Performs actual measurement of the cell. Overriders can perform custom logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellPanel.UpdateCells">
            <summary>
            This method is responsible for ensuring that there are cells representing each column placed in the
            Children. It is also responsible for cell virtualization.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ItemContainerManager">
            <summary>
            Abstract class providing base functionality for managing, creating and virtualizing containers for items.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.#ctor(DevComponents.WPF.Controls.IItemsHost)">
            <summary>
            Construct with the host container.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ItemContainerManager.ContainerVirtualizingEvent">
            <summary>
            Routed Event backing for event ContainerVirtualizing. The event raised immediately before a container is virtualized. 
            Setting the event args Handled to true will prevent the container from being virtualized.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.AddContainerVirtualizingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            AddHandler for ContainerVirtualizing Attached Event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.RemoveContainerVirtualizingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            RemoveHandler for ContainerVirtualizing Attached Event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ItemContainerManager.ContainerRecycledEvent">
            <summary>
            Routed event backing for event ContainerRecycled. The event is raised when an existing container
            is re-used for an item other than the one for which it was originally created.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.AddContainerRecycledHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            AddHandler for ContainerRecycled Attached Event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.RemoveContainerRecycledHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            RemoveHandler for ContainerRecycled Attached Event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ItemContainerManager.ContainerGeneratedEvent">
            <summary>
            Routed event backing for event ContainerGenerated. The event is raised after a new container is created
            and prepared for an item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.AddContainerGeneratedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            AddHandler for ContainerGenerated Attached Event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.RemoveContainerGeneratedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            RemoveHandler for ContainerGenerated Attached Event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ItemFromContainer(System.Windows.FrameworkElement)">
            <summary>
            Gets the item held by the givin container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.IndexFromItem(System.Object)">
            <summary>
            Gets the index of the specified item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ItemFromIndex(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.IndexFromContainer(System.Windows.FrameworkElement)">
            <summary>
            Returns the index of the item which the container is connected to.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ContainerFromItem(System.Object,System.Boolean)">
            <summary>
            Gets the container for the item, optionally creating one if not already realized.
            Will return null if the item is not a member of the collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ContainerFromItem(System.Object,System.Boolean,System.Boolean@)">
            <summary>
            Gets the container for the item, optionally creating one if not already realized.
            Will return null if the item is not a member of the collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ContainerFromIndex(System.Int32,System.Boolean)">
            <summary>
            Get the container for a specific item index, optionally creating the container if it has not yet been realized.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ContainerFromIndex(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Get the container for a specific item index, optionally creating the container if it has not
            yet been realized and setting a boolean to indicate whether the item was created or if it already existed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.OnContainerVirtualizing(DevComponents.WPF.Controls.ItemContainerEventArgs)">
            <summary>
            Virtual method called to raise the ContainerVirtualizing event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.OnContainerGenerated(DevComponents.WPF.Controls.ItemContainerEventArgs)">
            <summary>
            Virtual method called to raise the ContainerGenerated event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.OnContainerRecycled(DevComponents.WPF.Controls.ItemContainerEventArgs)">
            <summary>
            Virtual method called to raise the ContainerRecycled event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.Clear(System.Boolean,System.Boolean)">
            <summary>
            Virtualizes all realized containers. Container may remain if it was not virtualizable (by virtue of event being handled) 
            unless force = true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.Trim">
            <summary>
            Removes all non-visible containers.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.ContainsContainer(System.Windows.FrameworkElement)">
            <summary>
            Returns true if the container is contained by the panel's children.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.RecycleContainer(System.Windows.FrameworkElement,System.Int32)">
            <summary>
            Prepare container for new item and insert into Panel children. Return false if host 
            container fails to prepare container for item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemContainerManager.VirtualizeContainer(System.Windows.FrameworkElement,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns false if the container was not virtualized. The container will not be virtualized if 
            the ContainerVirtualizing event is handled. If performingLayoug is true, then the container is virtualized but 
            it is not removed from the Panel at this time, in anticipation of likely need to reuse same container in same panel.
            This is a performance enhancement.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.IsVirtualizing">
            <summary>
            Get whether containers are being virtualized.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.HostContainer">
            <summary>
            The IItemsControl which owns this ItemContainerManager.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.Panel">
            <summary>
            The Panel (which contained by HostContainer) which is used for displaying the containers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.FirstVisibleIndex">
            <summary>
            The index of the first visible item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.LastVisibleIndex">
            <summary>
            The index of the last visible item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.VisibleContainers">
            <summary>
            Returns an enumeration of the visible containers - the containers for items of index
            greater than or equal to FirstVisibleIndex and less than or equal to LastVisibleIndex.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.AllContainers">
            <summary>
            Returns an enumeration of the ordered containers for all items, creating those 
            containers which are not currently realized.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.HiddenContainers">
            <summary>
            Returns an enumeration of the containers which are realized but whose item
            index does not fall within the bounds of FirstVisibleIndex and LastVisibleIndex.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.ItemCount">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemContainerManager.ActualItemCount">
            <summary>
            If the host container's Items has groups defined, it still returns the total number of non-grouped items from its Count property.
            This property is meant to support such instances by returning the number of groups if the items are grouping.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.IsExpandedChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for IsExpandedChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.AlternationCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlternationCount.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.AlternationIndexProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlternationIndex.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.CanUserCollapseProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanUserCollapse.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.HasItemsProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasItems.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.HasSubGroupsProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasSubGroups.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.HideIfEmptyProperty">
            <summary>
            Using a DependencyProperty as the backing store for HideIfEmpty.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.IsExpandedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsExpanded.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.IsExpandedToggleButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsExpandedToggleButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.ItemsIndentationProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsIndentation.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGroupItem.LevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.Rows">
            <summary>
            Gets an enumeration of all rows in the group. If this group has sub groups, 
            then the rows of all sub groups are concatenated together in return.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.SubGroups">
            <summary>
            Returns an enumeration of the sub groups or an empty enumerator.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvGroupItem.IsExpandedChanged">
            <summary>
            Routed event raised when the value of IsExpanded changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.AlternationCount">
            <summary>
            Gets or sets AlternationCount.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.AlternationIndex">
            <summary>
            Gets or sets the alternation index.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.CanUserCollapse">
            <summary>
            Get or set whether the user can collapse and expand the group.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.HasItems">
            <summary>
            Gets whether the group has items. Readonly dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.HasSubGroups">
            <summary>
            Gets whether this group has sub groups. Readonly dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.HideIfEmpty">
            <summary>
            Gets or sets whether this group is visible if it is empty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.IsExpanded">
            <summary>
            Gets or sets whether the group is expanded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.IsExpandedToggleButtonStyle">
            <summary>
            Gets or sets the style used for the toggle button with which the user can expand and collapse the group.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.ItemsIndentation">
            <summary>
            Get or set the amount of indentation in the display of the group's items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGroupItem.Level">
            <summary>
            Gets the group's level in hierarchy of sub groups. Top level group is level 0.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridHeaderCorner.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridHeaderCorner.CanClick">
            <summary>
            Get or set whether the header corner can raise the click event - whether the user can "click" on the control.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TabularControlItemContainerManager">
            <summary>
            An ItemContainerManager with properties and methods to support AdvTabularControl based controls, such as
            AdvGrid and AdvTree.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvRowControl">
            <summary>
            Abstract base class for controls which display a row of cells. AdvTreeNode and AdvGridRow are examples.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.UnselectedEvent">
            <summary>
            Using a RoutedEvent as backing for Unselected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.SelectedEvent">
            <summary>
            Using a RoutedEvent as backing for Selected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.BeforeSelectedEvent">
            <summary>
            Using a RoutedEvent as backing for Unselected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsCellSelectedWithinChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for IsCellSelectedWithinChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.PinChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for PinChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.ConnectingEvent">
            <summary>
            Using a RoutedEvent as the backing store for Connecting.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.DisconnectingEvent">
            <summary>
            Using a RoutedEvent as the backing store for Disconnecting.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsDirtyChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for IsDirtyChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.AlternationIndexProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlternationIndex.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.ClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.ErrorNotificationProperty">
            <summary>
            Using a DependencyProperty as the backing store for ErrorNotification.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.HasErrorProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsValid.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.HorizontalGridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalGridLineBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.HorizontalGridLineHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalGridLineHeight.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsByRowEditingEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsByRowEditingEnabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsCellSelectedWithinProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCellSelectedWithin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsDirtyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDirty.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsEditingProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditing.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.IsSelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectable. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.PinProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.KeepKeyboardFocusWhenHasErrorProperty">
            <summary>
            Using a DependencyProperty as the backing store for KeepKeyboardFocusWhenHasError.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.SelectionStateProperty">
            <Summary>
            Backing store for SelectionState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.ShowHorizontalGridLineProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowHorizontalGridLine.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvRowControl.ValidationRulesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValidationRules.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Overriding to return valid hit test result when the point is within the bounds of the header.
            Default implementation always returns null... By returning valid result, allows parent tree to
            find the node at point with much greater performance than otherwise.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to go to NotHighlighted state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Overriding to perform selection logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Overriding to commit edit when keyboard focus leaves this row, and if by-row editing is enabled, 
            will cancel the event if there are errors.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding to perform keyboard navigation logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.GetActiveCell">
            <summary>
            Gets the cell with keyboard focus, if there is one.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.CommitEdit(System.Boolean)">
            <summary>
            If By Row editing is enabled, the behavior depends on whether there is a cell currently
            in edit mode. If there is and if the cell is dirty, then the cell's pending changes are committed.
            If there are no cells in edit mode (or if the current cell is not dirty) then the
            the row's pending changes are validated and committed.
            Returns false if the commit was not performed because of validation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.CommitEdit(System.Windows.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
            Commits pending changes to cell currently being edited. If editingUnit is Row then
            the row is committed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.GetCell(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Returns the cell with the provided definition, or null.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.NavigateRight(System.Windows.Input.KeyboardNavigationMode,System.Boolean,System.Boolean)">
            <summary>
            Causes focus to move to the next cell to the right, or if at last cell or if cells are not selectable, next row.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.NavigateLeft(System.Windows.Input.KeyboardNavigationMode,System.Boolean,System.Boolean)">
            <summary>
            Causes focus to move to the next cell to the left, or previous row if at first cell or cells are not selectable.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.NavigateUp(System.Windows.Input.KeyboardNavigationMode,System.Boolean,System.Boolean)">
            <summary>
            Causes focus to move to the preious row. Returns true if focus is set on a new row. Returns false if focus remains the same.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.NavigateDown(System.Windows.Input.KeyboardNavigationMode,System.Boolean,System.Boolean)">
            <summary>
            Causes focus to move to the next row down. Returns true if focus is set on a new row. Returns false if focus remains the same.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.Connect(DevComponents.WPF.Controls.AdvTabularControl,System.Object)">
            <summary>
            Derived classes should call base implementation when most appropriate for them. 
            It is up to derived classes to call EnsureInheritedProperties and ClearInheritedProperties when needed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnDataLoading">
            <summary>
            Called when virtualizing data is being fetched.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnDataLoaded">
            <summary>
            Called when virtualizing data has loaded and is available.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnSelected">
            <summary>
            Virtual method called when the IsSelected property value changes from false to true. Raises the Selected routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnUnselected">
            <summary>
            Virtual method called when the IsSelected property changes from true to false.
            Raises the Unselected routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnBeforeSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Virtual method called to raise the BeforeSelected event. Setting the event args Handled property to 
            true cancels the selection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnIsCellSelectedWithinChanaged">
            <summary>
            Virtual method called to raise the IsCellSelectedWithin routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnPinChanged">
            <summary>
            Virtual method called to raise the PinChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnConnecting">
            <summary>
            Raises the Connecting routed event. It is the responsibility of the inheriting class to call this
            method as the last action in the Connect override, before setting IsConnected = true;
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.OnDisconnecting">
            <summary>
            Raises the Disconnecting routed event. It is the responsibility of the inheriting class to call 
            this method as the first action in the Disconnect override, after setting IsConnected = false.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.HitTestRow(System.Windows.Point)">
            <summary>
            Inheritors return true if mouse position is over the Row.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.NavigateTo(DevComponents.WPF.Controls.NavigationDirection,System.Boolean,System.Boolean)">
            <summary>
            Called by one row to another for navigation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.ConnectCells">
            <summary>
            This method ensures that the CellDefinitions are set and CellPanel is connected. 
            Base classes need to call this method for themselves. It is not called from this class's
            ApplyTemplate or Connect method, because it calls the virtual method GetEffectiveCellDefinitions()
            the concrete implementation of which might depend on state of inheriting class.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.Validate">
            <summary>
            Virtual method called to perform row level validation. Returns true when valid.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.GoToSelectionState(DevComponents.WPF.Controls.AdvRowControl.RowSelectionState)">
            <summary>
            Virtual method called when the row enters a new selection state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.HandleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Virtual method called in response to either a mouse up or mouse down event, depending on ClickMode.
            The parent table's MouseSelectMode should be checked in relation to which mouse button, left or right, generated the event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.Unselected">
            <summary>
            Event fired when the value of IsSelected changes from True to False. This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.Selected">
            <summary>
            Event fired when the value of IsSelected changes from False to True. This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.BeforeSelected">
            <summary>
            Event fired before the value of IsSelected changes from False to True. Setting the event handler's Handled
            property to True cancels the selection. This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.IsCellSelectedWithinChanged">
            <summary>
            Event raised when the value of IsCellSelectedWithin changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.PinChanged">
            <summary>
            Routed event that fires when the value of Pin changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.Connecting">
            <summary>
            Routed event raised just before the Connect method returns. The Connect method is called to prepare the control
            for presentation, and is part of the virtualizing framework.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.Disconnecting">
            <summary>
            Routed event raised as first action when disconnecting a virtualized row.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvRowControl.IsDirtyChanged">
            <summary>
            Routed event raised when the value of IsDirty changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.CellDefinitions">
            <summary>
            Identifies the column definitions collection which defines the columns which present the 
            row's data. By default, a row inherits this value from the parent table's ColumnDefinitions. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.CellsColumnsPresenter">
            <summary>
            Get the ColumnsPresenter control which presents the columns to which the cells of this row belong. Will be null if there are no cells.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.Item">
            <summary>
            Gets a reference to the object which was used to create this container.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.HasCells">
            <summary>
            Returns true if the row contains Cells.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.Cells">
            <summary>
            Returns an enumeration of the Cells of this Row.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsCellEditingWithin">
            <summary>
            Returns true if a cell in this row is currently in edit mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ParentTable">
            <summary>
            Gets the parent table.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.CellPanel">
            <summary>
            Gets the panel which houses the row's cells.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsConnected">
            <summary>
            Gets whether the row is in connected state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsNewItemPlaceholderRow">
            <summary>
            Gets whether this row is the New Item Placeholder Row.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ValidationErrors">
            <summary>
            Gets an observable collection of error messages. Will be an empty collection if IsValid is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ItemOwner">
            <summary>
            Gets a reference to the control which owns the Items collection of which this row's Item is a member.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsDataLoading">
            <summary>
            Set to true when virtualizing data is loading. When set, the protected method OnDataLoading is called.
            When the data has loaded and is available, property will be reset and OnDataLoaded method is called.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.AlternationIndex">
            <summary>
            Get or set the alternation index. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ClickMode">
            <summary>
            Get or set whethe selection and editing are triggered by mouse button down or up. ClickMode.Hover is not supported.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ErrorNotification">
            <summary>
            Gets or sets a value which determines how the user is notified about row errors. Applies when by row editing is enabled and the value of IsValid is false.
            This is a dependency property. The default value is ValidatinErrorNotificatinType.ErrorTemplate.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.HasError">
            <summary>
            Gets whether the row in in valid state. This will always be True if by-row editing is not enabled. Readonly dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.HorizontalGridLineBrush">
            <summary>
            Get or Set the brush used for the horizontal grid line. By default, this value is obtained from
            the parent table's property of the same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.HorizontalGridLineHeight">
            <summary>
            Get or Set the height of the horizontal grid line. This is a dependency property. By default, this value is obtained from
            the parent table's property of the same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsByRowEditingEnabled">
            <summary>
            Gets or sets whether by-row editing is enabled. By default this value is inherited from the parent table's property of same name. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsCellSelectedWithin">
            <summary>
            Gets whether a Cell contained by this Row is currently selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsDirty">
            <summary>
            Gets whether there are un-committed changes pending in the row. This is a read-only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsEditing">
            <summary>
            Gets whether the row in currently in edit mode. Applies only when the parent table's IsEditByRowEnabled is true. Readonly dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsHighlighted">
            <summary>
            Gets or sets whether the row is highlighted. Users can set this property, however, it is also
            subject to change due to mouse movement which may overwrite any value set.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsSelected">
            <summary>
            Get or Set whether this node is selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsSelectable">
            <summary>
            Get or Set whether this node can be selected. Default value is True. Note this value does not affect children. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.Pin">
            <summary>
            Get or set whether this row is pinned to the top or the bottom of the view, or not pinned at all.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.KeepKeyboardFocusWhenHasError">
            <summary>
            Gets or sets the value which determines whether the row will prevent keyboard focus from leaving its boundaries when HasError is true.
            Applies only when IsByRowEditingEnabled == true.
            This is a dependency property, the default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.SelectionState">
            <summary>
            Gets the row's selection state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.SelectOnHandledMouseEvent">
            <summary>
            Gets or sets whether selection should occur in the case where the mouse event is handled at the time it is recieved.
            By default, this value is inherited from the parent table's property of the same name.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ShowHorizontalGridLine">
            <summary>
            Get or Set whether the horizontal grid line is visible. By default, this value is inherited from the
            parent table's ShowHorizontalGridLine property, but can be overridden on an individual row basis.
            This is a dependency property. The default value is false.
            </summary> 
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ValidationRules">
            <summary>
            Gets or sets the collection of ValidationRule objects which are used to validate the row data when editing and IsByRowEditingEnabled == true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.IsSelectableInternal">
            <summary>
            Virtual property, gets whether this row can be selected taking into account property IsSelectable
            while returning false if Cells are selectable.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.AreCellsSelectable">
            <summary>
            Virtual property which gets whether cells in this row can be selected. Will
            return false if IsSelectable is false, regardless of parent table's selection mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.StackingHeight">
            <summary>
            Returns the effective height of the row header.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.ValidationErrorAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overriding to return VisualChild.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.ValidationErrorAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure VisualChild is measured.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvRowControl.ValidationErrorAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure VisualChild is arranged.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvRowControl.ValidationErrorAdorner.VisualChildrenCount">
            <summary>
            Overriding to return 1.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.RowErrorTemplateKey">
            <summary>
            Identifies the ControlTemplate used by default for displaying error information for row level validation.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.DataLoadingMessageStringKey">
            <summary>
            Identifies the string used to inform the user that data is loading.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderPaddingKey">
            <summary>
            Identifies the brush used for the background of the row header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderBackgroundKey">
            <summary>
            Identifies the brush used for the background of the row header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderForegroundKey">
            <summary>
            Identifies the brush used for the foreground of the row header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderBorderBrushKey">
            <summary>
            Identifies the brush for header background when a row is highlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderSelectedGlyphStyleKey">
            <summary>
            Identifies the style used for the glyph which indicates that a row has focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.RowSelectedHeaderForegroundKey">
            <summary>
            Identifies the brush used for the row header when the row is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.RowSelectedHeaderBackgroundKey">
            <summary>
            Identifies the brush used for the row header when the row is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.RowSelectedHeaderBorderBrushKey">
            <summary>
            Identifies the brush used for the border of the row header when the row is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.CellSelectedHeaderForegroundKey">
            <summary>
            Identifies the brush used for the row header when a cell is selected within the row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.CellSelectedHeaderBackgroundKey">
            <summary>
            Identifies the brush used for the row header when a cell is selected within the row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.CellSelectedHeaderBorderBrushKey">
            <summary>
            Identifies the brush used for the border of the row header when a cell is selected within the row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.SelectedBackgroundKey">
            <summary>
            Identifies the brush for row background when row is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HighlightHeaderForegroundKey">
            <summary>
            Identifies the brush for header background when a row is highlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HighlightHeaderBackgroundKey">
            <summary>
            Identifies the brush for header background when a row is highlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HighlightHeaderBorderBrushKey">
            <summary>
            Identifies the brush for border of the header when a row is highlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HighlightBackgroundKey">
            <summary>
            Identifies the brush for background of the row when the row is highlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.SelectedForegroundKey">
            <summary>
            Identifies the brush used for foreground of selected row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HighlightForegroundKey">
            <summary>
            Identifies the brush used for foreground of highlighted row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.SelectedInactiveForegroundKey">
            <summary>
            Identifies the brush used for background of selected but inactive row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.SelectedInactiveBackgroundKey">
            <summary>
            Identifies the brush used for background of selected but inactive row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.SelectedInactiveHeaderBackgroundKey">
            <summary>
            Identifies the brush used for background of selected but inactive row header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.SelectedInactiveHeaderBorderBrushKey">
            <summary>
            Identifies the brush used for border of selected but inactive row header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.IsDetailsSectionOpenChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for IsDetailsSectionOpenChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.DetailsTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for DetailsTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.DetailsToggleButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for DetailsToggleButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderContent.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderContentTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.HeaderPaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderPadding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.IsDetailsSectionOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDetailsSectionOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRow.LockHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for LockHeight.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridRow.CreateDetailsRootLineAdorner">
            <summary>
            Virtual method called to obtain a IRootLineAdorner for rendering the root lines which
            are attached to the root of this node.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.RootLineAdorner">
            <summary>
            Gets the adorner which is responsible for drawing the Root Lines that connect the row's expander button to its details section.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvGridRow.IsDetailsSectionOpenChanged">
            <summary>
            Routed event raised when the value of IsDetailsSectionOpen changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.DetailsTemplate">
            <summary>
            Get or set a DataTemplate which defines how to display the details section. By default, this value is inherited from
            the parent grid's RowDetailsTemplate.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.HeaderBackground">
            <summary>
            Get or Set the brush used to paint the background of the row's header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.Header">
            <summary>
            Get or Set the content displayed by the row's Header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.HeaderTemplate">
            <summary>
            Shows how to display the row's Header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.IsDetailsSectionOpen">
            <summary>
            Gets or sets whether the details section is open.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.RowNumber">
            <summary>
            Gets the row number. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRow.LockHeight">
            <summary>
            Get or set whether the user can resize row height. By default this value is inherited 
            from parent grid's LockRowHeight property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvGridRowHeader">
            <summary>
            Control for displaying the header of the grid row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvGridRowHeader.IsHighlightedProperty">
            <Summary>
            Backing store for IsHighlighted.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridRowHeader.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the right mouse button was released.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridRowHeader.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridRowHeader.IsHighlighted">
            <summary>
            Gets or sets whether the header is highlighted.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvGridPanel">
            <summary>
            This is the Panel used for displaying rows in AdvGrid.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControlPanel.OnInitialized(System.EventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControlPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to arrange items.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControlPanel.ShouldArrangeUsingHorizontalOffset">
            <summary>
            Return true if the rows should be arranged with offset to account for
            the HorizontalOffset of parent table's ScrollViewer. Default will return true
            unless there are left pinned columns defined for the table.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTabularControlPanel.UpdateHorizontalScrollData(System.Boolean)">
            <summary>
            Responsible for setting ExtentWidth and ViewportWidth when there are columns.
            Essentially, ExtentWidth is the sum of all columns which are not pinned. ViewportWidth
            is equal to availableWidth minus the width of any pinned columns. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridPanel.ShouldArrangeUsingHorizontalOffset">
            <summary>
            Determines whether horizontal offset should be used when positioning rows
            in the arrange override method. Returns false if row headers are being shown, otherwise, calls base class.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RowDetailsRootLineAdorner">
            <summary>
            Default Root Line adorner for AdvTreeNode.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IRootLineAdorner">
            <summary>
            Interface for adorners which can be used to draw the Root Lines of an AdvTreeNode.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RowDetailsRootLineAdorner.#ctor(DevComponents.WPF.Controls.AdvGridRow)">
            <summary>
            Construct with the node being adorned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RowDetailsRootLineAdorner.CreatePen">
            <summary>
            Called to create the brushes. Sets values to HorizontalBrush and VerticalBrush.
            Default implementation is to call FindResources using compontent resource keys AdvTreeNode.HorizontalRootLinePenKey
            and AdvTreeNode.VerticalRootLinePenKey.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RowDetailsRootLineAdorner.Attach">
            <summary>
            Attaches the adorner to the adorner layer and sets up any necessary event handlers.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RowDetailsRootLineAdorner.Detatch">
            <summary>
            Detatches the adorner from the adorner layer and cleans up all event handlers.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RowDetailsRootLineAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Overriding to perform custom layout.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNodeItemContainerManager.ContainerFromItem(System.Object,System.Boolean)">
            <summary>
            Search the host node's tree if the item is not in the collection represented by this manager.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNodeItemContainerManager.ExistingDescendentNodes">
            <summary>
            Get all descendent nodes which currently exist.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNodeItemContainerManager.AllContainersTemporary">
            <summary>
            Gets all containers, creating temporary nodes for containers which are not released.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeItemContainerManager">
            <summary>
            An ItemContainerManager specifically designed for AdvTree, providing services related to 
            virtualizing a hierarchical structure. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.#ctor(DevComponents.WPF.Controls.AdvTree)">
            <summary>
            Construct with the owning AdvTree.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.ContainerFromItem(System.Object,System.Boolean)">
            <summary>
            Will search tree for item it it doesn't exist at top level.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.ItemFromContainer(System.Windows.FrameworkElement)">
            <summary>
            Returns the Item property of the container cast to AdvTreeNode.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.ContainerFromItem(System.Object,System.Boolean,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Returns a temporary node instead of fully connecting if target is virtualized and create == true.
            If ensureConnected == true, the temporary node will be fully connected before returning. 
            Collapsed nodes are searched if searchCollapsed is true. If searchCollapsed is null, search is performed
            first without searching collapsed, then if not found, performed again with searchCollapsed = true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.GetFlattenedIndexOf(DevComponents.WPF.Controls.AdvTreeNode)">
            <summary>
            Assumes that all ancestor nodes of the node are expanded. Will return a faulty value if that is not true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.GetFullExtent(DevComponents.WPF.Controls.AdvTreeNode)">
            <summary>
            Gets the LOGICAL extent of the node, or of the entire Tree if node is null. This value
            includes all expanded descendent nodes - i.e. is the flattenned extent.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.NotifyContainerVirtualizing(DevComponents.WPF.Controls.ItemContainerEventArgs)">
            <summary>
            Notification that a descendent node is virtualizing, even if it is not a direct child of this.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeItemContainerManager.NotifyItemsChanged(DevComponents.WPF.Controls.AdvTreeNode,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Needed to capture ItemsChanged events from descendend  
            nodes so entire Tree can be updated when the items of a node change.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeItemContainerManager.HierarchicalExtentMap">
            <summary>
            Basic challenge is maintaining current Extent height of tree when expanded nodes may be 
            virtualized. This class keeps a record of the items associated with nodes that are expanded.
            The Tree's total extent height is calculated from this data. It is also possible to calculate
            extent of an individual node. Note the use of GetHashCode() for unique identifiers of items.
            This will break down if items are value types. But using a value type for an item which has
            sub-items seems highly unlikely.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WeakKeyDictionary`2">
            <summary>
            A dictionary that stores its keys as weak references, along with the key's hash code as obtained from method object.GetHashCode. 
            If the key itself is GCd, then the hash code is used as identifier, so if an equalivalent key is be re-introduced into the application,
            the dictionary entry will be valid.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WeakKeyDictionary`2.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <summary>
            Expecting either x or y to be a WeakKey.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RootLineAdorner">
            <summary>
            Default Root Line adorner for AdvTreeNode.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RootLineAdorner.#ctor(DevComponents.WPF.Controls.AdvTreeNode)">
            <summary>
            Construct with the node being adorned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RootLineAdorner.Attach">
            <summary>
            Attaches the adorner to the adorner layer and sets up any necessary event handlers.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RootLineAdorner.Detatch">
            <summary>
            Detatches the adorner from the adorner layer and cleans up all event handlers.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RootLineAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Overriding to perform custom layout.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ComboBoxBehavior.ToggleIsCheckedOnClickButtonProperty">
            <summary>
            This behavior is used by the customized visual style for ComboBox in AdvToolBar (AdvToolBar.generic.xaml)
            as well as the in our standard stylized combo box defined in SelectorResources.xaml. The purpose of this
            behavior is to coordinate the highlighting of the combo box and toggle button when ComboBox.IsEditable is true,
            or, in the case of combo box inside of ToolBar, allways...
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ControlBehavior">
            <summary>
            Static class which exports Behaviors common to all Controls.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ControlBehavior.TemplatedParentProperty">
            <summary>
            DependencyProperty which should be set to the value of TemplatedParent. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ControlBehavior.CornerRadiusProperty">
            <summary>
            Using an Attatched DependencyProperty as the backing store for CornerRadius.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ControlBehavior.GetCornerRadius(System.Windows.DependencyObject)">
            <summary>
            Gets the value of attached property CornerRadius.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ControlBehavior.SetCornerRadius(System.Windows.DependencyObject,System.Windows.CornerRadius)">
            <summary>
            Sets the value of attached property CornerRadius.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ControlBehavior.SetFocusOnLoadProperty">
            <summary>
            Using a DependencyProperty as the backing store for SetFocusOnLoad.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ControlBehavior.ImageSourceProperty">
            <Summary>
            Backing store for ImageSource.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ControlBehavior.GetImageSource(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ControlBehavior.SetImageSource(System.Windows.DependencyObject,System.Windows.Media.ImageSource)">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CircularClipBehavior">
            <summary>
            Defines Attached Dependency Properties that implement behaviors for setting up circular clip region on an element.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularClipBehavior.OuterClipThicknessProperty">
            <Summary>
            Backing store for OuterClipThickness.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CircularClipBehavior.GetOuterClipThickness(System.Windows.DependencyObject)">
            <summary>
            Get the depth of the circular clip.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CircularClipBehavior.SetOuterClipThickness(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the depth of the circular clip.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularClipBehavior.InnerClipDiameterProperty">
            <Summary>
            Backing store for InnerClipDiameter.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CircularClipBehavior.GetInnerClipDiameter(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CircularClipBehavior.SetInnerClipDiameter(System.Windows.DependencyObject,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupBehavior.CloseOnEnterKeyProperty">
            <summary>
            Backing dependency property for a behavior whereby when a popup is open and its child recieves a 
            KeyDown event where Key is the Enter key the popup will be closed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetCloseOnEnterKey(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Gets the value of the CloseOnEnterKey attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetCloseOnEnterKey(System.Windows.Controls.Primitives.Popup,System.Boolean)">
            <summary>
            Sets the value of the CloseOnEnterKey attached dependency property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupBehavior.CloseOnEscapeKeyProperty">
            <summary>
            Backing dependency property for a behavior whereby when a popup is open and its child recieves a 
            KeyDown event where Key is the Escape key the popup will be closed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetCloseOnEscapeKey(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Gets the value of the CloseOnEscapeKey attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetCloseOnEscapeKey(System.Windows.Controls.Primitives.Popup,System.Boolean)">
            <summary>
            Sets the value of the CloseOnEscapeKey attached dependency property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupBehavior.SuppressCloseOnClickForProperty">
            <Summary>
            Backing dependency property for a behavior where, when set on a button or other clickable item that is a child of a Popup, and that
            Popup has the CloseOnInternalClick behavior set, the Popup will NOT close when the indicated object is clicked.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetSuppressCloseOnClickFor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the SuppressCloseOnClickFor attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetSuppressCloseOnClickFor(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the SuppressCloseOnClickFor attached dependency property.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DevComponents.WPF.Controls.PopupBehavior.CloseOnInternalClickProperty" -->
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetCloseOnInternalClick(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Gets the value of the CloseOnInternalClick attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetCloseOnInternalClick(System.Windows.Controls.Primitives.Popup,System.Boolean)">
            <summary>
            Sets the value of the CloseOnInternalClick attached dependency property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupBehavior.ToggleButtonProperty">
            <summary>
            Backing attached dependency property for a behavior which causes the popup to be opened and closed 
            in conjunction with a toggle button's IsChecked property. This behavior fixes certain issues that arises 
            when using a ToggleButton to open a Popup. For example, when the toggle button's ClickMode is Press and the 
            popup's StaysOpen is false, the popup does not recieve notification of a mouse down outside its bounds and fails
            to close, because the toggle button captures the mouse and still has mouse capture when the popup opens. 
            Another example is when the button's ClickMode is Release and the popup's StaysOpen is false, the popup noramlly closes 
            when the button recieves mouse down, whereas it should wait for the mouse up.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetToggleButton(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Gets the value of the ToggleButton attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetToggleButton(System.Windows.Controls.Primitives.Popup,System.Windows.UIElement)">
            <summary>
            Sets the value of the ToggleButton attached dependency property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupBehavior.WaitForMouseUpToCloseProperty">
            <Summary>
            Backing attached dependency property for a behavior which makes it so the Popup waits for the mouse to be released
            before closing when its value for StaysOpen is false.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetWaitForMouseUpToClose(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Gets the value of the WaitForMouseUpToClose attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetWaitForMouseUpToClose(System.Windows.Controls.Primitives.Popup,System.Boolean)">
            <summary>
            Sets the value of the WaitForMouseUpToClose attached dependency property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupBehavior.DontSetFocusOnOpenedProperty">
            <summary>
            Using a DependencyProperty as the backing store for DontSetFocusOnOpened.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.GetDontSetFocusOnOpened(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the DontSetFocusOnOpened property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupBehavior.SetDontSetFocusOnOpened(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the DontSetFocusOnOpened property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ScrollViewerBehavior">
            <summary>
            Static class which exports attached dependency properties that function as behaviors.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ScrollViewerBehavior.HorizontalOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalOffset.
            This behavior causes a scroll viewer to scroll to the specified horizontal offset.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.GetHorizontalOffset(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets the value of ScrollViewer.HorizontalOffset attached DP.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.SetHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Sets the value of ScrollViewer.HorizontalOffset attached DP.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ScrollViewerBehavior.VerticalOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalOffset.
            Implements a behavior which, when the value is set, the scroll viewer is scrolled to the specified vertical offset.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.GetVerticalOffset(System.Windows.DependencyObject)">
            <summary>
            Gets the value of ScrollViewer.VerticalOffset attached DP.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.SetVerticalOffset(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of ScrollViewer.VerticalOffset attached DP.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ScrollViewerBehavior.FadeDurationProperty">
            <Summary>
            Backing store for FadeDuration. Defines the duration of the fade animation when FadeOutPeriod is set.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.GetFadeDuration(System.Windows.DependencyObject)">
            <summary>
            Gets the duration of the fade animation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.SetFadeDuration(System.Windows.DependencyObject,System.Windows.Duration)">
            <summary>
            Sets the duration of the fade animation.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ScrollViewerBehavior.FadeOutPeriodProperty">
            <summary>
            Using a DependencyProperty as the backing store for FadeOutPeriod.
            Implements a behavior by which the scroll bars of a ScrollViewer are made to 
            fade out when mouse movement ceases and fade into view when mouse movement is detected
            inside the bounds of the scroll viewer.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.GetFadeOutPeriod(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets the value for FadOutPeriod.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ScrollViewerBehavior.SetFadeOutPeriod(System.Windows.Controls.ScrollViewer,System.Windows.Duration)">
            <summary>
            Sets the value for FadeOutPeriod.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ScrollViewerBehavior.HorizontalScrollWheelProperty">
            <summary>
            Implements a behavior which causes the scroll viewer to scroll horizontally when it recieves a mouse wheel event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ScrollViewerBehavior.IsVerticalScrollChainingEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScrollWheelPassThrough.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IWeakElementHelper`1">
            <summary>
            This interface is used in conjunction with the WeakElementHelperList.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SliderBehavior.IsMoveToPointEnabledProperty">
            <summary>
            A behavior which does the same thing as Slider.IsMoveToPointEnabled except that when the slider value is moved to the mouse position,
            the slider can be moved without first releasing the mouse button.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SliderBehavior.GetIsMoveToPointEnabled(System.Windows.Controls.Slider)">
            <summary>
            Gets the value of IsMoveToPointEnabled on the slider.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SliderBehavior.SetIsMoveToPointEnabled(System.Windows.Controls.Slider,System.Boolean)">
            <summary>
            Sets the value of IsMoveToPointEnabled on the slider, setting up the behavior.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ToggleButtonBehavior">
            <summary>
            Exports Behaviors related to ToggleButton.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleButtonBehavior.InterceptClickProperty">
            <summary>
            This attached dependency property implements a Behavior by which the PreviewMouseLeftButtonDown event of 
            a toggle button is used to toggle the button's IsChecked property. The event's Handled property is set to true.
            This behavior is useful as a workaround for certain situations involving the standard ToolBar. For example,
            when a ToggleButton is used in the template of a ComboBox and that ComboBox is placed inside a ToolBar, the ToolBar
            does something with the mouse down event that ends up causing the ComboBox to fail to open.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleButtonBehavior.GetInterceptClick(System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Get method for InterceptClip attached dependency property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleButtonBehavior.SetInterceptClick(System.Windows.Controls.Primitives.ToggleButton,System.Boolean)">
            <summary>
            Set method for InterceptClip attached dependency property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WeakElementHelperList`1">
            <summary>
            Intended for use by Behaviors, specifically for when an event handler needs to be 
            added to an element and that element might be short lived. In this situation we don't want
            to add static event handlers directly in the static handlers for the behavior. Instead, create a helper class
            for the element which defines the needed event handlers. The helper class can have a reference to the element and 
            it is ok because the only reference to the helper class is a weak reference created by this class, the WeakElementHelperList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DevComponents.WPF.Controls.ChromelessWindowBehavior.IsFullScreenProperty">
            <Summary>
            Backing store for IsFullScreen. Implements a behavior for making the window full screen.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ChromelessWindowBehavior.GetIsFullScreen(System.Windows.DependencyObject)">
            <summary>
            Gets whether the window is in full screen mode.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ChromelessWindowBehavior.SetIsFullScreen(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the window is in full screen mode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ChromelessWindowBehavior.HasDropShadowProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasDropShadow.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ChromelessWindowBehavior.HidesTaskbarWhenMaximizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for HidesTaskBarWhenMaximized.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowBehavior.InitialMinSizeProperty">
            <Summary>
            Backing store for InitialMinHSize.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WindowBehavior.GetInitialMinSize(System.Windows.DependencyObject)">
            <summary>
            Gets the initial min width and height for a window.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WindowBehavior.SetInitialMinSize(System.Windows.DependencyObject,System.Windows.Size)">
            <summary>
            Sets the initial min width and height for a window.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ImpliedItemContainerHelper">
            <summary>
            Sometimes what's needed, especially in an MVVM environment, is for the root element of a data template
            to itself be the container for an item.  
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PreviewTextChangeHandler">
            <summary>
            Abstract definition of an object to be used by AdvTextBox for previewing and possibly modifying text changes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PreviewTextChangeHandler.CultureProperty">
            <Summary>
            Backing store for Culture.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PreviewTextChangeHandler.RejectionMessageProperty">
            <Summary>
            Backing store for RejectionMessage.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeHandler.PreviewTextSet(System.String)">
            <summary>
            Virtual method called prior to the Text property being set. This method is not called if either PreviewTextInput or PreviewKeyPress 
            were called first. Base class implementation returns a response with Action = Default.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeHandler.PreviewTextInput(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Virtual method called by AdvTextBox immediately following the raising of the PreviewTextInput event.
            Base class implementation returns a response with Action = Default.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeHandler.PreviewKeyPress(System.Windows.Input.Key,System.String,System.Int32,System.Int32)">
            <summary>
            Virtual method called by AdvTextBox immediately following the raising of the PreviewKeyPress event.
            Base class returns a response with Action = Default.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeHandler.Refresh(System.String,System.Int32,System.Int32)">
            <summary>
            Virtual method called by the AdvTextBox from a handler for the Changed event of this class. 
            Override this method if a change in a property value of the current PreviewTextChangeHandler
             should cause the displayed text to change.
            Base class implementation returns a response with Action = Default.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeHandler.CreateInstanceCore">
            <summary>
            Overiding of abstract method of the Freezable class. Will throw NotImplementedException if called
            and implementor has not provided own implementation.
            </summary>
            <returns>A newly created instance of self.</returns>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeHandler.Culture">
            <summary>
            Gets or sets the CultureInfo. Default value is CultureInfo.CurrentCulture.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeHandler.RejectionMessage">
            <summary>
            Message displayed when input is rejected. This value is set as Content of a ContentPresenter that is used to display the message.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AutoCompleteTextChangeHandler.AutoCompleteListProperty">
            <Summary>
            Backing store for AutoCompleteList.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AutoCompleteTextChangeHandler.AutoCompleteOptionProperty">
            <Summary>
            Backing store for AutoCompleteOptions.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AutoCompleteTextChangeHandler.PreviewKeyPress(System.Windows.Input.Key,System.String,System.Int32,System.Int32)">
            <summary>
            Virtual method called by AdvTextBox immediately following the raising of the PreviewKeyPress event.
            Base class returns a response with Action = Default.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AutoCompleteTextChangeHandler.Refresh(System.String,System.Int32,System.Int32)">
            <summary>
            Virtual method called by the AdvTextBox from a handler for the Changed event. 
            Override this method if a change in a property value should cause the displayed text to change.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AutoCompleteTextChangeHandler.AutoCompleteList">
            <summary>
            Gets or sets a list of possible strings to use for auto complete. If set and AutoCompleteOptions is Off, AutoCompleteOptions will
            be set automatically to ReadOnly.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AutoCompleteTextChangeHandler.AutoCompleteOption">
            <summary>
            Gets or sets a value which determines whether and what type of auto complete is enabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControlBlender.CanvasToolTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanvasToolTip.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControlBlender.SliderToolTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for SliderToolTip.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TransitionAnimationProvider">
            <summary>
            Abstract base class for providers of animations used for transitioning elements into and out of view.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitionAnimationProvider.DurationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Duration.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitionAnimationProvider.EnterDelayProperty">
            <Summary>
            Backing store for EnterDelay.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitionAnimationProvider.OneWayProperty">
            <summary>
            Using a DependencyProperty as the backing store for OneWay.  
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitionAnimationProvider.SideProperty">
            <summary>
            Using a DependencyProperty as the backing store for Side.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimationProvider.Initialize">
            <summary>
            Used to perform pre-animation setup.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimationProvider.PrepareEnteringViewStoryboard(System.Windows.UIElement,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Inheritors should prepare a storyboard to be used for animating the target into view.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimationProvider.PrepareLeavingViewStoryboard(System.Windows.UIElement,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Inheritors should prepare a storyboard to be used for animating the target out of view.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimationProvider.AnimateEnteringView(System.Windows.UIElement,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Starts the Entering view animation.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitionAnimationProvider.EnterDelay">
            <summary>
            Get or set a delay from when the exit animation begins to when the enter animation begins. The default is no delay.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitionAnimationProvider.OneWay">
            <summary>
            When true, outgoing animation moves the toward side opposite the side specificed by property Side. Otherwise the outgoing animation
            moves back to the specified Side. Default is false. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitionAnimationProvider.Side">
            <summary>
            Get or Set the side from which the entering animation originates and to which the leaving animation it exits.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitionAnimationProvider.Container">
            <summary>
            Gets or Sets the element which contains the animated elements. The animation takes place within the bounds of this element.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomAnimator.EnteringStoryboardProperty">
            <summary>
            Using a DependencyProperty as the backing store for EnteringStoryboard.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomAnimator.ExitingStoryboardProperty">
            <summary>
            Using a DependencyProperty as the backing store for ExitingStoryboard.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomAnimator.TransformProperty">
            <summary>
            Using a DependencyProperty as the backing store for Transform.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CSVStringToArrayTypeConverter`1">
            <summary>
            Converts a string of comma separated values into an array of type T.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DefaultContentTemplateSelector">
            <summary>
            A DataTemplateSelector which can be used to provide a default data template for ContentControl 
            or ContentPresenter which is different than the one provided by default... Will not replace
            implicitly defined data templates.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DefaultContentTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Overriding to select template.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DefaultContentTemplateSelector.DefaultTemplate">
            <summary>
            Specifies the DataTemplate to use when no implicitly defined data template has been defined.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EditorSettingsFactory">
            <summary>
            Factory class for obtaining default Editor for a givin property type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorSettingsFactory.GetSettings(System.Type)">
            <summary>
            Gets the default EditorSettings class instance for the givin property type.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EditorSettings">
            <summary>
            Provides a set of parameters utilized by ContentEditingControl. Meant to be a convienent way to set options
            on editor without requiring access to the editor itself or its style. Inherits from Attribute so editor settings can be 
            associated with a property by decorating the property with the attribute.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorSettings.GetEditorStyle(System.Windows.FrameworkElement)">
            <summary>
            Gets the effective Style for the editor. Uses the element to look for Style with resource Key = to the EditorStyleResourceKey value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.AcceptsReturn">
            <summary>
            Deterimines whether text box based editor can accept return key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.AlwaysShowTextBox">
            <summary>
            Determines whether the in line text box should be shown (in read-only mode) even though IsInCellEditingEnabled = false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.AutoComplete">
            <summary>
            Determines whether editor's text box will support auto complete.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.AutoCompleteList">
            <summary>
            If autocomplete is enabled, provides a list of possible values.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.CommitOnContentChanged">
            <summary>
            Determines whether the editing control commits changes to the binding source the moment they are made by the user.
            (If false, then generally changes are committed when the editor loses focus.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.DisplayMemberPath">
            <summary>
            A string that defines the property path relative to the data being edited which is to be used for display of the data value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.DisplayString">
            <summary>
            A string which is used for display of data value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.EditorStyle">
            <summary>
            Provides a way to set the Style applied to the Editor directly.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.EditorStyleResourceKey">
            <summary>
            Specify the resoure key of a Style resource to apply to the editor. If this value is not set directly,
            a default value may be returned from the getter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.IsButtonHighlightedOnMouseOver">
            <summary>
            If the editor uses a button (for example, to open a drop down) this property determines whether the 
            button is highlighted or made visible when the mouse is over the editing control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.IsInCellEditingEnabled">
            <summary>
            Specifies whether the user can edit the value directly, in a text box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.Mask">
            <summary>
            A string which defines a mask that is used by text box based editors.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.NewItemPlaceholderValue">
            <summary>
            A value which is substituted for actual data value when the editor is in a cell of a new item placeholder row of an AdvGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.NullValueDisplayString">
            <summary>
            Specifies a string to display when the value of the data being edited is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.PropertyType">
            <summary>
            Get or set the Type of the data being edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.RequireValue">
            <summary>
            If set, a HasValueValidationRule in default configuration is added to the ValidationRules list.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.StringFormat">
            <summary>
            A string which defines formatting for the value being edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.TextWrapping">
            <summary>
            Specifies whether the in-line TextBox wrapps text.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.ToStringValueConverter">
            <summary>
            Specifies a value converter which is used to convert editor's content to a string and back.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.TypeConverter">
            <summary>
            Get or set a custom TypeConverter. Must convert to and from String.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.ValidationRules">
            <summary>
            Get or set a list of validation rules which are validated against the editor's current value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorSettings.DefaultEditorStyleResourceKey">
            <summary>
            Inheritors may return the default resource key for the editor's Style.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorSettings.Type">
            <summary>
            Get or Set the editor type, which can be either InLineCheckBox or DropDown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorSettings.DisplayNameTrue">
            <summary>
            Get or Set the display name for value of True. The default is "True".
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorSettings.DisplayNameFalse">
            <summary>
            Get or set the display name for value of False. The default is "False".
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorSettings.IsNullable">
            <summary>
            Returns True if PropertyType is a Nullable.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanEditorSettings.BooleanPropertyToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to a string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanEditorSettings.BooleanPropertyToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from string back to boolean.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorSettings.#ctor(System.String[])">
            <summary>
            Construct with list of custom display names.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorSettings.#ctor(DevComponents.WPF.Controls.EnumEditorSettings.EditorType,System.String[])">
            <summary>
            Construct with value for EnableInCellEditing, Type and array of custom display names.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorSettings.DisplayNames">
            <summary>
            Get a list of names for the enum values. (Note: this is not generic because generics do not play nice with Xaml.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorSettings.IgnoredValues">
            <summary>
            Define values of the enum which are not included.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EnumEditorSettings.EditorType">
            <summary>
            Identifies the possible types of enum editor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumEditorSettings.EditorType.DropDown">
            <summary>
            The value is selected from a drop down.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumEditorSettings.EditorType.InLine">
            <summary>
            The values are presented directly in the cell.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorSettings.EnumEditorDescriptorValaueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to a string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorSettings.EnumEditorDescriptorValaueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts string back to enum value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.EnforceMinMax">
            <summary>
            Adds a rule to the validation rules collection for checking that value is within range of MinValue and MaxValue.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.RepeatDelay">
            <summary>
            Specifies the amount of delay in milliseconds from when the spinner is first pressed to when auto increment begins.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.RepeatInterval">
            <summary>
            Specifies the amount interval in milliseconds between increments of the spinner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.MinValue">
            <summary>
            Specifies a minimum value. Defalaut is Double.MinValue.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.MaxValue">
            <summary>
            Specifies a maximum value. Default is Double.MaxValue.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.Precision">
            <summary>
            Specifies the precision for the output of floating point numbers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorSettings.Increment">
            <summary>
            Specifies the amount of step between increments of the spinner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DateEditorSettings.MinimumDate">
            <summary>
            Get or set the minimum date allowed. Typed as an object to allow setting the value as a string, which is then parsed to create a DateTime.
            "Today" is a valid value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DateEditorSettings.MaximumDate">
            <summary>
            Get or set the maximum date allowed. Typed as an object to allow setting the value as a string, which is then parsed to create a DateTime.
            "Today" is a valid value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorSettings.Type">
            <summary>
            Specifies whether the possible values are presented in-line or via a drop-down.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorSettings.ItemTemplate">
            <summary>
            Specifies a data template which shows how to render the possible values.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorSettings.SelectedValuePath">
            <summary>
            Specify the path to the selected value, relative to the selected item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorSettings.PossibleValues">
            <summary>
            Get or set the list of possible values.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorSettings.PossibleValuesBinding">
            <summary>
            Get or set a Binding which resolves to a list of the possible values. The binding target will be the editing control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorSettings.DefaultEditorStyleResourceKey">
            <summary>
            Returns the component resource key EditingContentControl.DefaultSelectorEditorStyleKey.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectorEditorSettings.EditorType">
            <summary>
            Defines the editor types, either DropDown or InLine.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditorSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditorSettings.#ctor(System.Type[])">
            <summary>
            Construct with array of NewItemTypes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.NewItemTypes">
            <summary>
            Provide an optional array of Types which are presented to user as possible new items.
            Note: not generic to accommodate Xaml.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.EditorType">
            <summary>
            Determines whether the collection editor uses DataForm, PropertyGrid or neither (it is an InLine editor) to edit item property values.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.NewItemProvider">
            <summary>
            Provides a new item with default settings. Optional.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.NewItemProviderType">
            <summary>
            Specifies the type of the NewItemProvider, if desired.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.ShowPropertyGridReadOnlyProperties">
            <summary>
            Determines whether the collection editor's property grid shows read-only properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.ShowPropertyGridSubProperties">
            <summary>
            Determines whether the collection editor's property grid should show sub properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.ShowPropertyGridHelpPanel">
            <summary>
            Determines whether the collection editor's property grid should show the help panel.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.ShowPropertyGridSearchBox">
            <summary>
            Determines whether the collection editor's property grid should show the search box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.IsCollectionEditorReadOnly">
            <summary>
            Determines whether the collection editor is in read-only mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.PropertyGridPropertyDefinitions">
            <summary>
            Get or set a list of custom property definitions for the collection editor's embedded PropertyGrid, when EditorType=PropertyGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorSettings.DataFormFieldDescriptors">
            <summary>
            Get or set a list of custom field descriptors for the collection editor's embedded DataForm, when EditorType=DataForm.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings">
            <summary>
            Default editor descriptor for collections of primitive types and strings.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.Text">
            <summary>
            A custom string which is displayed in the cell if EnableInCellEditing is false or when the list is empty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.TrimWhiteSpace">
            <summary>
            Determines whether white space and empty strings are trimmed from the result set. Default is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.InitialWidth">
            <summary>
            Initial width of the drop down.  Default value is NaN (auto)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.InitialHeight">
            <summary>
            Initial height of the drop down. Default value is 90.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.PrimitivesListValueConverter">
            <summary>
            Implementation of TypeConverter for converting back and forth between string and List of string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.PrimitivesListValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the value (an IList) to a string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorSettings.PrimitivesListValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert string to list.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.HitTestHelper`1">
            <summary>
            Implements a helper class for method VisualTreeHelper.HitTest.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HitTestHelper`1.FindAll(System.Windows.Media.Visual,System.Windows.Point,System.Predicate{`0})">
            <summary>
            Finds all elements of type T which are at the givin position within 
            the reference element's viaul tree.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HitTestHelper`1.FindAll(System.Windows.Media.Visual,System.Windows.Media.Geometry,System.Predicate{`0})">
            <summary>
            Finds all elements of type T which are at the givin hit geometry within 
            the reference element's viaul tree.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HitTestHelper`1.FindOne(System.Windows.Media.Visual,System.Windows.Point,System.Predicate{`0})">
            <summary>
            Returns the first element found.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HitTestHelper`1.FindOne(System.Windows.Media.Visual,System.Windows.Media.Geometry,System.Predicate{`0})">
            <summary>
            Returns the first element found.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CoerceTextInfo">
            <summary>
            Specifies the desired value of the Text property of an AdvTextBox in response to a text change event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CoerceTextInfo.Text">
            <summary>
            Desired value for Text property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CoerceTextInfo.SelectionLength">
            <summary>
            If the nullable has a value, then it specifies a desired value for TextBox's SelectionLength property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CoerceTextInfo.CaretIndex">
            <summary>
            If the nullable has a value, then it specifies a desired value for TextBox's CaretIndex property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PreviewTextChangeAction">
            <summary>
            Used by PreviewTextChangeHandler in return value from method PreviewTextChange to indicate to the calling AdvTextBox what to do with a proposed text change.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PreviewTextChangeAction.Default">
            <summary>
            Allow the text box to process the text change event normally.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PreviewTextChangeAction.Reject">
            <summary>
            The text box should ignore the text change event. No changes should be made.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PreviewTextChangeAction.Coerce">
            <summary>
            The text box should coerce the text based on CoerceTextInfo.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PreviewTextChangeResponse">
            <summary>
            Return type of method PreviewTextChangeHandler.PreviewTextChange. Properties are used to inform the calling AdvTextBox how to coerce  
            the proposed text change, if at all.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeResponse.#ctor(DevComponents.WPF.Controls.PreviewTextChangeAction)">
            <summary>
            Constructs a new instance with an initializer for the Action property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PreviewTextChangeResponse.#ctor(DevComponents.WPF.Controls.PreviewTextChangeAction,DevComponents.WPF.Controls.CoerceTextInfo)">
            <summary>
            Constructs a new instance with initializes for properties Action and CoerceTextInfo.
            </summary>
            <param name="action"></param>
            <param name="coerceTextTextInfo"></param>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeResponse.Default">
            <summary>
            Gets an instance of PreviewTextChangeResponse whith its Action property set to PreviewTextChangeAction.Default.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeResponse.Action">
            <summary>
            Gets or sets a PreviewTextChangeAction instance which specifies whether the proposed text change should be accepted without modification (Default)
            should be rejected, or should be coerced. If coerced, details are to be provided via CoerceTextInfo.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeResponse.CoerceTextInfo">
            <summary>
            Specifies exactly how to coerce proposed text change when Action is Coerce.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeResponse.Message">
            <summary>
            Message to be displayed. Overrides PreviewTextChangeHandler.RejectionMessage if set.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PreviewTextChangeResponse.ShowMessage">
            <summary>
            Must be true for message to be displayed. Default value is true.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidatingTextChangeHandler.InvalidCharactersProperty">
            <Summary>
            Backing store for InvalidCharacters.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidatingTextChangeHandler.InvalidStringsProperty">
            <Summary>
            Backing store for InvalidStrings.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidatingTextChangeHandler.ValidNumberStylesProperty">
            <Summary>
            Backing store for ValidNumberStyles.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidatingTextChangeHandler.RejectNonNumericCharactersProperty">
            <Summary>
            Backing store for RejectNonNumericCharacters.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidatingTextChangeHandler.ValidCharactersProperty">
            <Summary>
            Backing store for ValidCharacters.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ValidatingTextChangeHandler.PreviewTextInput(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Virtual method called by AdvTextBox immediately following the raising of the PreviewTextInput event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ValidatingTextChangeHandler.InvalidCharacters">
            <summary>
            Gets or sets a set of invalid input characters.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ValidatingTextChangeHandler.InvalidStrings">
            <summary>
            Gets or sets a set of invalid strings.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ValidatingTextChangeHandler.ValidNumberStyles">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ValidatingTextChangeHandler.RejectNonNumericCharacters">
            <summary>
            Gets or sets whether input should be restricted to values which can be parsed into a number. Parsing rules are defined by ValidNumberStyles property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ValidatingTextChangeHandler.ValidCharacters">
            <summary>
            Gets or sets a set of acceptable input characters.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ItemsCollection.InitializingNewItemEvent">
            <summary>
            Attached routed event raised on owning element when a new item is being initialized but has not yet been added to the collection.
            Handle the event to prevent the new item from being added.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ItemsCollection.NewItemAddedEvent">
            <summary>
            Attached routed event raised on the owning element after a new item has been added to the collection via a call to AddNew() or AddNewItem(...).
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsCollection.AddNewItem">
            <summary>
            If CanAddNewItem is true, and if the Type of the collection can be determined (the collection is not empty) and the collection Type
            has a parameterless constructor, then that constuctor is used to create a new instance. After the new instance is created, the InitializingNewItem routed event
            is raised on the host control for this collection. If CanAddNewItem is false but CanAddNew is true, then AddNew is called.
            Note: Just like the AddNew() and AddNewItem(object) methods, after this method is successfully called the transaction needs to be completed 
            by calling CommitNew() or can be canceled by calling CancelNew.
            </summary>
            <returns>Returns the new item, or null if no item was added.</returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsCollection.SetEffectiveSortDescriptions(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Setup a collection of sort descriptions which is used for sorting the CollectionView. 
            Changes to this collection are reflected in the collection view. Note that when accessing property
            SortDescriptions, the collection set here is not returned. This collection will be unchanged if changes
            are made to the sort descriptions which are directly owned by the underlying CollectionView. If this happens,
            the collection view sort will be divergent from the sort descriptions set here.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MaskedTextChangeHandler">
            <summary>
            Implementation of PreviewTextChangeHandler which provides support for Masked text in AdvTextBox.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.MaskedTextChangeHandler.AllowPromptAsInputProperty">
            <Summary>
            Backing store for AllowPromptAsInput.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.MaskedTextChangeHandler.MaskProperty">
            <Summary>
            Backing store for Mask.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.MaskedTextChangeHandler.PromptCharProperty">
            <Summary>
            Backing store for PromptChar.
            </Summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MaskedTextChangeHandler.MaskProvider">
            <summary>
            Get or set the underlying System.ComponentModel.MaskedTextProvider. The getter uses lazy initialization if needed to return non-null value.
            The setter assigns values to Mask, AllowPromptAsInput and PromptChar based on the coresponding values of the MaskProvider.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MaskedTextChangeHandler.AllowPromptAsInput">
            <summary>
            Get or set whether the prompt character can be input.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MaskedTextChangeHandler.Mask">
            <summary>
            Gets or sets the mask.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MaskedTextChangeHandler.PromptChar">
            <summary>
            Gets or sets the prompt char.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WM">
            <summary>
            Window Messages (WM_*)
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SWP">
            <summary>
            SetWindowPos options
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.HT">
            <summary>
            Non-client hit test values, HT*
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WS">
            <summary>
            WindowStyle values, WS_*
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.GWL">
            <summary>
            GetWindowLongPtr values, GWL_*
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SW">
            <summary>
            ShowWindow options
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SC">
            <summary>
            SystemCommand options
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RowValidationError">
            <summary>
            A substitute for ValidationError which does not require a Binding.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SwingingDoor3DAnimator">
            <summary>
            Implementation of a 3D animation provider which simulates a swinging door.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TransitionAnimation3DProvider">
            <summary>
            Implementation of animation provider for three D surface. Uses a Rectangle3D as viewport for the 
            three D animation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimation3DProvider.GetEnteringViewStoryboard(DevComponents.WPF.Controls.Rectangle2D3D,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Inheritors should setup visual state and prepare storyboard to animate 
            the target Viewport2DVisual3D object, simulating the element entering the view.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimation3DProvider.GetLeavingViewStoryboard(DevComponents.WPF.Controls.Rectangle2D3D,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Inheritors should setup visual state and prepare storyboard to animate 
            the target Viewport2DVisual3D object, simulating the element leaving the view.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimation3DProvider.PrepareEnteringViewStoryboard(System.Windows.UIElement,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Implementation of abstract method. Sets ActiveStoryboard and returns value obtained by calling GetEnteringViewStoryboard(). 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitionAnimation3DProvider.PrepareLeavingViewStoryboard(System.Windows.UIElement,DevComponents.WPF.Controls.TransitionAnimationProvider.TransitionAnimationFlags)">
            <summary>
            Implementation of abstract method. Sets ActiveStoryboard and returns value obtained by calling PrepareLeavingViewStoryboard(). 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SwingingDoor3DAnimator.RotationAngleProperty">
            <summary>
            Using a DependencyProperty as the backing store for RotationAngle.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SwingingDoor3DAnimator.RotationAngle">
            <summary>
            Angle of rotation animation.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator">
            <summary>
            Implementation of a three D animation provider which simulates a swinging door fading into the background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator.RotationCenterProperty">
            <summary>
            Using a DependencyProperty as the backing store for RotationCenter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator.TranslationFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for TranslationFactor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator.CameraZProperty">
            <summary>
            Using a DependencyProperty as the backing store for CameraZ.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator.RotationCenter">
            <summary>
            Center of rotation animation
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator.TranslationFactor">
            <summary>
            Value by which the side of animating element is multiplied to obtain value from which translation is animated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SwingingDoorFading3DAnimator.CameraZ">
            <summary>
            Position on Z axis to which camera animates.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ValidationErrorAdorner">
            <summary>
            The main driver for this class is to provide a validation error adorner which is not
            clipped by the AdornerLayer which is always comes with the ScrollContentPresenter of ScrollViewer. 
            (There seems to be no way to remove that adorner layer, or to coerce the built-in validation adorner
            to use an adorner layer from higher in the visual tree, which would not cause the visual to be clipped.)
            The AdornerLayer used by this adorner is the last one found, rather than the first one found.
            Also, the ContentControl which is used as the visual for the adorner has it's Tag set equal to the adorned element,
            allowing for access to this element by the ControlTemplate set as value for Validation.ErrorTemplate on the adorned element.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ValidationErrorAdorner.RegisterClassErrorAdorner(System.Type)">
            <summary>
            Register a class type to watch for validation errors events.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ViewModelBase">
            <summary>
            Base class for all ViewModel classes in the application.
            It provides support for property change notifications 
            and clean up of resources such as event instanceHandlers. This class is abstract.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ViewModelBase.SetPropertyValue``1(``0,``0@,System.String)">
            <summary>
            Generic method to set a property value with equality 
            checking and raising the property changed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ViewModelBase.Dispose">
            <summary>
            Invoked when this object is being removed from the application
            and will be subject to garbage collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ViewModelBase.Dispose(System.Boolean)">
            <summary>
            Child classes can override this method to perform 
            clean-up logic, such as removing event instanceHandlers.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ViewModelBase.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.VirtualizingCollection">
            <summary>
            Implements a collection that enables data virtualization. To enable data virtualization in AdvGrid, for example, 
            set the grid's ItemsSouce property to an instance of VirtualizingCollection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VirtualizingCollection.#ctor(DevComponents.WPF.Controls.IItemsProvider,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="itemsProvider">A custom implementation of IItemsProvider that is used by the collection to obtain the items.</param>
            <param name="loadsAsychronously">If true, the collection's items as well as the Count property are obtained asychronously from the items provider.</param>
            <param name="pageSize">The number of items per page of data. This value is passed to the items provider's GetRange() method.</param>
            <param name="pageReleaseDelay">The number of milliseconds delay from when a page of data goes out of scope and when the page items are released.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.VirtualizingCollection.ReleaseItem(System.Object)">
            <summary>
            Releases the item from the collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VirtualizingCollection.Reset">
            <summary>
            Reloads the collection.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.VirtualizingCollection.PropertyChanged">
            <summary>
            Event raised when the value of a property changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.VirtualizingCollection.CollectionChanged">
            <summary>
            Event raised when the collection changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VirtualizingCollection.PageSize">
            <summary>
            Gets the page size. Read-only. Value is set via constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VirtualizingCollection.PageReleaseDelay">
            <summary>
            Gets the page release delay. Read-only. Set value via constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VirtualizingCollection.ItemsProvider">
            <summary>
            Gets a reference to the items provider.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VirtualizingCollection.IsInitializing">
            <summary>
            Returns true if the collection is initializing. If the collection was created without asynchronous loading enabled, this property will always be false.
            If asynchronous is enabled, then initialization is complete when the collection's Count is obtained from the items provider.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VirtualizingCollection.LoadsAsynchronously">
            <summary>
            Determines whether items and collection count are obtained asynchronously from the items provider.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VirtualizingCollection.AsynchronousLoadDelay">
            <summary>
            Milliseconds delay before asnychronously loading page items after a page item has been accessed and before the 
            ItemsProvider's GetRange method has been called. Useful for preventing unnecessary calls to GetRange when the user is scrolling.
            Default value is 300.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTextBox">
            <summary>
            Defines the AdvTextBox control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.MessageTemplateProperty">
            <Summary>
            Backing store for MessageTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.EmptyValueDisplayTextProperty">
            <Summary>
            Backing store for EmptyValueDisplayText.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.PasswordCharProperty">
            <Summary>
            Backing store for PasswordChar.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.PasswordOptionProperty">
            <Summary>
            Backing store for PasswordOption.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.PreviewTextChangeHandlerProperty">
            <Summary>
            Backing store for PreviewTextChangeHandler.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.SecurePasswordProperty">
            <Summary>
            Backing store for SecurePassword.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.SelectAllOptionProperty">
            <Summary>
            Backing store for SelectAllOption.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.ShowPasswordProperty">
            <Summary>
            Backing store for ShowPassword.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.ShowPasswordPeekButtonProperty">
            <Summary>
            Backing store for ShowPasswordPeekButton.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTextBox.UpdateOnEnterProperty">
            <Summary>
            Backing store for UpdateOnEnter.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnInitialized(System.EventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnApplyTemplate">
            <summary>
            Is called when a control template is applied.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Is called when content in this editing control changes.
            </summary>
            <param name="e">The arguments that are associated with the <see cref="E:System.Windows.Controls.Primitives.TextBoxBase.TextChanged"/> event.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged"/> event is raised by this element. Implement this method to add class handling for this event. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Overriding to validate text input.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.KeyDown"/> occurs.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTextBox.OnLoaded">
            <summary>
            Virtual method called when the Loaded event is raised.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.AttemptFocusOnLoad">
            <summary>
            If set, the control will attempt to set focus on itself once loaded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.EnableDirectionalNavitaionContinue">
            <summary>
            If set, arrow keys can be used to navigate out of the text box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.ShowEmptyValueDisplayTextWhenFocused">
            <summary>
            By default the EmptyValueDisplayText is hidden when the text box has keyboard focus.
            Set this property to show EmptyValueDisplayText when focused.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.MessageAdorner">
            <summary>
            Gets or sets the MessageAdorner which is used to display a Message. By default an instance of TextBoxMessageAdorner is used.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.MessageTemplate">
            <summary>
            Gets or sets the DataTemlate used to render a message.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.EmptyValueDisplayText">
            <summary>
            The string that is displayed when the value of Text is null or an empty string.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.PasswordChar">
            <summary>
            Gets or sets the character used for masking the password.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.PasswordOption">
            <summary>
            Gets or sets security level.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.PreviewTextChangeHandler">
            <summary>
            Gets or sets a PreviewTextChangeHandler.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.SecurePassword">
            <summary>
            Gets or sets a SecureString containing the password. 
            Returns null if PasswordOption is not SecurePassword or SecurePasswordBindable.
            If PasswordOption is SecurePasswordBindable, returns the value of the dependency property, if not null, and if null, creates a new SecureString.
            If PasswordOption is SecurePassword, return value is the SecureString of the underlying PasswordBox.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.SelectAllOption">
            <summary>
            Gets or sets a value which determines when all text is selected. Property value is an enum with Flags attribute, so multiple values can be set.
            Possible values are None, OnFocused and OnLoaded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.ShowPassword">
            <summary>
            Gets or sets whether to show the password as plain text. Ignored if PasswordOption is None.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.ShowPasswordPeekButton">
            <summary>
            Gets or sets a value which determines whether a button is presented which allows the user to view the password.
            Ignored if PasswordOption is None.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.UpdateOnEnter">
            <summary>
            Gets or sets whether the binding source of the Text property should be updated when the user presses enter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTextBox.HandlesScrolling">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ValueConverterBase`1">
            <summary>
            Abstract base class for ValueConverters which exports a static Default instance of the specified type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ValueConverterBase`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Abstract implementation of IValueConverter.Convert.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ValueConverterBase`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Optional ConvertBack. Not Implemented.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ValueConverterBase`1.Default">
            <summary>
            Obtains a reference to a default instance of T. (Uses lazy loading. The instance is not created until asked for.)
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnHeader.OpeningBuiltInContextMenuEvent">
            <summary>
            Using a RoutedEvent as the backing store for OpeningBuiltInContextMenu.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnHeader.ClickEvent">
            <summary>
            Using a RoutedEvent as the backing store for Click. Can't AddOwner to Button's Click event because
            it somehow ends up being fired from outside this class. Intentionally making is so the header raises
            Click only on unhandled mouse events.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnHeader.ClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnHeader.CommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnHeader.CommandParameterProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColumnHeader.OpeningBuiltInContextMenu">
            <summary>
            Routed event raised before opening the built-in context menu. Handle to prevent the context menu from opening. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnHeader.ClickMode">
            <summary>
            Get or set what triggers a click event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnHeader.Command">
            <summary>
            Get or set what triggers a click event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnHeader.CommandParameter">
            <summary>
            Get or set what triggers a click event.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EditingContentControlTextBox">
            <summary>
            Defines a TextBox that has special handling for arrow key presses to facilitate correct keyboard navigation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditingContentControlTextBox.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to unhandle mouse down event when the text box is read-only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditingContentControlTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Purpose here is to use preview key down to flag arrow key presses so that the KeyPress event is not marked as handled when
            arrow key is either up or down or if the cursor is at the end of the word in the dirction of the arrow, left or right.
            Allowing arrow key press to bubble up in these circumstances so navigation can leave the text box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControlTextBox.HandlesScrolling">
            <summary>
            Have to set true to override default behavior. This just doesn't work otherwise, which is why it can't be done in a behavior.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DataForm">
            <summary>
            A control for editing the properties of a data bound object.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.AutoGeneratingFieldEvent">
            <summary>
            Using a DevComponents RoutedEvent for AutoGeneratingField.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.DataChangedEvent">
            <summary>
            Using a DevComponents RoutedEvent for DataChanged. Use RoutedPropertyChangedEventHandler with object as the generic type.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.ActiveFieldChangedEvent">
            <summary>
            Using a RoutedEvent for ActiveFieldChanged. Event handler is type RoutedPropertyChangedEventHandler with object as the generic type.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm._ActiveFieldPropertyKey">
            <Summary>
            Backing store for ActiveField.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.AreFieldHeadersActiveProperty">
            <Summary>
            Backing store for AreFieldHeadersActive.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.BeginEditTriggerProperty">
            <Summary>
            Backing store for BeginEditTrigger.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.CommitChangesProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommitChanges.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.DataProperty">
            <summary>
            Using a DependencyProperty as the backing store for Data.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.DataTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DataType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.EditingEnterKeyActionProperty">
            <Summary>
            Backing store for EditingEnterKeyAction.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.HasErrorProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasErrors.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.IsLockedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsLocked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.ShowReadOnlyFieldsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowReadOnlyFields.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.ShowSubFieldsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowSubFields.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataForm.SortingProperty">
            <summary>
            Using a DependencyProperty as the backing store for Sorting.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataForm.OnAutoGeneratingField(DevComponents.WPF.Controls.DataForm.AutoGeneratingFieldEventArgs)">
            <summary>
            Virtual method called when a field is being auto generated from Data. Default implementation raises the AutoGeneratingField routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataForm.OnDataChanged(System.Object,System.Object)">
            <summary>
            Virtual method called when the value of Data changes. Base implementation raises the DataChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataForm.OnActiveFieldChanged(System.Object,System.Object)">
            <summary>
            Virtual method called when the value of ActiveField changes. Base implementation raises the ActiveFieldChanged routed event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.DataForm.AutoGeneratingField">
            <summary>
            Routed event raised when a field is being auto generated.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.DataForm.DataChanged">
            <summary>
            Routed event raised when the value of Data changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.DataForm.ActiveFieldChanged">
            <summary>
            Bubbling routed event raised when the value of ActiveField changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.MaxSubFieldDepth">
            <summary>
            Specifies the maximum level in property hierarchy that will be displayed by default.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.AreFieldsAutoGenerated">
            <summary>
            Returns true if existing sub fields were automatically generated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.ActiveField">
            <summary>
            Gets the field item which currently has keyboard focus. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.AreFieldHeadersActive">
            <summary>
            Get or set whether clicking on a field header puts the field into edit mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.BeginEditTrigger">
            <summary>
            Gets or sets the event which causes the field to enter edit mode. This is a dependency property. The default value is GotFocus.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.CommitChanges">
            <summary>
            Get or set whether changes made in the UI are propagated to the underlying data source.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.Data">
            <summary>
            Get or set the data object which is being edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.DataType">
            <summary>
            Get or set the Type of the data being edited. If DataType is set and Data is null, and if DataType has a default constructor,
            then a new instance of the type will be created and set as value of Data.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.EditingEnterKeyAction">
            <summary>
            Gets or sets a value which determines what happens when the user hits the enter key while editing a field.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.HasError">
            <summary>
            Gets whether there are any errors in the form.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.IsLocked">
            <summary>
            Get or set whether the form is locked - user cannot edit any value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.ShowReadOnlyFields">
            <summary>
            Get or set whether read-only fields are shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.ShowSubFields">
            <summary>
            Get or set whether sub fields are included when auto generating the form fields. Default is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.Sorting">
            <summary>
            Get or set how the fields are sorted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataForm.ValidationRules">
            <summary>
            Gets or sets a set of validation rules which are run against all proposed values.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DataFormField">
            <summary>
            A HeaderedContentControl which serves as the native container type for the DataForm control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.ValueChangedEvent">
            <summary>
            Using a DevComponents RoutedEvent for DataChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.IsExpandedChangedEvent">
            <summary>
            Using a RoutedEvent for IsExpandedChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.BeginEditTriggerProperty">
            <Summary>
            Backing store for BeginEditTrigger.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.EditorBackgroundProperty">
            <Summary>
            Backing store for EditorBackground.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.EditorBorderBrushProperty">
            <Summary>
            Backing store for EditorBorderBrush.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.EditorBorderThicknessProperty">
            <Summary>
            Backing store for EditorBorderThickness.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.EditorSettingsProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorSettings.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.EditingEnterKeyActionProperty">
            <Summary>
            Backing store for EditingEnterKeyAction.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.HasEditorProperty">
            <Summary>
            Backing store for HasEditor.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.HeaderColumnWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderColumnWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.HorizontalHeaderAlignmentProperty">
            <Summary>
            Backing store for HorizontalHeaderAlignment.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.IsDirtyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDirty.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.IsEditingProperty">
            <Summary>
            Backing store for IsEditing.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.IsHighlightedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsHighlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.IsReadOnlyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsReadOnly.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.PropertyNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyName.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.ValueStringFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueStringFormat.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.ValueTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DataFormField.VerticalHeaderAlignmentProperty">
            <Summary>
            Backing store for VerticalHeaderAlignment.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnApplyTemplate">
            <summary>
            OVerriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Begin edit when field gets focus.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Commits edit.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to set visual state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to set visual state. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Ensure focus.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Sets focus
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Overriding to begin edit when BeginEditTrigger is TextInput.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.ClearPendingChanges">
            <summary>
            Clears the editor of all pending (uncommitted) changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.CommitPendingChanges">
            <summary>
            Commits all pending changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.GetSubFields(System.Boolean)">
            <summary>
            Get the sub fields of this field, if it has any.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DataFormField.ClearValueBinding">
            <summary>
            Used to prevent debug output of WPF Binding errors generated when the value Type changes. The errors are harmless,
            the bindings are repaired once the new object is loaded, but users report that they are distracting when trying to debug somthing else.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.DataFormField.ValueChanged">
            <summary>
            Routed event raised when the value of the bound data changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.DataFormField.IsExpandedChanged">
            <summary>
            Bubbl;ing RoutedEvent raised when the value of IsExpanded changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.Editor">
            <summary>
            Gets a reference to the embedded editing control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.Descriptor">
            <summary>
            Gets a reference to the DataFormFieldDescriptor used to generate this field, if there is one.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.HasError">
            <summary>
            Gets whether the field editor is currently in an error state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.HierarchyLevel">
            <summary>
            Gets the level in the object hierarchy of the data item which is represented by this form.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.ParentField">
            <summary>
            Gets the DataFormField which is parent to this field, if this is a sub field.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.ParentForm">
            <summary>
            Gets the parent DataForm.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.FullPropertyPath">
            <summary>
            Gets the full path to the value being edited, relative to the parent data form's Data property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.PropertyType">
            <summary>
            Gets the Type of the property being edited. There is the possibility, under certain circumstances, 
            that this accessor could return null if accessed before the control has loaded. Be warned!
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.BeginEditTrigger">
            <summary>
            Gets or sets the event which causes the field to enter edit mode. This is a dependency property. The default value is GotFocus.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.EditorBackground">
            <summary>
            Gets or sets the Brush to use for background of the embedded editor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.EditorBorderBrush">
            <summary>
            Gets or sets the Brush to use for the Border of the embedded editor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.EditorBorderThickness">
            <summary>
            Gets or sets the border thickness for the embedded editing control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.EditorSettings">
            <summary>
            Get or set settings for customizing the editor used for this field.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.EditingEnterKeyAction">
            <summary>
            Gets or sets the value which determines what action is taken in response to the enter key. Applies only when IsEditing is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.HasEditor">
            <summary>
            Read Only dependency Property which is set to true if the field can edit its value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.HeaderColumnWidth">
            <summary>
            Gets or sets the width of the header column (the left column.) If unset, the width will be automatically determined by desired sizes of the headers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.HorizontalHeaderAlignment">
            <summary>
            Gets or sets the horizontal alignment of the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.IsDirty">
            <summary>
            Gets whether the content has changed.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.IsEditing">
            <summary>
            Gets or sets whether the current field is in edit mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.IsExpanded">
            <summary>
            Get or set whether the composite field's sub-fields are visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.IsHighlighted">
            <summary>
            Gets whether the field is highlighted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.IsReadOnly">
            <summary>
            Get or set whether this field should be treated as read only. Note: if the property to which Value is bound cannot be written to, 
            then this value will always be false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.PropertyName">
            <summary>
            Get or set the name of the property being edited by this field.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.Value">
            <summary>
            Get or set the Value of the property being edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.ValueStringFormat">
            <summary>
            Get or set a format string to use when displaying Value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.ValueTemplate">
            <summary>
            Get or set a DataTemplate which shows how to render Value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormField.VerticalHeaderAlignment">
            <summary>
            Gets or sets the vertical alignment of the header.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DataFormFieldDescriptor">
            <summary>
            A kind of built-in view model class for DataFormField. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.DisplayName">
            <summary>
            Get or set the display name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.EditorSettings">
            <summary>
            Get or set the field editor's settings.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.IsExpanded">
            <summary>
            If the value is not null, it determines whether the Field is initially expanded, if it has sub fields.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.IsReadOnly">
            <summary>
            If the value is not null, it determines whether the field is read only. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.IsVisible">
            <summary>
            If the value is not null, it detmines whether the field is visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.PropertyName">
            <summary>
            Get or set the Property Name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.PropertyType">
            <summary>
            Gets the property type, if possible. If property type is not known, null is returned.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.StringFormat">
            <summary>
            Get or set a format string.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.BeginEditTrigger">
            <summary>
            If the value is not null, it determines the field's BeginEditTrigger.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.SortString">
            <summary>
            Get or set a string by which to sort the field by. Default value is DisplayName.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.FieldStyle">
            <summary>
            Get or set a Style for the Field control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.ValueTemplate">
            <summary>
            Get or set a data template which shows how to render the field's Data.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DataFormFieldDescriptor.SubFields">
            <summary>
            Get or set the collection of descriptors for this field's sub fields.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DialogWindow">
            <summary>
            Window which has built-in Ok and Cancel buttons for use as a Dialog window. PreviewCancel and PreviewOk tunnelling events can be used
            for notification when user clicks ok or cancel.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DialogWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DialogWindow.HasOkButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasOkButton.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DialogWindow.HasCancelButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasCancelButton.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DialogWindow.OkProperty">
            <summary>
            Using a DependencyProperty as the backing store for Ok.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DialogWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Overriding to remove the minimize and maximize buttons from the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.DialogWindowOpeningEvent">
            <summary>
            Using a RoutedEvent as the backing store for DialogWindowOpening.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.RequestKeyboardFocusOnEnterProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusOnEnter.   
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.AlwaysShowTextBoxProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlwaysShowTextBox.      
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.CommitOnContentChangedProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommitOnContentChange.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.CommitOnDropDownClosedProperty">
            <Summary>
            Backing store for CommitOnDropDownClosed.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.ContentStringProperty">
            <summary>
            Using a DependencyProperty as the backing store for ContentString.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.DialogWindowTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DialogWindowType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.DropDownTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropDownTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.DropDownClosesOnClickProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropDownClosesOnClick.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.EditingTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditingTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.EditingBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditingBackground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.EditingBorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditingBorderBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.EditingBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditingBorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.EditorSettingsProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorSettings.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.InitialTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for InitialText.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsButtonHighlightedOnMouseOverProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsButtonHighlightedOnMouseOver.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsDialogWindowOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDialogWindowOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsDropDownOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDropDownOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsEditingProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditing.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsDirtyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDirty.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsInCellEditingEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsInCellEditingEnabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditingContentControl.IsReadOnlyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsReadOnly.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditingContentControl.UpdateContentFromContentString(System.Boolean)">
            <summary>
            Force an update of Content from ContentString. Returns false if there is a validation error associated with the ContentString binding.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.ValidateOnContentChange">
            <summary>
            When true, when Content changes the new value is validated against the validation rules specified by the editor settings.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.EditingContentControl.DialogWindowOpening">
            <summary>
            Routed event raised when the dialog window is opening.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.AlwaysShowTextBox">
            <summary>
            When true, the text box based editor is always shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.CommitOnContentChanged">
            <summary>
            Get or set whether changes made by the user are immediately committed to the underlying data source.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.CommitOnDropDownClosed">
            <summary>
            Gets or sets whether changes made in the drop down are automatically committed when the drop down closes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.ContentString">
            <summary>
            This property is intended to be a string in normal cases, but is typed as object to allow setting 
            equal to Content property directly. It is helpful sometimes to have separatation of Content and the current string
            being entered by the user. For example, consider a TextBox with Text property bound to ContentString. It will be set
            to update source on property changed, to enable real-time, keystroke by keystroke, validation - important when Content is already in
            error state, so user knows immediately that the change is correcting the error. But equally important is that no attempt is made to
            update the value of Content while the user is typing, if there is no current error.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.DialogWindowType">
            <summary>
            Get or set the Type for dialog window. When property IsDialogWindowOpen is set to true, 
            a new instance of type DialogWindowType is created and shown via call to Window.ShowDialog(). 
            Note that the dialog window type must derive from System.Windows.Window.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.DropDownTemplate">
            <summary>
            Setting a value for this property automatically triggers the editor to include a toggle button that when checked opens a Popup. 
            When set, the property specifies a ControlTemplate which is applied to a ContentControl that is a child of the Popup. 
            The content of the ContentControl is bound to the Content property of the editor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.DropDownClosesOnClick">
            <summary>
            Get or set whether the drop down closes automatically when a click event or mouse left button up event fires 
            from within the drop down content. (The drop down always closes with a click event that originates outside
            of the drop down content.) The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.EditingTemplate">
            <summary>
            Get or Set a ControlTemplate which is set as the editors Template when property IsEditing is true. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.EditingBackground">
            <summary>
            Background when IsEditing is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.EditingBorderBrush">
            <summary>
            Border brush when IsEditing is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.EditingBorderThickness">
            <summary>
            Border thickness when IsEditing is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.EditorSettings">
            <summary>
            The editor settings used by this editor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.InitialText">
            <summary>
            Set a string to be used as the initial text by text box when control enters edit mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsButtonHighlightedOnMouseOver">
            <summary>
            Get or set whether the editor’s button, if it has one, is highlighted when the mouse is over it.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsDialogWindowOpen">
            <summary>
            Get or set whether the dialog window is open. A value for DialogWindowType must be set for this property to take effect.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsDropDownOpen">
            <summary>
            Get or set whether the drop down is open. This property has no effect if DropDownTemplate is not set.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsEditing">
            <summary>
            Gets whether the control is in edit mode. Read only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsDirty">
            <summary>
            Get whether there are uncommitted changes. This is a read-only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsInCellEditingEnabled">
            <summary>
            Get or set whether the Value should be editable directly in the cell TextBox. 
            If false, the text box is made read only. If true, then the TextBox is editable. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditingContentControl.IsReadOnly">
            <summary>
            Get or set whether editing by user is disabled. Default value is false. This is a dependency property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TextBoxMessageAdorner">
            <summary>
            Defines a MessageAdorner specificaly targetting a TextBox.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MessageAdorner">
            <summary>
            Defines an Adorner that is used to display a message related to a specific element. The message is
            rendered using a ContentPresenter, for a duration specified by the Duration property and located
            at a position specified by Offset, relative to the top left corner of the adorned element.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.#ctor(System.Windows.UIElement,System.Windows.DataTemplate)">
            <summary>
            Create instance given the element to adorn and the underlying ContentPresenter's ContentTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.Show(System.Object)">
            <summary>
            Causes the adorner to show itself with the specified message.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.Detach">
            <summary>
            Removes the adorner from the adorner layer.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.CreateAnimation">
            <summary>
            Virtual method to create the storyboard which animates the adorner to its closing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.EnsureWithinWindowBounds(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Gets a Point whos X and Y values specify the offset of the adorner relative to the top left corner of the adorned element.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overriding to return ContentPresenter.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure VisualChild is measured.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure VisualChild is arranged.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MessageAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Overriding to add positioning transform so VisualChild is rendered at correct location.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MessageAdorner.Offset">
            <summary>
            Get or Set a Point which contains X and Y offsets to apply to the position when rendering.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MessageAdorner.Duration">
            <summary>
            Gets or sets the duration that the adorner will remain visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MessageAdorner.VisualChild">
            <summary>
            Gets a reference to the underlying content presenter which renders the message.
            Will return null if the adorner is not loaded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.MessageAdorner.VisualChildrenCount">
            <summary>
            Overriding to return 1.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxMessageAdorner.#ctor(System.Windows.Controls.TextBox,System.Windows.DataTemplate)">
            <summary>
            Create instance given the TextBox to adorn and the underlying ContentPresenter's ContentTemplate.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TextBoxMessageAdorner.Offset">
            <summary>
            Get or Set a Point which contains X and Y offsets to apply to the position when rendering.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.ContextMenuKey">
            <summary>
            Identifies the ContextMenu resource which is set as value of the custom chrome's ContextMenu property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.ChromeStyleProperty">
            <Summary>
            Backing store for ChromeStyle.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.HideSystemButtonsProperty">
            <summary>
            Using a DependencyProperty as the backing store for HideSystemButtons.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.HideWindowIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for HideWindowIcon.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.HideWindowTitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for HideWindowTitle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.InactiveBackgroundProperty">
            <summary>
            Backing store for InactiveBackground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.InactiveForegroundProperty">
            <summary>
            Backing store for InactiveForeground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CustomChrome.ShowFullScreenButtonProperty">
            <Summary>
            Backing store for ShowFullScreenButton.
            </Summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DevComponents.WPF.Controls.CustomChrome.ShowSystemMenuProperty" -->
        <member name="F:DevComponents.WPF.Controls.CustomChrome.TitleTemplateProperty">
            <summary>
            Backing store for TitleTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CustomChrome.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CustomChrome.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CustomChrome.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CustomChrome.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CustomChrome.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Overriding to prevent context menu from opening when ShowSystemMenu is false or if 
            mouse if over a button.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CustomChrome.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to toggle between window Maximized and Restored states.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.ChromeStyle">
            <summary>
            Gets or sets the style to use for the custom chrome.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.HideSystemButtons">
            <summary>
            Get or set whether any system buttons are shown. If this is true, then property HideMinimizeMaximizeButtons has no effect.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.HideMinimizeMaximizeButtons">
            <summary>
            If set, the minimize and maximize buttons are hidden. Note: these buttons are also hidden when the Window's ResizeMode is NoResize.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.HideWindowIcon">
            <summary>
            Get or set whether the window icon is hidden.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.HideWindowTitle">
            <summary>
            Get or set whetherf the window title is hidden.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.InactiveBackground">
            <summary>
            Gets or sets the background of the chrome when the window is not active.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.InactiveForeground">
            <summary>
            Gets or sets the foreground of the chrome when the window is not active.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.ShowFullScreenButton">
            <summary>
            Gets or sets whether the full screen button is visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.ShowSystemMenu">
            <summary>
            Get or set whether the system context menu is shown. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CustomChrome.TitleTemplate">
            <summary>
            Gets or sets a DataTemplate that shows how to render the window title.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.NumericSpinner">
            <summary>
            A control for editing numeric values which has increment and decrement repeat buttons.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.ValueChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for ValueChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.ButtonVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for ButtonVisibility.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.DelayProperty">
            <summary>
            Using a DependencyProperty as the backing store for Delay.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.IncrementProperty">
            <summary>
            Using a DependencyProperty as the backing store for Increment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.IntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interval.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.IsTextBoxReadOnlyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsTextBoxReadOnly.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.MaximumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Maximum.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.MinimumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Minimum.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.NullValueDisplayStringProperty">
            <summary>
            Using a DependencyProperty as the backing store for NullValueDisplayString.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.PrecisionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Precision.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.RejectNonNumericCharactersProperty">
            <summary>
            Using a DependencyProperty as the backing store for RejectNonNumericCharacters.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.RepeatButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for RepeatButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.TextBoxStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextBoxStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.ValueFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueFormat.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.NumericSpinner.ValueTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueType.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.NumericSpinner.ValueChanged">
            <summary>
            Routed event which fires when the value of Value changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.ButtonVisibility">
            <summary>
            Get or set whether the embedded RepeatButtons are visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Delay">
            <summary>
            Get or set the Delay in milliseconds for the embedded RepeatButton controls.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Increment">
            <summary>
            Get or set the amount of change with each click of either the increase or decrease buttons.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Interval">
            <summary>
            Get or set the interval in milliseconds between repeated clicks of the embedded repeat buttons.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.IsTextBoxReadOnly">
            <summary>
            Get or set whether the embedded editing text box is read-only.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Maximum">
            <summary>
            Get or set the maximum value to which the user can spin up to.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Minimum">
            <summary>
            Get or set the minimum value to which the user can spin down to.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.NullValueDisplayString">
            <summary>
            Get or set a string which is displayed when Value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Precision">
            <summary>
            Get or set the number of decimal places to keep in the display.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.RejectNonNumericCharacters">
            <summary>
            Get or set whether the user is allowed to enter non-numeric characters.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.RepeatButtonStyle">
            <summary>
            Get or set a Style which is applied to the embedded RepeatButton controls.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.TextBoxStyle">
            <summary>
            Get or set a Style which is applied to the imbedded editing text box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.Value">
            <summary>
            Get or set the Value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.ValueFormat">
            <summary>
            Get or set a format string to use when displaying the value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericSpinner.ValueType">
            <summary>
            Get or set the value's Type. Must be numeric, or a Nullable containing a numeric.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PinnedColumnsSeparator.PinProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pin.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PinnedColumnsSeparator.Pin">
            <summary>
            Get or Set the Pin of the bordering pinned column.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PinnedRowsSeparator.PinProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pin.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PinnedRowsSeparator.Pin">
            <summary>
            Get or Set the Pin of the bordering pinned row.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ProgressStep">
            <summary>
            Container type for the ProgressSteps control. Represents a single step in a process. Derives from Button.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.IsCurrentStepChangedEvent">
            <summary>
            Using a RoutedEvent for IsCurrentStepChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.DescriptionProperty">
            <Summary>
            Backing store for Description.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.DescriptionTemplateProperty">
            <Summary>
            Backing store for DescriptionTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.HighlightActiveStepProperty">
            <Summary>
            Backing store for HighlightActiveStep.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.ImageSourceProperty">
            <Summary>
            Backing store for ImageSource.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.IsActiveStepProperty">
            <Summary>
            Backing store for IsActiveStep.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.IsFinalStepProperty">
            <Summary>
            Backing store for IsFinalStep.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.ProgressProperty">
            <Summary>
            Backing store for Progress.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.SetActiveStepOnClickProperty">
            <Summary>
            Backing store for SetIsActiveStepOnClick.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStep.StepNumberProperty">
            <Summary>
            Backing store for StepNumber.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ProgressStep.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Called when the rendered size of a control changes. 
            </summary>
            <param name="sizeInfo">Specifies the size changes.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ProgressStep.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button"/> is clicked. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.ParentProgressSteps">
            <summary>
            Gets a referenct to the parent ProgressSteps control.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ProgressStep.IsCurrentStepChanged">
            <summary>
            Routed event raised when the value of IsActiveStep changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.Description">
            <summary>
            Gets or sets a description of the step.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.DescriptionTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render Description.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.HighlightActiveStep">
            <summary>
            Gets or sets whether this step should be highlighted if it is the active step. By default, this value is inherited from property of the same name of the parent ProgressSteps control.  
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.ImageSource">
            <summary>
            Gets or sets an image source to be displayed by the step.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.IsActiveStep">
            <summary>
            Gets or sets whether this step is the current step in the parent ProgressSteps control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.IsFinalStep">
            <summary>
            Gets whether this step is the last step. This is a read-only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.Progress">
            <summary>
            Gets or sets the amount of progress made on this step. Value should be between 0 and 1, inclusive.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.SetActiveStepOnClick">
            <summary>
            Gets or sets whether the IsActiveStep property is set to true when the control is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressStep.StepNumber">
            <summary>
            Gets or sets the step number. Step numbers are determined by item index in Items collection, if not set explicitly.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ProgressSteps">
            <summary>
            Implementation of the ProgressSteps control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressSteps.ActiveStepProperty">
            <Summary>
            Backing store for ActiveStep.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressSteps.ActiveStepFollowsProgressProperty">
            <Summary>
            Backing store for ActiveStepFollowsProgress.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressSteps.HighlightActiveStepProperty">
            <Summary>
            Backing store for HighlightActiveStep.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressSteps.HotTrackModeProperty">
            <Summary>
            Backing store for HotTrackMode.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressSteps.ProgressProperty">
            <Summary>
            Backing store for Progress.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressSteps.SetActiveStepOnClickProperty">
            <Summary>
            Backing store for SetIsActiveStepOnClick.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ProgressSteps.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <returns>
            true if the item is a ProgressStep control; otherwise, false.
            </returns>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ProgressSteps.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            The ProgressStep that is used to display the given item.
            </returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.ProgressSteps.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item. 
            </summary>
            <param name="element">Element used to display the specified item.</param><param name="item">Specified item.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ProgressSteps.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressSteps.ActiveStep">
            <summary>
            Gets or sets the item coresponding to the current step. This property is updated automatically when the integral value of the Progres property changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressSteps.ActiveStepFollowsProgress">
            <summary>
            Gets or sets whether the active step is automatically updated when the integral value of Progress changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressSteps.HighlightActiveStep">
            <summary>
            Gets or sets a value which determines whether the active step should be highlighted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressSteps.HotTrackMode">
            <summary>
            Gets or sets a value which determines when a step can be activated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressSteps.Progress">
            <summary>
            Gets or sets the over-all progress. Valid values in range from 0 to number of steps.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ProgressSteps.SetActiveStepOnClick">
            <summary>
            Gets or sets whether the ActiveStep property is set to a step that is clicked.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ProgressStepsPanel">
            <summary>
            A Panel for the steps in ProgressSteps control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.ClosingEvent">
            <summary>
            Using a RoutedEvent for Closing.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.SubmenuContextChangedEvent">
            <summary>
            Using a RoutedEvent for SubmenuContextChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.CenterIconProperty">
            <summary>
            Backing store for CenterIcon
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.ColorThemeProperty">
            <Summary>
            Backing store for ColorTheme.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.IconTemplateProperty">
            <summary>
            Using a DependencyProperty as backing store for IconTemplate
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.InnerRadiusProperty">
            <Summary>
            Backing store for InnerRadius.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.RadiusProperty">
            <Summary>
            Backing store for Radius.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.UseCustomToolTipHandlingProperty">
            <Summary>
            Backing store for UseCustomToolTipHandling.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenu.OpenStateProperty">
            <Summary>
            Backing store for OpenState.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.OnApplyTemplate">
            <summary>
            Sets up control state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.OnOpened(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Controls.ContextMenu.Opened"/> event occurs. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ContextMenu.Opened"/> event.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.OnClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Controls.ContextMenu.Closed"/> event occurs. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ContextMenu.Closed"/> event.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Ensures valid Diameter and Horizontal and Vertical offsets.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Ensures container is RadialMenuItem
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.GetContainerForItemOverride">
            <summary>
            Returns a new RadialMenuItem.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Ensures menu item state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Ensures that the center button's visual state is updated for "MouseOver". (When popup is open on top of the button
            the button does not recieve mouse enter or move events, even though it does recieve mouse down.)
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenu.OnClosing">
            <summary>
            Virtual method called to raise the Closing event. Handle the args to prevent closing.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RadialMenu.Closing">
            <summary>
            Routed event raised when the menu begins to close.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RadialMenu.SubmenuContextChanged">
            <summary>
            Routed event raised when the submenu context changes. This is a Direct routed event, allowing for animation via event trigger.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.CurrentSubmenuParent">
            <summary>
            If a submenu is open, this is its parent. Will be null if no submenu is open.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.MinimumSegmentCount">
            <summary>
            The minimum number of segments that the radial menu is devided into. The actual number of segments will
            be the larger of this value and the item count. Default is 6.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.CenterIcon">
            <summary>
            Get or set the icon for the center of the menu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.ColorTheme">
            <summary>
            Gets or sets the built-in color theme.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.IconTemplate">
            <summary>
            Get or set a DataTemplate that shows how to render the icon. This value is inherited by the menu items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.InnerRadius">
            <summary>
            Get or set the radius of the circle which defines the inner boundary of the menu items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.Radius">
            <summary>
            Get or set the radius of the menu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.UseCustomToolTipHandling">
            <summary>
            Get or set whether normal tooltip placement and appearance is replaced with custom tooltip placement and appearance.
            This is a dependency proeprty. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenu.OpenState">
            <summary>
            Indicates whether the menu is opening, closing, open or closed. 
            This read-only property is managed by the opening and closing animations.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RadialMenuButton">
            <summary>
            A button used for opening and closing a RadialMenu.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuButton.BackButtonVisibilityProperty">
            <Summary>
            Backing store for BackButtonVisibility.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuButton.BackButtonIconProperty">
            <Summary>
            Backing store for BackButtonIcon.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuButton.ColorThemeProperty">
            <Summary>
            Backing store for ColorTheme.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuButton.IsDragMoveEnabledProperty">
            <Summary>
            Backing store for IsDragMoveEnabled.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuButton.IsMenuOpenProperty">
            <Summary>
            Backing store for IsMenuOpen.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuButton.RadialMenuProperty">
            <Summary>
            Backing store for RadialMenu.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave"/> routed event that occurs when the mouse leaves an element. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseLeave"/> event.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuButton.GetLayoutClip(System.Windows.Size)">
            <summary>
            Override to make the button appear to be circular and ensures that hit testing is correct.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuButton.BackButtonVisibility">
            <summary>
            Determines the visibility of the back button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuButton.BackButtonIcon">
            <summary>
            Get or set the Icon for the back button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuButton.ColorTheme">
            <summary>
            Get or set the color theme. This property is bound to the same property of the attached RadialMenu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuButton.IsDragMoveEnabled">
            <summary>
            Gets or sets whether to enable an enbedded Thumb which allows the user to move the button with the mouse. 
            When true, the button's Canvas.Top and Canvas.Left properties are adjusted by the Thumb's drag delta. If the
            button is not the child of a Canvas, this will have no direct effect. Dependency property, false by default.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuButton.IsMenuOpen">
            <summary>
            Gets or sets whether the associated menu is open.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuButton.RadialMenu">
            <summary>
            Get or sets the RadialMenu associated with this button.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RadialMenuItem">
            <summary>
            Represents a menu item in a RadialMenuControl. While RadialMenuControl is a ContextMenu, RadialMenuItem does not derive from
            ContextMenuItem, but it is designed such that it shares much of the same interface. The this class is not derived from ContextMenuItem
            is that ContextMenuItem and ContextMenu working together do things that are not compatible with the requirements of the radial menu.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.ClickEvent">
            <summary>
            Using a RoutedEvent as backing for the Click event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.SubmenuOpenedEvent">
            <summary>
            Using a RoutedEvent for SubmenuOpened.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.SubmenuClosedEvent">
            <summary>
            Using a RoutedEvent for SubmenuClosed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.ArcTopProperty">
            <Summary>
            Backing store for ArcTop. ArcTop is the arc top for a Path, relative to the top of the menu item. The Data for the path is automatically generated so that it forms an arc.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.GetArcTop(System.Windows.Shapes.Path)">
            <summary>
            Gets the arc top for a Path, relative to the top of the menu item. The Data for the path is automatically generated so that it forms an arc.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.SetArcTop(System.Windows.Shapes.Path,System.Double)">
            <summary>
            Sets the arc top for a Path, relative to the top of the menu item. The Data for the path is automatically generated so that it forms an arc.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.ArcBottomProperty">
            <Summary>
            Backing store for ArcBottom. ArcBottom is the arc bottom for a Path, relative to the bottom of the menu item. The Data for the path is automatically generated so that it forms an arc.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.GetArcBottom(System.Windows.Shapes.Path)">
            <summary>
            Gets the arc bottom for a Path, relative to the bottom of the menu item. The Data for the path is automatically generated so that it forms an arc.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.SetArcBottom(System.Windows.Shapes.Path,System.Double)">
            <summary>
            Sets the arc bottom for a Path, relative to the bottom of the menu item. The Data for the path is automatically generated so that it forms an arc.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.ArcHeightProperty">
            <Summary>
            Backing store for ArcHeight. ArcHeight is the arc height for a Path. The Data for the path is automatically generated so that it forms an arc.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.GetArcHeight(System.Windows.Shapes.Path)">
            <summary>
            Gets the arc height for a Path. The Data for the path is automatically generated so that it forms an arc.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.SetArcHeight(System.Windows.Shapes.Path,System.Double)">
            <summary>
            Sets the arc height for a Path. The Data for the path is automatically generated so that it forms an arc.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.AngleProperty">
            <Summary>
            Backing store for Angle.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.ClickActionProperty">
            <Summary>
            Backing store for ClickAction.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.CommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for Command.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.CommandParameterProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommandParameter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.CommandTargetProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommandTarget.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.IconTemplateProperty">
            <summary>
            Using a DependencyProperty as backing store for IconTemplate
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.IndexProperty">
            <Summary>
            Backing store for Index.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.IsCheckableProperty">
            <Summary>
            Backing store for IsCheckable.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.IsCheckedProperty">
            <Summary>
            Backing store for IsChecked.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RadialMenuItem.IsSubmenuOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSubmenuOpen.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)"/> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult"/>). 
            </summary>
            <returns>
            Results of the test, including the evaluated point.
            </returns>
            <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.OnSubmenuOpened">
            <summary>
            Virtual method called when the value of IsSubmenuOpen changes to true.
            Raises the SubmenuOpened routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.OnSubmenuClosed">
            <summary>
            Virtual method called when the value of IsSubmenuOpen changes to false.
            Raises the SubmenuClosed routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.GoToShowState(DevComponents.WPF.Controls.RadialMenuItem.ShowState)">
            <summary>
            Virtual method called when the show state changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RadialMenuItem.GetMenuItems(System.Windows.Controls.ItemsControl,System.Boolean)">
            <summary>
            Returns an enumerable of the item containers.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RadialMenuItem.Click">
            <summary>
            Bubbling event raised when the user clicks the menu item.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RadialMenuItem.SubmenuOpened">
            <summary>
            Bubbling event raised when the value of IsSubmenuOpen changes to true.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RadialMenuItem.SubmenuClosed">
            <summary>
            Bubbling event raised when the value of IsSubmenuOpen changes to false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.ParentMenu">
            <summary>
            The parent RadialMenu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.ParentMenuItem">
            <summary>
            The parent menu item, if this is a sub item. Will be null if this is not a sub menu item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.IsSubmenuItem">
            <summary>
            Returns true if this is a sub menu item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.MenuItems">
            <summary>
            Gets an enumeration of the child containers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.MinimumSegmentCount">
            <summary>
            The minimum number of segments that the radial sub menu is devided into. The actual number of segments will
            be the larger of this value and the item count. Default is to return the value from the parent RadialMenu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.Angle">
            <summary>
            Gets the angle of this item inside the circular menu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.ClickAction">
            <summary>
            Get or set what the menu does when this item is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.Command">
            <summary>
            Get or set a Command which is executed in conjunction with the raising of the Click event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.CommandParameter">
            <summary>
            Get or set the parameter to pass to the command.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.CommandTarget">
            <summary>
            The element on which to raise the Command.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.Icon">
            <summary>
            Get or set the menu item's icon. If the value is a valid uri path, then an Image will be created with a source pointing to the location of the path.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.IconTemplate">
            <summary>
            Get or set a DataTemplate that shows how to render the icon. This value is inherited from the parent menu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.Index">
            <summary>
            Get or set the index of this menu item. Determines where in the circle the item is placed. If unset
            an effective index equal to the item's position in the parent's Items collection is used.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.IsCheckable">
            <summary>
            Get or set whether the menu item is checkable.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.IsChecked">
            <summary>
            Gets or sets whether the item is checked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RadialMenuItem.IsSubmenuOpen">
            <summary>
            Get or set whether the sub menu is open.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Rectangle2D3D.MaterialProperty">
            <summary>
            Using a DependencyProperty as the backing store for Material.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Rectangle2D3D.TransformProperty">
            <summary>
            Using a DependencyProperty as the backing store for Transform.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SlidingAnimator">
            <summary>
            Implementation of a sliding animation provider. Inherits from the abstract class TransitionAnimation2DProvider.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.GridColumnWidthConverter">
            <summary>
            Converts a double to a GridLength, for binding to the Width of a Grid's ColumnDefinition.
            If value is Double.NaN, then the return value is a GridLength of type Star and value of 1.0.    
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WeakEvent`1">
            <summary>
            Event behavior using weak references to store the event handler data. Uses WeakEventSource for this purpose.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ChromelessWindow">
            <summary>
            Implementation of a Chromeless window. A chromeless window has no native chrome, i.e. no icon, no Title, no system buttons, no system context menu.
            Window resizing is provided, based on value of the dependency property ResizeBorderThickness. This class implements handlers for the commands defined
            in WindowCommands - Minimize, Maximize, Restore, Move, Size and Close. There is no build-in mechanism for executing these commands, however.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ChromelessWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ChromelessWindow.HasDropShadowProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasDropShadow.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ChromelessWindow.IsFullScreenProperty">
            <Summary>
            Backing store for IsFullScreen.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ChromelessWindow.ResizeBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeBorderThickness.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ChromelessWindow.HasDropShadow">
            <summary>
            Get or set whether the window is displayed with a drop shadow. Supported for OS Vista and above only.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ChromelessWindow.IsFullScreen">
            <summary>
            Gets or sets whether the window is in full screen mode.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CircularProgressControl">
            <summary>
            Circular Progress Control. Different looks can be achieved via Type property. Supports two Modes: Endless and Percent. DisplayValue is a boolean which 
            determines whether the value should be displayed in TextBlock in center of control. Note display value can be shown in both modes. AnimatingContentTemplate is ControlTemplate
            defined by each Type for defining the animation. Animation  for when Mode is Endless and IsRunning is true is started in code if there is
            a Storyboard in the template's Resources with name equal IsRunningStoryboard. This allows controlling the speed in ressponse to 
            changes in dependency property RotationSpeedMultiplier.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.AnimatingControlTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AnimatingContentTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.PalleteColorProperty">
            <summary>
            Using a DependencyProperty as the backing store for PalleteColor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.ContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for RotatingContent.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.ContentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for ContentTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.DisplayValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for DisplayValue.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.IsRunningProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRunning.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.InnerRadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for InnerDiameter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.InnerBorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for InnerBorderBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.InnerBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for InnerBorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.InternalValueOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for InternalValueOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.ModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Mode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.NormalizedValuePropertyKey">
            <summary>
            Using a DependencyProperty as the backing store for NormalizedValue.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.ProgressBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for ProgressFillBrush
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.RadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for Radius.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.RotationSpeedMultiplierProperty">
            <summary>
            Using a DependencyProperty as the backing store for RotationRateAdjustment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.TypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Type.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CircularProgressControl.ValueStringFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueFormatString.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.AnimatingControlTemplate">
            <summary>
            A ControlTemplate for a Control responsible for animating progress.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.Content">
            <summary>
            Content which will be rotated when Type is RotateContent.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.ContentTemplate">
            <summary>
            Template for displaying Content.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.DisplayValue">
            <summary>
            Get or set whether to display the Value property in the center of the circle. 
            This is a dependency property. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.IsRunning">
            <summary>
            Get or Set whether the endless mode progress bar is running. This is a dependency property. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.InnerRadius">
            <summary>
            Get or set the inner diameter. Default value is 0.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.InternalValueOverride">
            <summary>
            Get or set a double between 0 and 1 with which to override the calculated internal value.
            Setting this property is a way to take control of the angle of the displayed progress.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.Mode">
            <summary>
            Get or Set whether the progress control rotates continuously while IsRunning is true or advances  
            based on percentage of Value in relation to Minimum and Maximum. This is a dependency property. The default value is Percent.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.ProgressBrush">
            <summary>
            Get or set the Brush to use for filling the progress indicator.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.Radius">
            <summary>
            Gets the radius of the circle. This is a readonly property calculated as 1/2 the length of the smaller of ActualWidth and ActualHeight.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.RotationSpeedMultiplier">
            <summary>
            Get or set a multiplier to apply to the default rotation rate for controlling the rate of rotation when Mode is Endless.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.Type">
            <summary>
            Get or Set the Type of circular progress control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CircularProgressControl.ValueStringFormat">
            <summary>
            Get or set a format string for displaying Value.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SlidingContentControlState">
            <summary>
            Defines the possible states for SlidingContentControl.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SlidingContentControl">
            <summary>
            Implementation of a content control which enables its content to slide into and out of view.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SlidingContentControl.DurationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Duration.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SlidingContentControl.IsDockedProperty">
            <summary>
            Using a ReadOnly DependencyProperty as the backing store for IsDocked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SlidingContentControl.ShowSlideThumbWhenDockedProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowSlideThumbWhenDocked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SlidingContentControl.StateProperty">
            <summary>
            Using a DependencyProperty as the backing store for State.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SlidingContentControl.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SlidingContentControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.IsInPosition">
            <summary>
            Is true if the content is in position, whether Docked or Undocked. Will be false while animating
            and while user is dragging with the thumb.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.IsDragging">
            <summary>
            Get whether the content is currently being animated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.IsAnimating">
            <summary>
            Gets whether the user is currently dragging with the thumb.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.Duration">
            <summary>
            The duration of the sliding animation.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.IsDocked">
            <summary>
            Read-Only property which indicates whether the control is in one of the Docked states.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.ShowSlideThumbWhenDocked">
            <summary>
            If true, then a Thumb is shown on the edge of the control which allows the user to drag the content back into view. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SlidingContentControl.State">
            <summary>
            Determines the current state of the content - whether it is Normal (i.e. in view) or off view either to the right, left, top or bottom.
            When this value changes the slide animation is used to transition the content to the new state.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.StretchingStackPanel">
            <summary>
            A stack panel which stretches its children to fill all available space.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.StretchingStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to perform custom measurement.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.StretchingStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to perform arrangement.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RatingControl">
            <summary>
            Implementation of a control which allows a user to select from a set of items presented sequentially for the purpose of 
            setting a "rating" value. The rating value is equal to the sequence number of the selected item.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.RatingChangedEvent">
            <summary>
            Using a RoutedEvent as backing for RatingChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.AverageRatingProperty">
            <summary>
            Using a DependencyProperty as the backing store for AverageRating.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.MaxRatingProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxRating.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.RatingProperty">
            <summary>
            Using a DependencyProperty as the backing store for Rating.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.RatingItemDataProperty">
            <summary>
            Using a DependencyProperty as the backing store for RatingItemData.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingControl.StretchProperty">
            <summary>
            Using a DependencyProperty as the backing store for Stretch.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.OnApplyTemplate">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overriding to ensure RatingItem is container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.GetContainerForItemOverride">
            <summary>
            Overriding to return new RatingItem.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RatingControl.OnRatingChanged">
            <summary>
            Virtual method called to raise the RatingChanged event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RatingControl.RatingChanged">
            <summary>
            Raised when the value of Rating changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingControl.AverageRating">
            <summary>
            Get or set a value to be indicated by the rating control when the value of Rating is 0. This is a dependency property. The default value is 0.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingControl.MaxRating">
            <summary>
            Get or set the maximum rating possible. Effectively sets the number of rating items automatically generated. 
            If rating items are populated manually, then this value is ignored. This is a dependency property. The default value is 5.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingControl.Orientation">
            <summary>
            Gets or sets the orientation of the rating control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingControl.Rating">
            <summary>
            Get or Set the current rating.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingControl.Stretch">
            <summary>
            Get or Set how the items fill the available space.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RatingItem">
            <summary>
            Represents an item in the rating control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.PathBasedStyleKey">
            <summary>
            Resource key for default path based style.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.ImageBasedStyleKey">
            <summary>
            Resource key for default image based style.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.AverageRatingFractionPropertyKey">
            <summary>
            Using a DependencyProperty as the backing store for AverageRatingFraction.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.DataProperty">
            <summary>
            Using a DependencyProperty as the backing store for Data.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.StateProperty">
            <summary>
            Using a DependencyProperty as the backing store for State.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingItem.AverageRatingFraction">
            <summary>
            Read only property, set internally, which indicates the fractional portion of the average rating that this rating item represents.
            Ignored except when State is set to AverageRated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingItem.Data">
            <summary>
            Get or Set the rating control's type specific data.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingItem.State">
            <summary>
            Read-Only property indicating the state of the Rating Item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RatingItem.Value">
            <summary>
            The rating value of the rating item. If left unset, then this value will be set to equal the 
            item's position in the RatingControl's Items collection.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RatingItem.RatingItemState">
            <summary>
            Enumerates the possible rating item states.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.RatingItemState.Unrated">
            <summary>
            The rating item is unrated.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.RatingItemState.PreviewUnrated">
            <summary>
            The rating item should display preview of unrated.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.RatingItemState.Rated">
            <summary>
            The rating item should display Rated.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.RatingItemState.PreviewRated">
            <summary>
            The rating item should display a preview of Rated.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.RatingItem.RatingItemState.AverageRated">
            <summary>
            The rating item should display average rated.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WindowCommands">
            <summary>
            Defines RoutedUICommands for common window operations. Also defines the strings which go with them.
            Used in particular by ChromelessWindow.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.MinimizeCommand">
            <summary>
            Routed command for minimizing the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.MaximizeCommand">
            <summary>
            Routed command for maximizing the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.RestoreCommand">
            <summary>
            Routed command for restoring the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.SizeCommand">
            <summary>
            Routed command for sizing the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.MoveCommand">
            <summary>
            Routed command for moving the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.CloseCommand">
            <summary>
            Routed command for closing the window.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.ToggleFullScreenCommand">
            <summary>
            Routed command for making the window full screen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WindowCommands.ShowDialogCommand">
            <summary>
            A command which if executed will cause a window to be opened using ShowDialog. The command parameter, if set, should be the window Style.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TimeOfDaySpinner">
            <summary>
            A control for selecting a time of day.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.ValueChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for ValueChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.AmPmProperty">
            <summary>
            Using a DependencyProperty as the backing store for AmPm.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.ButtonVisibilityProperty">
            <Summary>
            Backing store for ButtonVisibility.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.HoursProperty">
            <summary>
            Using a DependencyProperty as the backing store for Hours.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.IsReadOnlyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsReadOnly.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.Is24HourProperty">
            <summary>
            Using a DependencyProperty as the backing store for Is24Hour.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.MinutesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Minutes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.RepeatButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for RepeatButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.SecondsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Seconds.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.ShowSecondsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowSeconds.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TimeOfDaySpinner.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.TimeOfDaySpinner.ValueChanged">
            <summary>
            Routed event raised when the value changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.AmPm">
            <summary>
            Get or set the string which indicates AM or PM.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.ButtonVisibility">
            <summary>
            Get or set the Visibility of the repeat buttons.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.Hours">
            <summary>
            Get or set the hours component of the time.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.IsReadOnly">
            <summary>
            Determines whether the user can edit values directly with keyboard or if the only way to edit value is with spinner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.Is24Hour">
            <summary>
            Get or set whehter the value is displayed in 24 or 12 hour format.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.Minutes">
            <summary>
            Get or set the minutes component of the time.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.RepeatButtonStyle">
            <summary>
            Get or set the style for the spinner buttons.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.Seconds">
            <summary>
            Get or set the seconds component of the time.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.ShowSeconds">
            <summary>
            Get or set whether seconds are shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TimeOfDaySpinner.Value">
            <summary>
            Get or set the value. Valid Types are DateTime and TimeSpan. If unset by user, then the value will be a DateTime.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToastNotification.IsShowingChangedEvent">
            <summary>
            Using a RoutedEvent for IsShowingChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToastNotification.GlowColorProperty">
            <Summary>
            Backing store for GlowColor.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToastNotification.ImageSourceProperty">
            <Summary>
            Backing store for ImageSource.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToastNotification.IsShowingProperty">
            <Summary>
            Backing store for IsShowing.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToastNotification.ShowDurationProperty">
            <Summary>
            Backing store for ShowDuration.
            </Summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ToastNotification.IsShowingChanged">
            <summary>
            Routed event raised when the value of IsShowing changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToastNotification.GlowColor">
            <summary>
            Gets or sets a pre-defined color for the border brush. Default value is Default, which maintains BorderBrush as normally used.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToastNotification.ImageSource">
            <summary>
            Gets or sets an image source to be displayed by the toast.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToastNotification.IsShowing">
            <summary>
            Gets or sets whether the notification is showing.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToastNotification.ShowDuration">
            <summary>
            Gets or sets the duration for which the toast notification is shown.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ToggleSwitchContentTemplateSelector">
            <summary>
            DataTemplateSelector for the On/Off content of a ToggleSwitch which returns a value depending on whether the 
            ContentPlacement of the ToggleSwitch is set to Center or not Center.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitchContentTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate"/> based on custom logic.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.DataTemplate"/> or null. The default value is null.
            </returns>
            <param name="item">The data object for which to select the template.</param><param name="container">The data-bound object.</param>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.ToggledOffEvent">
            <summary>
            Using a RoutedEvent for ToggledOff.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.ToggledOnEvent">
            <summary>
            Using a RoutedEvent for ToggledOn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.KnobRelativePositionProperty">
            <Summary>
            Backing store for KnobPosition. Used by the ToggleSwitch Template for animating the knob's position.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.GetKnobRelativePosition(System.Windows.FrameworkElement)">
            <summary>
            Gets the position of the knob as a relative value between 0 (off) and 1 (on).
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.SetKnobRelativePosition(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets the position of the knob as a relative value between 0 (off) and 1 (on).
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.KnobTrackLengthProperty">
            <Summary>
            Backing store for KnobTrackLength.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.GetKnobTrackLength(System.Windows.DependencyObject)">
            <summary>
            Gets the length in pixels of the track on which the knob travels.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.SetKnobTrackLength(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the length in pixels of the track on which the knob travels.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.ContentPlacementProperty">
            <Summary>
            Backing store for ContentPlacement.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.HeaderProperty">
            <Summary>
            Backing store for Header.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.HeaderPaddingProperty">
            <Summary>
            Backing store for HeaderPadding.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.HeaderPlacementProperty">
            <Summary>
            Backing store for HeaderPlacement.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.HeaderTemplateProperty">
            <Summary>
            Backing store for HeaderTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.HorizontalHeaderAlignmentProperty">
            <Summary>
            Backing store for HorizontalHeaderAlignment.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.IsOnProperty">
            <Summary>
            Backing store for IsOn.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.OffContentProperty">
            <Summary>
            Backing store for OffContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.OffContentTemplateProperty">
            <Summary>
            Backing store for OffContentTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.OnContentProperty">
            <Summary>
            Backing store for OnContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.OnContentTemplateProperty">
            <Summary>
            Backing store for OnContentTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.OrientationProperty">
            <Summary>
            Backing store for Orientation.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ToggleSwitch.VerticalHeaderAlignmentProperty">
            <Summary>
            Backing store for VerticalHeaderAlignment.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave"/> attached event is raised on this element. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.OnToggledOn">
            <summary>
            Virtual method called to raise the ToggledOn routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ToggleSwitch.OnToggledOff">
            <summary>
            Virtual method called to raise the ToggledOff routed event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ToggleSwitch.ToggledOff">
            <summary>
            Bubbling RoutedEvent which is raised when the value of IsOn changes from On to Off.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ToggleSwitch.ToggledOn">
            <summary>
            Bubbling RoutedEvent which is raised when the value of IsOn changes from Off to On.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.ContentPlacement">
            <summary>
            Gets of sets a value which determines where the On/Off content values are placed. The default is Center. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.Header">
            <summary>
            Gets or sets the Header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.HeaderPadding">
            <summary>
            Gets or sets the padding for the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.HeaderPlacement">
            <summary>
            Gets or sets the relative positioning of the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.HeaderTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render the Header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.HorizontalHeaderAlignment">
            <summary>
            Gets or sets the alignment of the header in relation to the switch.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.IsOn">
            <summary>
            Gets or sets whether the ToggleSwitch is in the On position.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.OffContent">
            <summary>
            Gets or sets the object to display when the ToggleSwitch is in the Off position.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.OffContentTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render OffContent.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.OnContent">
            <summary>
            Gets or sets the content to display when the ToggleSwitch is in the On position.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.OnContentTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render OnContent.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.Orientation">
            <summary>
            Gets or sets the orientation of the ToggleSwitch.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ToggleSwitch.VerticalHeaderAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TransitioningSelector">
            <summary>
            Implementation of a control which animates its items into view when selected and out of view when unselected. Based on MultiSelector.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.TransitionIntoViewCompletedEvent">
            <summary>
            Using a RoutedEvent as backing for TransitionIntoViewCompleted
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.TransitionOutOfViewCompletedEvent">
            <summary>
            Using a RoutedEvent as backing for TransitionOutOfViewCompleted
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.AllowMultipleSelectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowMultipleSelection.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.AnimationDurationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Duration.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.AnimatorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Animator.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.DontAnimateOnLoadProperty">
            <Summary>
            Backing store for DontAnimateOnLoad.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.KeepContentLoadedOnceItemSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for KeepContentLoadedOnceItemSelected.       
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelector.SelectedContentBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedContentBackground.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitioningSelector.OnApplyTemplate">
            <summary>
            Overriging to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitioningSelector.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overriding to ensure TransitioningSelectorItem is container type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitioningSelector.GetContainerForItemOverride">
            <summary>
            Overriding to return new TransitioningSelectorItem as container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitioningSelector.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Overriding to run animation when selection changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitioningSelector.OnTransitionIntoViewCompleted">
            <summary>
            Virtual method called to raise the routed event TransitionIntoViewCompleted.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TransitioningSelector.OnTransitionOutOfViewCompleted">
            <summary>
            Virtual method called to raise the routed event TransitionOutOfViewCompleted.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.TransitioningSelector.TransitionIntoViewCompleted">
            <summary>
            Routed event raised when the animation for transitioning an object into view is completed.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.TransitioningSelector.TransitionOutOfViewCompleted">
            <summary>
            Routed event raised when the animation for transitioning an object out of view is completed.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitioningSelector.AllowMultipleSelection">
            <summary>
            Get or set whether multiple selection is allowed. If multiple selection is not allowed, when one item is selected
            the currently selected item, if there is one, is deselected automatically. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitioningSelector.AnimationDuration">
            <summary>
            Get or set the duration of the animation.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitioningSelector.Animator">
            <summary>
            Get or set the animation provider. Must be an instance of a class which inherits from TransitioningSelectorAnimator.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitioningSelector.DontAnimateOnLoad">
            <summary>
            Gets or sets whether the animation should run when the control loads.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitioningSelector.KeepContentLoadedOnceItemSelected">
            <summary>
            Determines whether the visual elemnent used to display selected content should be kept in memory after the content item
            is deselected. By default, visual element which displays the selected content is unloaded when the item is unselected.
            This is a dependency property, the default value it false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TransitioningSelector.Orientation">
            <summary>
            Gets or sets the position of the item headers.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TransitioningSelectorItem">
            <summary>
            The native container type for TransitioningSelector control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelectorItem.SelectedEvent">
            <summary>
            Using a DevComponents RoutedEvent for Selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TransitioningSelectorItem.UnselectedEvent">
            <summary>
            Using a DevComponents RoutedEvent for Unselected.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TransparentWindow">
            <summary>
            A Window which allows mouse events to pass through to underlying windows even in regions which have visible content.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WizardNavigationCallback">
            <summary>
            Delegate should return the item associated with the intended destination page. If null is returned, then navigation is canceled.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.Wizard">
            <summary>
            Encapsulates a Wizard control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.CurrentPageChangedEvent">
            <summary>
            Using a RoutedEvent for CurrentPageChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.BackRequestedEvent">
            <summary>
            Using a RoutedEvent for BackRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.CancelRequestedEvent">
            <summary>
            Using a RoutedEvent for CancelRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.FinishRequestedEvent">
            <summary>
            Using a RoutedEvent for FinishRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.HelpRequestedEvent">
            <summary>
            Using a RoutedEvent for HelpRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.NextRequestedEvent">
            <summary>
            Using a RoutedEvent for NextRequested
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.BackButtonStateProperty">
            <Summary>
            Backing store for BackButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.BackRequestedCallbackProperty">
            <Summary>
            Backing store for BackRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.ButtonContentTemplateProperty">
            <Summary>
            Backing store for ButtonContentTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.CancelButtonContentProperty">
            <Summary>
            Backing store for CancelButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.CancelButtonStateProperty">
            <Summary>
            Backing store for CancelButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.CancelRequestedCallbackProperty">
            <Summary>
            Backing store for CancelRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.CurrentPageProperty">
            <Summary>
            Backing store for current.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.FinishButtonContentProperty">
            <Summary>
            Backing store for FinishButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.FinishButtonStateProperty">
            <Summary>
            Backing store for FinishButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.FinishRequestedCallbackProperty">
            <Summary>
            Backing store for FinishRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.HelpButtonContentProperty">
            <Summary>
            Backing store for HelpButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.HelpButtonStateProperty">
            <Summary>
            Backing store for HelpButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.HelpRequestedCallbackProperty">
            <Summary>
            Backing store for HelpRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.IconTemplateProperty">
            <Summary>
            Backing store for IconTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.MethodInvocationTriggerProperty">
            <Summary>
            Backing store for MethodInvocationTrigger.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.NextButtonContentProperty">
            <Summary>
            Backing store for NextButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.NextButtonStateProperty">
            <Summary>
            Backing store for NextButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.NextRequestedCallbackProperty">
            <Summary>
            Backing store for NextRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Wizard.ResultProperty">
            <Summary>
            Backing store for Result.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overriding to ensure WizardPage is the container type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.GetContainerForItemOverride">
            <summary>
            Overriding to return new WizardPage as container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item. 
            </summary>
            <param name="element">The element that is used to display the specified item.</param><param name="item">The specified item to display.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Overriding to update wizard state when the selected page changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnCurrentPageChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Virtual method called when the value of CurrentPage changes. Raises the CurrentPageChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnBackRequested(DevComponents.WPF.Controls.WizardNavigationRequestEventArgs)">
            <summary>
            Virtual method called to raise the BackRequested event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnNextRequested(DevComponents.WPF.Controls.WizardNavigationRequestEventArgs)">
            <summary>
            Virtual method called to raise the NextRequested event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnCancelRequested(DevComponents.WPF.Controls.WizardEventArgs)">
            <summary>
            Virtual method called to raise the CancelRequested event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnFinishRequested(DevComponents.WPF.Controls.WizardEventArgs)">
            <summary>
            Virtual method called to raise the FinishRequested event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Wizard.OnHelpRequested(DevComponents.WPF.Controls.WizardEventArgs)">
            <summary>
            Virtual method called to raise the HelpRequested event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.Wizard.CurrentPageChanged">
            <summary>
            Bubbling routed event raised when the value of CurrentPage changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.Wizard.BackRequested">
            <summary>
            Bubbling RoutedEvent raised when the Back button is clicked. Use the Destination property of the event args to 
            get or set the object which represents the destination page. Set the event arg's Handled to true to prevent navigation.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.Wizard.CancelRequested">
            <summary>
            Bubbling routed event raised when the Cancel button is clicked. Set event arg's Handled property to true to prevent the cancel.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.Wizard.FinishRequested">
            <summary>
            Bubbling routed event raised when the Finish buttton is clicked. Set arg's Handled property to true to prevent operation.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.Wizard.HelpRequested">
            <summary>
            Bubbling routed event raised when the Help buttton is clicked.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.Wizard.NextRequested">
            <summary>
            Bubbling RoutedEvent raised when the Next button is clicked. Use the Destination property of the event args to 
            get or set the object which represents the destination page. Set the event arg's Handled to true to prevent navigation.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.ExtendParentWindowFrame">
            <summary>
            Set to true to have the frame of the parent window extended into the client area.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.HideParentWindowIconAndTitle">
            <summary>
            Set to true to hide the parent window's icon and title.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.BackButtonState">
            <summary>
            Gets or sets the state of the Back button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.BackRequestedCallback">
            <summary>
            Gets or sets a delegate to be invoked when the back button is clicked. The first parameter is the current page item and the second is the proposed destination page.
            Implementations should return the desired destination page. A return value of null will cause the operation to be canceled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.ButtonContentTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render the content of the Help, Next, Finish and Cancel buttons.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.CancelButtonContent">
            <summary>
            Gets or sets the content of the Cancel button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.CancelButtonState">
            <summary>
            Gets or sets the state of the Cancel button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.CancelRequestedCallback">
            <summary>
            Gets or sets a Predicate callback method which, if set, will be executed when the user clicks the Cancel button.
            The parameter is the current page item. Implementations should return true if the cancel operation should continue, else false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.CurrentPage">
            <summary>
            Gets a reference to the current wizard page.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.FinishButtonContent">
            <summary>
            Gets or sets the content of the finish button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.FinishButtonState">
            <summary>
            Gets or sets the state of the Finish button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.FinishRequestedCallback">
            <summary>
            Gets or sets a Predicate callback method which, if set, will be invoked when the user clicks the Finish button.
            The parameter is the item for the current page. Implementations should return true for the finish operation to continue, false to prevent finishing.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.HelpButtonContent">
            <summary>
            Gets or sets the content of the Help button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.HelpButtonState">
            <summary>
            Gets or sets the state of the help button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.HelpRequestedCallback">
            <summary>
            Gets or sets a callback delegate to be invoked when the Help button is clicked. 
            The parameter is the item of the current page.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.IconTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render the WizardPage Icons.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.MethodInvocationTrigger">
            <summary>
            When set to a value other than None, the cooresponding method will be invoked. After method invokation, the value of this property will be reset to None.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.NextButtonContent">
            <summary>
            Gets or sets the content for the next button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.NextButtonState">
            <summary>
            Gets or sets the state of the Next button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.NextRequestedCallback">
            <summary>
            Gets or sets a delegate to be invoked when the next button is clicked.
            The first parameter will contain the current page item. The second parameter will contain the proposed destination.
            Implementations must return the desired next page item. A null return value will cancel the navigation request.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Wizard.Result">
            <summary>
            Indicates whether the user clicked Cancel (false) or Finish (true).
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButton.CornerRadiusProperty">
            <Summary>
            Backing store for CornerRadius.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButton.DescriptionProperty">
            <Summary>
            Backing store for Description.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButton.DescriptionTemplateProperty">
            <Summary>
            Backing store for DescriptionTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButton.ImageProperty">
            <Summary>
            Backing store for Image.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WizardButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardButton.CornerRadius">
            <summary>
            Gets or sets the corner radius. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardButton.Description">
            <summary>
            Gets or sets a description for the wizard button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardButton.DescriptionTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render Description.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardButton.Image">
            <summary>
            Gets or sets the image.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.BackRequestedEvent">
            <summary>
            Using a RoutedEvent for BackRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.CancelRequestedEvent">
            <summary>
            Using a RoutedEvent for CancelRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.FinishRequestedEvent">
            <summary>
            Using a RoutedEvent for FinishRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.HelpRequestedEvent">
            <summary>
            Using a RoutedEvent for HelpRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.NextRequestedEvent">
            <summary>
            Using a RoutedEvent for NextRequested
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.BackButtonStateProperty">
            <Summary>
            Backing store for BackButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.BackRequestedCallbackProperty">
            <Summary>
            Backing store for BackRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.CancelButtonContentProperty">
            <Summary>
            Backing store for CancelButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.CancelButtonStateProperty">
            <Summary>
            Backing store for CancelButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.CancelRequestedCallbackProperty">
            <Summary>
            Backing store for CancelRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.FinishButtonContentProperty">
            <Summary>
            Backing store for FinishButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.FinishButtonStateProperty">
            <Summary>
            Backing store for FinishButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.FinishRequestedCallbackProperty">
            <Summary>
            Backing store for FinishRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.HelpButtonContentProperty">
            <Summary>
            Backing store for HelpButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.HelpButtonStateProperty">
            <Summary>
            Backing store for NextButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.HelpRequestedCallbackProperty">
            <Summary>
            Backing store for HelpRequestedCallback.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.IconProperty">
            <Summary>
            Backing store for Icon.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.IconTemplateProperty">
            <Summary>
            Backing store for IconTemplate.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.NextButtonContentProperty">
            <Summary>
            Backing store for NextButtonContent.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.NextButtonStateProperty">
            <Summary>
            Backing store for NextButtonState.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardPage.NextRequestedCallbackProperty">
            <Summary>
            Backing store for NextRequestedCallback.
            </Summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.WizardPage.BackRequested">
            <summary>
            Bubbling RoutedEvent raised when the Back button is clicked. Use the Destination property of the event args to 
            get or set the object which represents the destination page. Set the event arg's Handled to true to prevent navigation.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.WizardPage.CancelRequested">
            <summary>
            Bubbling routed event raised when the Cancel button is clicked. Set event arg's Handled property to true to prevent the cancel.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.WizardPage.FinishRequested">
            <summary>
            Bubbling routed event raised when the Finish buttton is clicked. Set arg's Handled property to true to prevent operation.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.WizardPage.HelpRequested">
            <summary>
            Bubbling routed event raised when the Help buttton is clicked.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.WizardPage.NextRequested">
            <summary>
            Bubbling RoutedEvent raised when the Next button is clicked. Use the Destination property of the event args to 
            get or set the object which represents the destination page. Set the event arg's Handled to true to prevent navigation.
            The event arg's current property will contain reference to the object which represents the current page.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.BackButtonState">
            <summary>
            Gets or sets the state of the Back button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.BackRequestedCallback">
            <summary>
            Gets or sets a delegate to be invoked when the back button is clicked and this page is the current wizard page.
            The first parameter is the current page item and the second parameter is the proposed destination page.
            Implementations should return the desired destination page. A return value of null will cause the operation to be canceled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.CancelButtonContent">
            <summary>
            Gets or sets the content of the Cancel button when this page is active. 
            If unset, then the value is inherited from the parent Wizard property of the same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.CancelButtonState">
            <summary>
            Gets or sets the state of the Cancel button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.CancelRequestedCallback">
            <summary>
            Gets or sets a Predicate callback method which, if set, will be executed when the user clicks the Cancel button and this page is the wizard's current page.
            The parameter is the current page item. Implementations should return true if the cancel operation should continue, else false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.FinishButtonContent">
            <summary>
            Gets or sets the content of the finish button when this page is active. 
            If unset, then the value is inherited from the parent wizard property of same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.FinishButtonState">
            <summary>
            Gets or sets the state of the Finish button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.FinishRequestedCallback">
            <summary>
            Gets or sets a delegate which is invoked when the user clicks the Finish button, or finish is otherwise requested, and this page is the current wizard page.
            The parameter is the item for the current page. Implementations should return true for the finish operation to continue, false to prevent finishing.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.HelpButtonContent">
            <summary>
            Gets or sets the content of the Help button when this page is active.
            If unset, then the value is inherited from the parent wizard property of same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.HelpButtonState">
            <summary>
            Gets or sets the state of the Next button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.HelpRequestedCallback">
            <summary>
            Gets or sets a callback delegate to be invoked when the Help button is clicked and this page is the wizard's current page.
            The parameter is the item of the current page.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.Icon">
            <summary>
            Gets or sets the icon for this page.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.IconTemplate">
            <summary>
            Gets or sets a DataTemplate which shows how to render Icon.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.NextButtonContent">
            <summary>
            Get or set the content of the next button when this page is active. Default is to inherit the value from the parent Wizard.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.NextButtonState">
            <summary>
            Gets or sets the state of the Next button. Possible values are Auto, Enabled, Disabled and Hidden. Default is Auto. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardPage.NextRequestedCallback">
            <summary>
            Gets or sets a delegate to be invoked when the next button is clicked and this page is the current wizard page.
            The first parameter will contain the current page item. The second parameter will contain the proposed destination.
            Implementations must return the desired next page item. A null return value will cancel the navigation request.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdditionConverter">
            <summary>
            A value converter which adds an amount specified in parameter to the input value. Parameter shuould be convertable to double. 
            The target Type may be double, int, Thickness, CornerRadius, Point, Size, Rect, or any type which exposes an Add operation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdditionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Performs conversion. parameter should hold a value as multiplier which can be parsed into a double. If value Type supports the
            multiplication operator, it is invoked. Otherwise, certain types are wired in, including: Thickness, CornerRadius, Point, Rect.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BrushOpacityConverter">
            <summary>
            Converts a Brush into an identical Brush, with an Opacity value defined by the parameter.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BrushOpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform conversion.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BorderWidthToRoundCornerConverter">
            <summary>
            Given a value representing the width of one side of a border, and in parameter either Top, Right, Bottom, Left,
            return a CornerRadius which if applied to said border results in a perfectly rounded end.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ValueToVisibilityGTEConverter">
            <summary>
            Returns Visiblility.Visible if parameter is a number greater than or equal to value.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ValueToBooleanGTEConverter">
            <summary>
            Returns True if parameter is a number greater than or equal to value.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.NormalizedValueToPointOnCircleConverter">
            <summary>
            Converts an angle in degrees to a point on an ellipse. The ellips's radius must be provided as parameter, 
            as a set of x,y values.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RadiusToCircumferenceConverter">
            <summary>
            Converts a radius to a circumference using C = 2piR. Optionally provide double in parameter for multiple of circumference.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DoubleWithAutoTypeConverter">
            <summary>
            Extends DoubleConverter by converting the string "Auto" to NaN.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.HueOffsetColorConverter">
            <summary>
            Converts an RGB color value by first converting it to an HSV color and shifting the Hue component by a value specified in parameter
            then returning the result as a new RGB value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HueOffsetColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform converstion.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HueOffsetColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.HueToColorValueConverter">
            <summary>
            A value converter which converts a Hue value (ranging from 0 to 360) to a color using the Hsv color system.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvToolBarPanel">
            <summary>
            Panel specifically designed for the items contained by AdvToolBar.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvToolBarPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to perform custom measuring.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvToolBarPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to perform custom arrangement.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BrushControl">
            <summary>
            Defines a control for editing Brushes. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BrushControl.#ctor">
            <summary>
            Default contstructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.ActiveColorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ActiveColor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.BrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for Brush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.ColorControlProperty">
            <summary>
            Using a Read Only DependencyProperty as the backing store for ColorControl.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.ColorControlStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColorControlStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.ModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Mode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.GradientStopOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for GradientStopPosition.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushControl.ShowStandardColorSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowStandardColorSelector.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BrushControl.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BrushControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding to enable Delete Key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.ActiveGradientStops">
            <summary>
            Access to the collection of gradient stops of the current gradient brush.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.ActiveColor">
            <summary>
            The color selected by the internal ColorControl.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.Brush">
            <summary>
            Get or Set the current Brush.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.ColorControl">
            <summary>
            Gets a reference to the embedded ColorControl. The ColorControl's properties can be modified through this property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.ColorControlStyle">
            <summary>
            Get or set a Style which is applied to the embedded ColorControl.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.Mode">
            <summary>
            Get or Set the Mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.ShowStandardColorSelector">
            <summary>
            Get or set whether the user can select one of the standard colors from System.Windows.Media.Colors via a combo box.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BrushControl.GradientStopWrapper">
            <summary>
            Implements a Wrapper, or Proxy, for a GradientStop. An observable collection of these is
            used as ItemsSource for the ListBox which is used to present the GradientStops in the view.
            Note: This class would be marked internal or private if not required to be public for binding to work.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.BrushControl.GradientStopWrapper.PropertyChanged">
            <summary>
            Implements INotifyPropertyChanged
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.GradientStopWrapper.Offset">
            <summary>
            Gets or Sets the GradientStop's Offset.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.GradientStopWrapper.Position">
            <summary>
            Gets or Sets the position in the UI.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.GradientStopWrapper.Color">
            <summary>
            Get or Set the GradientStop's Color.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushControl.GradientStopWrapper.IsSelected">
            <summary>
            Gets or Sets whether the item is selected.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColorControl">
            <summary>
            A control for editing/selecting color values.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.ColorChangedEvent">
            <summary>
            Using RoutedEvent as backing for ColorChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.AutoToolTipOptionProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoToolTipOption.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.ColorBlenderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColorBlender.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.ColorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Color.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.ShowAlphaSliderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAlphaSlider.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.ShowRGBSlidersProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowRGBSliders.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorControl.ShowARGBTextEditProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowARGBTextEdit.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColorControl.OnColorChanged(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Virtual method called when the value of Color changes. Base implementation raises the ColorChanged routed event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColorControl.ColorChanged">
            <summary>
            Event raised when the value of Color changes. This is a routed event with routing strategy Bubble.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColorControl.ColorBlender">
            <summary>
            Get or set the type of color "blender" used.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColorControl.Color">
            <summary>
            Get or Set the Color.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColorControl.ShowAlphaSlider">
            <summary>
            Get or set whether the Alpha slider is shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColorControl.ShowRGBSliders">
            <summary>
            Get or set whether the RGB sliders are shown. Default is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColorControl.ShowARGBTextEdit">
            <summary>
            Get or set whether the edit boxes for ARGB values are shown.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RelayCommand.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            Creates a new command that can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="parameter">Optional parameter for execution logic.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object},System.Object)">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <param name="parameter">Optional parameter for the execute method.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.RelayCommand.FireCanExecuteChanged">
            <summary>
            Fires the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RelayCommand.CanExecute(System.Object)">
            <summary>
            Returns true if the command can execute.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.RelayCommand.Execute(System.Object)">
            <summary>
            Execute the command logic.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.RelayCommand.Parameter">
            <summary>
            If Parameter is set, Execute will send the value as the parameter.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.RelayCommand.CanExecuteChanged">
            <summary>
            Event raised when the value of CanExecute MIGHT have changed.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPickerValue.Value">
            <summary>
            Get or Set the value of the static property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPickerValue.DisplayName">
            <summary>
            Get or Set the display name for the property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPickerValue.Name">
            <summary>
            Get or Set the property name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPickerValue.IsSelected">
            <summary>
            Get or Set whether the value is selected.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvToolBar">
            <summary>
            Implementation of a ToolBar with advanced features, including: 
               Ability to stretch the width of item to fill remaining available space.
               Ability to hide the overflow button if not used.
               Ability to display custom elements in drop down, just above the overflow items.
            AdvToolBar inherits from System.Windows.Controls.ToolBar.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvToolBar.AlwaysShowOverflowButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlwaysShowOverflowButton.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvToolBar.CornerRadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for CornerRadius.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvToolBar.CustomObjectProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomObject.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvToolBar.CustomObjectTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomObjectTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvToolBar.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvToolBar.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvToolBar.AlwaysShowOverflowButton">
            <summary>
            Get or Set whether the overflow button is always shown, that is, is the overflow button shown even when there are
            no overflow items to show. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvToolBar.CornerRadius">
            <summary>
            Get or Set the corner radius for the tool bar. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvToolBar.CustomObject">
            <summary>
            Get or Set an object which is displayed as content of a ContentPresenter in the overflow 
            drop down.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvToolBar.CustomObjectTemplate">
            <summary>
            Get or Set an optional data template which is used to display the CustomObject, if set.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectableItemBox">
            <summary>
            A list box which uses SelectableItem as container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItemBox.GetContainerForItemOverride">
            <summary>
            Overriding to return SelectableItem.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectableItem">
            <summary>
            Implements a control which selects itself when clicked on and highlights itself when the mouse is over it
            or when its IsHighlighted property is set to true. Derives from ListBoxItem.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectableItem.IsHighlightedChangedEvent">
            <summary>
            Using a DependencyProperty as the backing store for IsHighlightedChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectableItem.ClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectableItem.IsHighlightedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsHighlighted.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectableItem.ToggleIsSelectedOnClickProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToggleIsSelectedOnClick.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectableItem.OnIsHighlightedChanged">
            <summary>
            Virtual method called to raise the IsHighlightedChanged event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.SelectableItem.IsHighlightedChanged">
            <summary>
            Event raised when the value of IsHighlighted changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectableItem.ClickMode">
            <summary>
            Get or set whether items are selected in response to MouseDown or MouseUp event.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectableItem.IsHighlighted">
            <summary>
            Get or set whether the item is highlighted. By default, IsHighlighted is set to true when the mouse is over the control,
            and is otherwise false. This is a dependeny property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectableItem.ToggleIsSelectedOnClick">
            <summary>
            Get or set whether IsSelected is toggled on click. If false, a click always results in setting IsSelected = true. The default value is false. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectableItem.ParentItemsControl">
            <summary>
            Access the parent ItemsControl.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.StaticMemberPicker">
            <summary>
            A Selector which automatically populates itself with items based on static members of a particular Type, belonging to a specific Class.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.KnownClassTypes">
            <summary>
            A static readonly dictionary of the known class types (value) which define the possible values of a givin type (key).
            Items can be added at run time to enable support for types which are not present by default.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.BindingFlagsProperty">
            <summary>
            Using a DependencyProperty as the backing store for BindingFlags.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.ClassTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClassType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.EmulationModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for EmulationMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.MemberTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.StaticMemberPicker.ValueStringProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueString.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPicker.BindingFlags">
            <summary>
            Get or Set the binding flags used to generate the list of properties from the ClassType. The default is BindingFlags.Public | BindingFlags.Static
            This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPicker.ClassType">
            <summary>
            Get or Set the Type of the class which defines the static members to be listed.
            If unset, then the static dictionary KnownClassTypes is searched using MemberType as Key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPicker.EmulationMode">
            <summary>
            Get or Set whether the EnumPicker emulates a combo box or a list box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPicker.MemberType">
            <summary>
            Get or Set the Type of the property or class member. If this value is unset, it will be infered from the value of Value if set.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPicker.Value">
            <summary>
            Gets or Sets the currently selected value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.StaticMemberPicker.ValueString">
            <summary>
            Get or set the string representation of Value.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IsNullOrEmptyStringToBooleanConverter">
            <summary>
            A value converter which returns true if the input value is null or is an empty string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.IsNullOrEmptyStringToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform convertion.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IsNullOrWhiteSpaceStringToBooleanConverter">
            <summary>
            A value converter which returns true if the input value is null or is a string with only white space.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.IsNullOrWhiteSpaceStringToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform convertion.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.LessThanConverter">
            <summary>
            A value converter for determining if the given value is less than a known value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevComponents.WPF.Controls.LessThanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" -->
        <member name="T:DevComponents.WPF.Controls.LessThanEqualConverter">
            <summary>
            A value converter for determining if the given value is less or equal to a known value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevComponents.WPF.Controls.LessThanEqualConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" -->
        <member name="T:DevComponents.WPF.Controls.GreaterThanConverter">
            <summary>
            A value converter for determining if the given value is greater than a known value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.GreaterThanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns true if value > parameter and both convert successfully to double.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.GreaterThanEqualConverter">
            <summary>
            A value converter for determining if the given value is greater than or equal to a known value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.GreaterThanEqualConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns true if value >= parameter and both convert successfully to double.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.NullableToBooleanConverter">
            <summary>
            Value converter which returns true if the value is not null, false if the falue is null. Optionally,
            a non null value for parameter may be set which results in reversal of logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.NullableToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform convertion.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ObjectIsTypeOfToBooleanConverter">
            <summary>
            Value Converter for determining whether an object's type is of a givin type. Target type is passed in parameter. 
            Returns True if the Type of object value is equal to parameter.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ObjectIsTypeOfToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Return true if value type is equal to parameter, if parameter is a Type, or if value type is equal to the type of the object held by parameter.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ReverseHorizontalAlignmentConverter">
            <summary>
            A value converter for HorizontalAlignment which returns the reverse of the input value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseHorizontalAlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns Left for input of Right, Right for input of Left. If parameter is null, does not change Center or Stretch.
            If parameter is non-null, reverses Stretch and Center.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseHorizontalAlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Optional ConvertBack. Not Implemented.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ReverseVerticalAlignmentConverter">
            <summary>
            A value converter for VerticalAlignment which returns the reverse of the input value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseVerticalAlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns Top for input of Bottom, Bottom for input of Top. If parameter is null, does not change Center or Stretch.
            If parameter is non-null, reverses Stretch and Center.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseVerticalAlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Optional ConvertBack. Not Implemented.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PointToSizeConverter">
            <summary>
            Converts a Point value to an equivalent Size value and visa-versa.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PointToSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Point to Size.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PointToSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Size to Point.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SizeToPointConverter">
            <summary>
            Converts a Size to an equivalent Point.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SizeToPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Size to Point.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SizeToPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Point to Size.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SizeToCenterPointConverter">
            <summary>
            Converts a Size to a Point where the point represents the center of the Size.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SizeToCenterPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Size to a Point where the point represents the center of the Size.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SizeToCenterPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Point to Size where the Point is taken to be the center of the Size.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DoubleToPointConverter">
            <summary>
            Converts a double to a Point with equal values for X and Y, or, if parameter is X, Y becomes 0 and visa versa.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoubleToPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Double to Point.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoubleToPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Point to Double, using only the Point's X value, or is parameter is Y, return point.Y.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DoubleToSizeConverter">
            <summary>
            Converts a double to a Size with equal values for Width and Height.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoubleToSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Double to Size.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoubleToSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Size to Double, using the Width of the size.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DoublesToRectMultiConverter">
            <summary>
            Takes an array of doubles and returns a Rect.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoublesToRectMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform conversion.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoublesToRectMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implimented.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ThicknessToThicknessConverter">
            <summary>
            ValueConverter for obtaining a Thickness from specified parts of another Thickness. Parameter can be a Thickness or a string which parses into a Thickness.
            Alternatively, parameter can be a string containing one or all of 'Left', 'Right', 'Top' and 'Bottom', separated by commas. The negation indicator ('-') may precede any of them.
            It is also possible to shift edges, for example use the Top edge of input as Bottom edge of output whith token that begins with 'Top' and ends with 'Bottom'.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ThicknessToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform conversion
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DragHandler">
            <summary>
            Abstract base class from which all drag handlers for DragDrop must derive.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.GetDragHandlerFor(System.Windows.UIElement,System.Windows.DependencyObject)">
            <summary>
            Static factory method for getting a DragHandler appropriate for the specific drag source.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.RemoveDataFromSource">
            <summary>
            Virtual method called when a drop occurs and the DragSource has attached property DragDrop.DropAction == Move.
            Inheritors should override and remove the data from the original source. Base implementation does nothing.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.CreateAdorner">
            <summary>
            Virtual method to obtain the DragAdorner for this drag operation. Inheritors can override to provide custom adorner.
            The default implementation returns an instance of TemplatedDragAdorner if the drag source has custom Adorner Template 
            defined via attached property DragDrop.DragAdornerTemplate. Otherwise it returns null.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.CreateAdorner(System.Windows.UIElement)">
            <summary>
            Virtual method to obtain the DragAdorner for this drag operation. Inheritors can override to provide custom adorner.
            The default implementation returns an instance of TemplatedDragAdorner if the drag source has custom Adorner Template 
            defined via attached property DragDrop.DragAdornerTemplate. Otherwise it returns null.
            </summary>
            <param name="adornedElement">Should be used as the adorned element for newly created Adorner.</param>
            <returns>A newly created Adorner which implements the IDragDropAdorner interface.</returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.OnDragComplete">
            <summary>
            Virtual method called when the drag operation is completed. 
            Overriders should always call base implementation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.ShowAdorner(System.Windows.DragEventArgs)">
            <summary>
            Creates the Adorner if necessary and then sets its position.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragHandler.RemoveAdorner">
            <summary>
            Removes the drag adorner by calling its Detach() method and Setting DragAdorner property to Null.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.DragHandler.DragComplete">
            <summary>
            Fired when the drag is completed.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragHandler.Data">
            <summary>
            Abstract property. Inheritors should return a reference to the data object being transfered.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragHandler.DragInProcess">
            <summary>
            Gets a boolean indicating whether a drag operation is in progress.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragHandler.DragAdorner">
            <summary>
            Provides access to the adorner. This value will be null when the Adorner is not being shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragHandler.OriginalDragSource">
            <summary>
            Get the original source of the mouse move event which started the drag operation.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragHandler.ActiveDropHandler">
            <summary>
            Gets the DropHandler currently active for the ongoing drag operation.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragHandler.DragSource">
            <summary>
            Gets the source of the drag operation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridDragHandler.RemoveDataFromSource">
            <summary>
            Overriding to perform special handling for AdvTree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridDragHandler.Data">
            <summary>
            Overriding abstract property to return data attached to node being dragged.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridDragHandler.SourceRow">
            <summary>
            Access to the Node from which the drag operation began.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvGridDropHandler">
            <summary>
            Implementation of a DropHandler for Drag Drop into an AdvTree. Inherits from ItemsControlDropHandler. An instance of this class is used as DropHandler for the
            DragDrop utility when the registered drop target is an AdvTree and there is no override specified via DragDrop.DropHandler attached property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DropHandler">
            <summary>
            Abstract class from which all drop handlers used by DragDrop must derive.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.GetDropHandlerFor(System.Windows.UIElement,DevComponents.WPF.Controls.DragHandler)">
            <summary>
            A static factory method for getting a DropHandler appropriate for the specified drop target.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.CanDrop(System.Windows.Point)">
            <summary>
            Abstract method. Inheritors should return a boolean indicating whether a drop is allowed at the indicated position.
            The position is relative to the DropTarget element.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.DoDrop(System.Windows.Point)">
            <summary>
            Abstract method. Inheritors should perform the drop at the indicated position. Position is 
            relative to the DropTarget.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.UpdateAdorner(System.Windows.Point)">
            <summary>
            Abstract method. Inheritors should update the adorner as appropriate. 
            The value of mousePosition is a Point, relative to the DropTarget.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.Abort">
            <summary>
            Aborts the operation for this drop target.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.UpdateVisualCue(System.Windows.Point)">
            <summary>
            Virtual method called as the mouse is dragged over the drop target. Default implementation
            attempts to scroll if needed and if not either shows/updates the adorner if CanDrop returns true
            or removes the adorner if not. Returns appropriate DragDropEffects which is then set as value of 
            DragEventArgs.Effects on the event args associated with DropTarget's DragOver event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.CreateAdorner">
            <summary>
            Virtual method called to create the DropAdorner for the drop target.
            Default implementation returns an instance of TemplatedDropAdorner if the drop target
            has a value for attached property DragDrop.DropAdornerTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.ShowAdorner(System.Windows.Point)">
            <summary>
            Ensures DropAdorner is created and if exists, calls UpdateAdorner.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.RemoveAdorner">
            <summary>
            Removes the Drop Adorner by calling its Detach method.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.DoScroll(System.Windows.Point)">
            <summary>
            Virtual method called while dragging to perform scroll if necessary. Return value should be
            true if scrolling was performed. Default implementation does nothing and returns false.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.OnDragComplete">
            <summary>
            Virtual method called when the drag source leaves the drop target. 
            Default implementation cleans up by removing the adorner, removing event handlers and nulling out
            Active drag handler's ActiveDropHandler property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.OnDropping(DevComponents.WPF.Controls.DragDropRoutedEventArgs)">
            <summary>
            Virtual method called to raise the DragDrop.Dropping attached event on the drop target. 
            Set args Handled to true to prevent the drop.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DropHandler.OnDropped(DevComponents.WPF.Controls.DragDropRoutedEventArgs)">
            <summary>
            Virtual method called to raise the DragDrop.Dropped attached event on the drop target.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DropHandler.DropTarget">
            <summary>
            Get a reference to the UIElement which is source of drag enter event and is the drop target.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DropHandler.ActiveDragHandler">
            <summary>
            Get a reference to the DragHandler which began and is maintaining the drag operation.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DropHandler.Data">
            <summary>
            Get a reference to the data being transfered.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DropHandler.DropAdorner">
            <summary>
            Get a reference to the DropAdorner for this drop target, if there is one. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridDropHandler.OnDragComplete">
            <summary>
            Overriding to ensure scrolling is stopped when operation completes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridDropHandler.CanDrop(System.Windows.Point)">
            <summary>
            Overriding to determine whether the current drag data can be dropped into the target Tree
            at the indicated location.
            </summary>
            <param name="mousePosition">Location of the mouse at time method is called, relative to the tree view.</param>
            <returns>True if a drop is allowed.</returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridDropHandler.DoDrop(System.Windows.Point)">
            <summary>
            Overriding to perform custom drop logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridDropHandler.CreateAdorner">
            <summary>
            Overriding to create a new InsertionAdorner if base implementation returns null.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvGridDropHandler.UpdateAdorner(System.Windows.Point)">
            <summary>
            Overriding to display the correct adorner for the indicated mouse position.
            </summary>
            <param name="mousePosition">The current mouse position, relative to the target tree veiw.</param>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvGridDropHandler.Grid">
            <summary>
            Get the target AdvTree.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColumnEventArgs">
            <summary>
            Event args which carry a ColumnDefinition type property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnEventArgs.#ctor(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnEventArgs.Column">
            <summary>
            The ColumnDefinition of the affected column.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.InitializingNewItemEventHandler">
            <summary>
            Event handler for the InitializingNewItem routed event.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.InitializingNewItemEventArgs">
            <summary>
            Event args for the InitializingNewItem routed event. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.InitializingNewItemEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InitializingNewItemEventArgs.NewItem">
            <summary>
            Get or set the new item before it has been added to the collection. Value may be null, in which case
            handlers should set it to an instance of the appropriate type.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.NewItemAddedEventHandler">
            <summary>
            Event handler for the NewItemAdded routed event.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.NewItemAddedEventArgs">
            <summary>
            Event args for the NewItemAdded routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.NewItemAddedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NewItemAddedEventArgs.NewItem">
            <summary>
            Gets a reference to the new item.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WeakEventSource`1">
            <summary>
            Replaces a multicast delegate as an event's backing store. Duplicate behavior, except it is thread safe and holds weak references.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardEventArgs.CurrentPage">
            <summary>
            Gets a reference to the current page item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.WizardNavigationRequestEventArgs.Destination">
            <summary>
            Get or set the destination page item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DispatcherExtensions.ScheduleInvoke(System.Windows.Threading.Dispatcher,System.Delegate,System.Object[])">
            <summary>
            Scheduals a method invocation, allowing for multiple calls with same parameters but only a single invokation.
            First time called with specif dispatcher and delegate, the dispatcher's BeginInvoke method is called and the
            dispatcher operation returned. If called a second time before the operation has completed, nothing is done and null is returned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DispatcherExtensions.SchedualInvoke(System.Windows.Threading.Dispatcher,System.TimeSpan,System.Delegate,System.Object[])">
            <summary>
            Scheduals a method invocation, allowing for multiple calls with same parameters but only a single invokation.
            First time called with the specific dispatcher and delegate, a dispatcher timer is started with the specified wait interval and
            BeginInvoke is called on the dispatcher with a priority of InActive. When the timer ticks, the dispatcher operation's priority is set to Normal.
            If called a second time before the operation has completed, nothing is done and null is returned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DispatcherExtensions.SchedualInvoke(System.Windows.Threading.Dispatcher,System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Scheduals a method invocation, allowing for multiple calls with same parameters but only a single invokation.
            First time called with specific dispatcher and delegate, the dispatcher's BeginInvoke method is called and the
            dispatcher operation returned. If called a second time before the operation has completed, nothing is done and null is returned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the index of value within the enumeration, or -1 if value is not in the list.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumerableExtensions.GetItemAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the item at the zero based index of the enumerable, or null if the index is out of range.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumerableExtensions.HasItems(System.Collections.IEnumerable)">
            <summary>
            Returns true if the enumerable has items.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumerableExtensions.HasItems``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns true if the enumerable has items.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Counts the number of items in the enumerable.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ObjectExtensions.ToDouble(System.Object)">
            <summary>
            Returns the object converted to a double, if possible. 
            If not possible, throws either InvalidCastException, FormatException, OverflowException or ArgumentNullException.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ObjectExtensions.ToString(System.Object,System.String)">
            <summary>
            Returns a formatted string representation of the object.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.StringExtensions.IsNumber(System.String,System.Globalization.NumberStyles,System.Globalization.CultureInfo,System.String,System.Boolean)">
            <summary>
            Returns true if the string can be parsed into a number.
            </summary>
            <param name="str">The string to check</param>
            <param name="style">The NumberStyles used in TryParse method.</param>
            <param name="format">Optional format string that was used to obtain the input string. Used to trim non-numeric characters from the start and end of the input string.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.StringExtensions.IsNumber(System.String,System.Boolean,System.String)">
            <summary>
            Returns true if the string can be parsed into a number.
            </summary>
            <param name="str">The string to check</param>
            <param name="integer">If true, then the input string must represent an integer value.</param>
            <param name="format">Optional format string that was used to obtain the input string. Used to trim non-numeric characters from the start and end of the input string.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.StringExtensions.IsNumber(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            Returns true if the input string represents a number. If a value of true is returned, method ToNumber can be called to get the actual number.
            </summary>
            <param name="str">The string to test</param>
            <param name="numberType">The specific Type to which the value should be parsable.</param>
            <param name="format">Optional format string that was used to obtain the input string. Used to trim non-numeric characters from the start and end of the input string.</param>
            <param name="allowEmpty">If true, empty str will result in true return value.</param>
            <returns>True if the string can be parsed into a number.</returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.StringExtensions.ToNumber``1(System.String,System.String)">
            <summary>
            Parses a string to return a number of type T.
            </summary>
            <param name="str">The string to convert</param>
            <param name="format">Optional format string that was used to format a number to produce the input string. 
            Used to trim non-numeric characters from the beginning and end of the input string.</param>
            <returns>A number of type T</returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.StringExtensions.ToNumber(System.String,System.Type,System.String)">
            <summary>
            Returns the string converted to a number of the specified type, or null if the string is invalid.
            </summary>
            <param name="str">The string to convert</param>
            <param name="numberType">The numeric Type to which the string will be converted</param>
            <param name="format">Optional format string that was used to format a number to produce the input string. 
            Used to trim non-numeric characters from the beginning and end of the input string.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.HslColor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HslColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct with values for h, s and v.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HslColor.ToRgb">
            <summary>
            Convert the instance of HsvColor to an instance of Color.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HslColor.FromRgb(System.Windows.Media.Color)">
            <summary>
            Convert a standard Color to an HsvColor
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HslColor.FromRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an HslColor instance from provided RGB values.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HslColor.ToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Creates a Color from provided HSL values. h is between 0 and 360, s and l are between 0 and 1.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.HslColor.H">
            <summary>
            Get or set the Hue component of the color. This is a value from 0 to 360.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.HslColor.S">
            <summary>
            Get or set the Saturation component of the color. This is a value from 0 to 1.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.HslColor.L">
            <summary>
            Get or set the Value component of the color. This is a value from 0 to 1.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IItemsProvider">
            <summary>
            Defines the interface for an object that is used by the VirtualizingCollection as a means of obtaining the collection Count and Items.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.IItemsProvider.GetRange(System.Int32,System.Int32)">
            <summary>
            Return a range of items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.IItemsProvider.HasItems">
            <summary>
            Return true if there are any items in the collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.IItemsProvider.Count">
            <summary>
            Return the total number of items. 
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CollectionEditorDescriptor">
            <summary>
            Implementation of an editor descriptor for collections.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DialogWindowEditorDescriptor">
            <summary>
            Implementation of an editor descriptor for support of dialog window based editors.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EditorDescriptor">
            <summary>
            Serves as default editor descriptor and is base class for more type and/or property specific editor descriptors.
            An editor descriptor provides a means of adding extended attributes to the property editor which are not 
            defined on the PropertyGridEditor control itself. Property grid editor control templates can bind to properties
            of the editor descriptor (via editor's DataContext, which is an instance of PropertyGridProperty. PropertyGridProperty
            has a property named EditorDescriptor.) Editor descriptors can be applied directly on properties themselves as Attributes. 
            Alternatively, a property definition carries an editor descriptor property which is settable in Xaml. The default set of Editor 
            Descriptors is defined via property DefaultEditorDescriptors of the parent PropertyGrid. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EditorDescriptor._ToStringValueConverter">
            <summary>
            Making protected so derived classes can set from constructor without calling the property setter which is virtual.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorDescriptor.#ctor(System.Boolean)">
            <summary>
            Construct with value for EnableInCellEditing.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Return the Style to apply to the PropertyGridEditor embedded in the property grid item.
            Default implementation returns null.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorDescriptor.PrepareEditor(DevComponents.WPF.Controls.PropertyGridEditor)">
            <summary>
            Provides an opportunity to customize the editor control itself.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptor.ToStringValueConverter">
            <summary>
            Supplies the ValueConverter used in the binding of the editor's ValueString property.
            Base implementation returns an instance of PropertyToStringValueConverter by default.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptor.EnableInCellEditing">
            <summary>
            Determines whether the value will be editable in the editor's text box. Note that not all editor's 
            will necessarily use this property, though most should. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptor.CommitOnValueChanged">
            <summary>
            Determines whether the underlying property value is updated when property changes. Default is 
            to update property when editor loses focus or user presses enter key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptor.NullValueDisplayString">
            <summary>
            Get or set the display string for Nullable properties for which HasValue returns false.
            By default returns value of static property DefaultNullValueDisplayString.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptor.DisplayMemberPath">
            <summary>
            Get or set a property path to the property which should be used as the display string.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptor.StringFormat">
            <summary>
            Provides an optional format string for the value displayed in the editor 
            (i.e. the value string displayed in row with the property's name.)
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Returns the Style resource identified by the component resource key PropertyGridEditor.DefaultCollectionEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.ToStringValueConverter">
            <summary>
            Gets a specialized value converter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.DialogWindowType">
            <summary>
            Specifies the Type of window which is created and opened for the dialog.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.Text">
            <summary>
            Define a custom string to be displayed in the property's value cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.Title">
            <summary>
            Specify a string to use for Title of the dialog window.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.WindowIcon">
            <summary>
            Specify an image source for window's icon.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.WindowHeight">
            <summary>
            Specifies an initial window height.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DialogWindowEditorDescriptor.WindowWidth">
            <summary>
            Specifies an initial window width.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditorDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditorDescriptor.#ctor(System.Type[])">
            <summary>
            Construct with array of NewItemTypes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Returns the Style resource identified by the component resource key PropertyGridEditor.DefaultCollectionEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorDescriptor.NewItemTypes">
            <summary>
            Provide an optional array of Types which are presented to user as possible new items.
            Note: not generic to accommodate Xaml.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorDescriptor.ShowPropertyGridReadOnlyProperties">
            <summary>
            Determines whether the collection editor's property grid shows read-only properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorDescriptor.ShowPropertyGridSubProperties">
            <summary>
            Determines whether the collection editor's property grid should show sub properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorDescriptor.ShowPropertyGridHelpPanel">
            <summary>
            Determines whether the collection editor's property grid should show the help panel.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorDescriptor.ShowPropertyGridSearchBox">
            <summary>
            Determines whether the collection editor's property grid should show the search box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditorDescriptor.IsCollectionEditorReadOnly">
            <summary>
            Determines whether the collection editor is in read-only mode.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridCollectionEditor">
            <summary>
            Interaction logic for PropertyGridCollectionEditor.xaml
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ConeEffect">
            <summary>
            Shader effect for creating a cone effect. For example, with default value, a linear gradient brush
            is transformed into a circular gradient, with the two ends of the gradient circling around and meating each other.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ConeEffect.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ConeEffect.InputProperty">
            <summary>
            Using a dependency property as backing store for Angle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ConeEffect.CenterProperty">
            <summary>
            Using a dependency property as backing store for Center.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ConeEffect.AngleProperty">
            <summary>
            Using a dependency property as backing store for Angle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ConeEffect.MaxSampleAngleProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxSampleAngle.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ConeEffect.Input">
            <summary>
            Input.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ConeEffect.Center">
            <summary>
            The center of the effect.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ConeEffect.Angle">
            <summary>
            The start angle.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.UriExtensions">
            <summary>
            Exports extensions related to Uri
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UriExtensions.MakePackUri(System.String)">
            <summary>
            Creates a Pack Uri from a givin file name, specified relative to the component root.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.InvertColorEffect">
            <summary>An effect that inverts all colors.</summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.InvertColorEffect.InputProperty">
            <summary>
            Using a dependency property as backing store for Input.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InvertColorEffect.Input">
            <summary>
            Input.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ButtonResources">
            <summary>
            ButtonResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ButtonResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectorResources">
            <summary>
            Code-Behind for Windows.Controls.ComboBox visual styling resources.
            </summary>
            <summary>
            SelectorResources
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectorResources.TabItemSpacingKey">
            <summary>
            For spacing between tab items, because TabItem Margin doesn't work correctly inside TabPanel.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectorResources.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectorResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MenuResources">
            <summary>
            MenuResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MenuResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.Office2013ScrollViewerStyle">
            <summary>
            Office2013ScrollViewerStyle
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2013ScrollViewerStyle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.Office2016VisualStyleResources">
            <summary>
            Office2016VisualStyleResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2016VisualStyleResources.ApplyStyleSkinColor(DevComponents.WPF.Controls.VisualStyle)">
            <summary>
            Returns false if visualStyle is not an Office 2013 style.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2016VisualStyleResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.Office2013VisualStyleResources">
            <summary>
            Office2013VisualStyleResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2013VisualStyleResources.ApplyStyleSkinColor(DevComponents.WPF.Controls.VisualStyle)">
            <summary>
            Returns false if visualStyle is not an Office 2013 style.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2013VisualStyleResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.VisualStudio2010VisualStyleResources">
            <summary>
            VisualStudio2010VisualStyleResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualStudio2010VisualStyleResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.VisualStyleManager.LoadOptionProperty">
            <summary>
            Using a DependencyProperty as the backing store for LoadOption.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.VisualStyleManager.VisualStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisualStyle. Implements a Behavior which causes the resources 
            associated with the visual style to be merged into the resource dictionary of the element on which the property is set.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualStyleManager.GetVisualStyle(System.Windows.DependencyObject)">
            <summary>
            Get VisualStyle attached property for the dependency object.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualStyleManager.SetVisualStyle(System.Windows.DependencyObject,DevComponents.WPF.Controls.VisualStyle)">
            <summary>
            Set VisualStyle attached property for the dependency object.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualStyleManager.GetEffectiveVisualStyle(System.Windows.FrameworkElement)">
            <summary>
            Gets the effective visual style for element.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.VisualStyleManager.VisualStyleChanged">
            <summary>
            WeakEvent that fires when VisualStyle changes on an element.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.VisualStylesDictionary">
            <summary>
            VisualStylesDictionary
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualStylesDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MultiMultiplicationConverter">
            <summary>
            A multi-value converter which returns the value of the values multiplied together.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MultiplicationConverter">
            <summary>
            A value converter which multiplies an amount specified in parameter to the input value. Parameter shuould be convertable to double. 
            The target Type may be double, int, Thickness, CornerRadius, Point, Size, Rect, or any type which exposes an Add operation.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.MultiplicationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Performs conversion. parameter should hold a value as multiplier which can be parsed into a double. If value Type supports the
            multiplication operator, it is invoked. Otherwise, certain types are wired in, including: Thickness, CornerRadius, Point, Rect.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionExtensions.MemberType(System.Collections.IEnumerable)">
            <summary>
            Gets the member type of the collection, if possible. Returns null if the type cannot be determined.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionExtensions.IndexOf(System.Array,System.Object)">
            <summary>
            Gets the index of a value in an array.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionExtensions.KeyFromValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Gets the dictionary key given the value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionExtensions.Move``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Moves the item from its current position to the specified position in the generic list.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionExtensions.Move(System.Collections.IList,System.Object,System.Int32)">
            <summary>
            Moves the item from its current position to the specified position in the list.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionExtensions.SynchronizeWith(System.Collections.IList,System.Collections.IList)">
            <summary>
            Synchronizes the content of list with the content of other, in both the items contained and their order.
            Returns true if the list is modified.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CloneObject">
            <summary>
            Static class which exposes an extension method for deep cloning any object, including
            Dependency Objects. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CloneObject.Clone``1(``0)">
            <summary>
            Extension method for deep cloning any object. 
            </summary>
            <remarks>This method was developed by Jim McCurdy.</remarks>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.DefaultValue(System.Type)">
            <summary>
            Gets the default value for a givin type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Returns true if the type is a Nullable
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsNumeric(System.Type,System.Boolean)">
            <summary>
            Return true if the type represents a number.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsNumericIntegral(System.Type,System.Boolean)">
            <summary>
            Return true if the type represents an integral number.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsCollection(System.Type)">
            <summary>
            Returns true if type is a ICollection or ICollection`1. Note IList impliments ICollection in both generic and non-generic varieties.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsReadOnlyCollection(System.Type)">
            <summary>
            Returns true if type is either ReadOnlyCollection(Of T) or ReadOnlyCollectionBase.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Returns true if the type is assignable from IEnumerable or generic IEnumerable
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsGenericCollection(System.Type)">
            <summary>
            Returns true if type implements ICollection
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsList(System.Type)">
            <summary>
            Determines whether the Type is an IList or a generic IList.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsGenericList(System.Type)">
            <summary>
            Determines whether the Type is a generic list.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.GetCollectionMemberType(System.Type)">
            <summary>
            Returns the member type if collectionType is a type of collection with strongly typed members (i.e. generic or array).
            Otherwise returns typeof(object).
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TypeExtensions.IsValidEnumValue(System.Type,System.Object)">
            <summary>
            Determines if a value is valid for a givin enum type. Works for flags.
            </summary>
            <param name="enumType">The enum type. ArgumentException if not an enum.</param>
            <param name="enumValue">The proposed value.</param>
        </member>
        <member name="M:DevComponents.WPF.Controls.WindowExtensions.ExtendFrameIntoClientArea(System.Windows.Window,System.Windows.Thickness)">
            <summary>
            Extends the window's frame into its client area by the number of pixels per side as specified in margin.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WindowExtensions.HideWindowIconAndTitle(System.Windows.Window,System.Boolean,System.Boolean)">
            <summary>
            Removes the window's Icon and Title from the window frame, but they will still show up in task bar.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WindowExtensions.RemoveMaximizeAndMinimizeButtons(System.Windows.Window)">
            <summary>
            Removes the Minimize and Maximize buttons from the window.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.Office2010VisualStyleResources">
            <summary>
            Implementation of resource dictionary which provides resources for office 2010 visual styles, including Blue, Silver and Black. 
            VisualStylesDictionary merges this dictionary into its merged dictionaries collection when the effective visual style is office 2010.
            </summary>
            <summary>
            Office2010VisualStyleResources
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Office2010VisualStyleResources.BlueSkinKey">
            <summary>
            ResourceKey which identifies the resource dictionary containing colors for the Blue skin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Office2010VisualStyleResources.SilverSkinKey">
            <summary>
            ResourceKey which identifies the resource dictionary containing colors for the Silver skin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.Office2010VisualStyleResources.BlackSkinKey">
            <summary>
            ResourceKey which identifies the resource dictionary containing colors for the Black skin.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2010VisualStyleResources.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2010VisualStyleResources.#ctor(DevComponents.WPF.Controls.Office2010SkinColor)">
            <summary>
            Construct with a specific skin color.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2010VisualStyleResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.Office2010VisualStyleResources.SkinColor">
            <summary>
            Gets or Sets the specific skin color for the style. Default is Blue.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.HsvColor">
            <summary>
            Encapsulate an HSV color structure, supporting conversion methods to and from the standard Rgb based Color.
            This class is inspired by and all the code for the conversion methods is copied from the ColorPicker sample found in the Windows SDK.
            http://msdn.microsoft.com/en-us/library/ms771620.aspx
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HsvColor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HsvColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct with values for h, s and v.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HsvColor.ToRgb">
            <summary>
            Convert the instance of HsvColor to an instance of Color.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HsvColor.FromRgb(System.Windows.Media.Color)">
            <summary>
            Convert a standard Color to an HsvColor
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HsvColor.FromRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an HsvColor instance from provided RGB values.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.HsvColor.ToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Creates a Color from provided HSV values.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.HsvColor.H">
            <summary>
            Get or set the Hue component of the color. This is a value from 0 to 360.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.HsvColor.S">
            <summary>
            Get or set the Saturation component of the color.  This is a value from 0 to 1.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.HsvColor.V">
            <summary>
            Get or set the Value component of the color. This is a value from 0 to 1.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BooleanEditorDescriptor">
            <summary>
            This is the default editor descriptor for properties of type Boolean.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Returns the Style that is identified by the ComponentResourceKey PropertyGridEditor.DefaultBooleanEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorDescriptor.Type">
            <summary>
            Get or Set the editor type, which can be either InLineCheckBox or DropDown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorDescriptor.DisplayNameTrue">
            <summary>
            Get or Set the display name for value of True. The default is "True".
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BooleanEditorDescriptor.DisplayNameFalse">
            <summary>
            Get or set the display name for value of False. The default is "False".
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BooleanEditorDescriptor.EditorType">
            <summary>
            Enumeration for the types of boolean editors, CheckBox or DropDown.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BooleanEditorDescriptor.EditorType.InLineCheckBox">
            <summary>
            Specifies a check box inline with the property row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BooleanEditorDescriptor.EditorType.DropDown">
            <summary>
            Specifies a drop down for selecting values.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanEditorDescriptor.BooleanPropertyToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to a string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanEditorDescriptor.BooleanPropertyToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from string back to boolean.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BrushEditorDescriptor">
            <summary>
            Implements EditorDescriptor for properties of type Brush.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BrushEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Gets style referenced by component resource key PropertyGridEditor.DefaultBrushEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.BrushEditorDescriptor.Type">
            <summary>
            Determines whether the possible values are presented in a drop down or directly in the cell.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BrushEditorDescriptor.EditorType">
            <summary>
            The possible types of color editor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushEditorDescriptor.EditorType.ThreeState">
            <summary>
            Editor is both drop down and in row[
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushEditorDescriptor.EditorType.DropDown">
            <summary>
            Editor is presented in drop down.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushEditorDescriptor.EditorType.InRow">
            <summary>
            Editor is presented in the row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.BrushEditorDescriptor.EditorType.InCategory">
            <summary>
            Editor is placed at the bottom of the category.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColorEditorDescriptor">
            <summary>
            Implements an EditorDescriptor for properties of type Color.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColorEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Overriding to return resource referenced by component resource key PropertyGridEditor.DefaultColorEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColorEditorDescriptor.Type">
            <summary>
            Determines whether the possible values are presented in a drop down, directly in the row below the
            the property being edited, both (as a three state editor) or is placed at the bottom of the category.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColorEditorDescriptor.EditorType">
            <summary>
            The possible types of color editor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorEditorDescriptor.EditorType.ThreeState">
            <summary>
            Editor is both drop down and in row[
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorEditorDescriptor.EditorType.DropDown">
            <summary>
            Editor is presented in drop down.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorEditorDescriptor.EditorType.InRow">
            <summary>
            Editor is presented in the row.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColorEditorDescriptor.EditorType.InCategory">
            <summary>
            Editor is placed at the bottom of the category.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EditorDescriptorSet">
            <summary>
            Defines the set of default editor descriptors for PropertyGrid.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorDescriptorSet.GetDescriptor(DevComponents.WPF.Controls.PropertyGridProperty)">
            <summary>
            Returns the default descriptor for the givin property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EditorDescriptorSet.GetDescriptorForType(System.Type)">
            <summary>
            Returns the default editor descriptor for the givin property type.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EditorDescriptorSet.Item(System.Type)">
            <summary>
            Gets the EditorDescriptor of the specified Type. If an editor descriptor of the specified Type does
            not exist in the collection at the current time, a new one is created using Activator.CreateInstance.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EnumEditorDescriptor">
            <summary>
            Implementation of editor descriptor for default property grid enum editor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorDescriptor.#ctor(System.String[])">
            <summary>
            Construct with list of custom display names.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorDescriptor.#ctor(System.Boolean,DevComponents.WPF.Controls.EnumEditorDescriptor.EditorType,System.String[])">
            <summary>
            Construct with value for EnableInCellEditing, Type and array of custom display names.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Default editor style is resource identified by PropertyGridEditor.DefaultEnumEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorDescriptor.Type">
            <summary>
            Determines whether the possible values are presented in a drop down or directly in the cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorDescriptor.DisplayNames">
            <summary>
            Get a list of names for the enum values. (Note: this is not generic because generics do not play nice with Xaml.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorDescriptor.SeparatorToken">
            <summary>
            A string which is used to separate values when the enum if Flags.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorDescriptor.IgnoredValues">
            <summary>
            Define values of the enum which are not included.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumEditorDescriptor.Sort">
            <summary>
            Determines whether the items are sorted by name.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EnumEditorDescriptor.EditorType">
            <summary>
            Identifies the possible types of enum editor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumEditorDescriptor.EditorType.DropDown">
            <summary>
            The value is selected from a drop down.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumEditorDescriptor.EditorType.InLine">
            <summary>
            The values are presented directly in the cell.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.NumericEditorDescriptor">
            <summary>
            Defines an EditorDescriptor for Numeric types.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.NumericEditorDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.NumericEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Overriding to return resource with key PropertyGridEditor.DefaultNumericEditorStyleKey as a Style.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.NumericEditorDescriptor.PrepareEditor(DevComponents.WPF.Controls.PropertyGridEditor)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.RejectNonNumericValuesForType">
            <summary>
            Set a Type (the Type should be a numeric type) to which all text input is to be restricted.
            Non-numeric characters which form strings that cannot be converted to the type set here are rejected by the text box editor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.EnforceMinMax">
            <summary>
            When true, values that don't fall within the range defined by MinValue and MaxValue are considered in error.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.RepeatDelay">
            <summary>
            Specifies the amount of delay in milliseconds from when the spinner is first pressed to when auto increment begins.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.RepeatInterval">
            <summary>
            Specifies the amount interval in milliseconds between increments of the spinner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.MinValue">
            <summary>
            Specifies a minimum value. Defalaut is Double.MinValue.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.MaxValue">
            <summary>
            Specifies a maximum value. Default is Double.MaxValue.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.Precision">
            <summary>
            Specifies the precision for the output of floating point numbers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.NumericEditorDescriptor.Increment">
            <summary>
            Specifies the amount of step between increments of the spinner.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor">
            <summary>
            Default editor descriptor for collections of primitive types and strings.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Overriding to return default style for primitive collection editor. Value returned
            is resource with key equal to the component resource key PropertyGridEidtor.DefaultPrimitiveTypeCollectionEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.Text">
            <summary>
            A custom string which is displayed in the cell if EnableInCellEditing is false or when the list is empty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.TrimWhiteSpace">
            <summary>
            Determines whether white space and empty strings are trimmed from the result set. Default is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.InitialWidth">
            <summary>
            Initial width of the drop down.  Default value is NaN (auto)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.InitialHeight">
            <summary>
            Initial height of the drop down. Default value is 90.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.PrimitivesListValueConverter">
            <summary>
            Implementation of TypeConverter for converting back and forth between string and List of string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.PrimitivesListValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the value (an IList) to a string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PrimitiveCollectionEditorDescriptor.PrimitivesListValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert string to list.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ValidationErrorNotificationType">
            <summary>
            Indicates type of error notification provided by PropertyGrid when an edited value is invalid.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidationErrorNotificationType.None">
            <summary>
            No error message is provided.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidationErrorNotificationType.MessageBox">
            <summary>
            A message box is shown with error message.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ValidationErrorNotificationType.ErrorTemplate">
            <summary>
            The error is indicated via Validation.ErrorTemplate.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ReverseBrushOrientationValueConverter">
            <summary>
            Value converter for converting a LinearGradientBrush's Orientation from Horizontal to Vertical or back.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseBrushOrientationValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Creats a clone of a LinearGradientBrush with the X and Y values of it's StartPoint and EndPoint reversed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseBrushOrientationValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Creats a clone of a LinearGradientBrush with the X and Y values of it's StartPoint and EndPoint reversed.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IPropertyGridPropertyValidator">
            <summary>
            Interface for validators of property grid properties. 
            The Validate method return a description of the error condition, or null if there is no error.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.IPropertyGridPropertyValidator.Validate(DevComponents.WPF.Controls.PropertyGridProperty)">
            <summary>
            Return a description of the error condition, or null if there is no error.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor">
            <summary>
            A collection editor for collections of primitive types. Created for use by PropertyGrid.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.CollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Collection.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.CollectionTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CollectionType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.CollectionMemberTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CollectionMemberType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.EmptyTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for EmptyText.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.TextDelimiterProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextDelimiter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.TrimWhiteSpaceProperty">
            <summary>
            Using a DependencyProperty as the backing store for TrimWhiteSpace.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.UpdateCollectionWhenTextChangesProperty">
            <summary>
            Using a DependencyProperty as the backing store for UpdateCollectionWhenTextChanges.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.Collection">
            <summary>
            Get or set the collection being edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.CollectionType">
            <summary>
            Get or Set the Type of the Collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.CollectionMemberType">
            <summary>
            Get or Set the collection member type.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.EmptyText">
            <summary>
            Get or set value of Text property when the collection is empty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.TextDelimiter">
            <summary>
            Get or set the string which separates values in the text property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.Text">
            <summary>
            Get or set textual representation of the contents of the collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.TrimWhiteSpace">
            <summary>
            Get or set whether white space and empty strings are trimmed from the result set. Only applies when the collection member type is string. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PrimitiveTypeCollectionEditor.UpdateCollectionWhenTextChanges">
            <summary>
            Get or set whether the collection is updated when the value of Text changes.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyDefinitionCollection">
            <summary>
            Defines a collection of PropertyDefinition.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CollectionEditor">
            <summary>
            Implementation of a collection editor, used for the PropertyGrid, but is not tied to it.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.NewItemTypesItemTemplateKey">
            <summary>
            Identifies the DataTemplate resource which is used by the new item types ComboBox.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.MoveItemDownCommand">
            <summary>
            Defines the command which corresponds to the move item down button.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.MoveItemUpCommand">
            <summary>
            Defines the command which corresponds to the move item up button. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.CollectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for List.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.CollectionTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CollectionType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.CommitChangesProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommitChanges.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.DataFormFieldDescriptorsProperty">
            <summary>
            Using a DependencyProperty as the backing store for DataFormFieldDescriptors.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.EditorTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.InPlaceEditorSettingsProperty">
            <Summary>
            Backing store for InPlaceEditorSettings.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.NewItemProviderProperty">
            <Summary>
            Backing store for NewItemProvider.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.NewItemTypesProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowedTypes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.PropertyGridPropertyDefinitionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyDefinitions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.ShowPropertyGridHelpPanelProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowPropertyGridHelpPanel.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.CollectionEditor.ShowPropertyGridSearchBoxProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowPropertyGridSearchBox.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditor.OnApplyTemplate">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CollectionEditor.PersistChanges">
            <summary>
            Cause all changes to be persisted.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.CanCancel">
            <summary>
            Gets whether changes can be cancelled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.Collection">
            <summary>
            Gets or sets the list being edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.CollectionType">
            <summary>
            Get or set the Type of the Collection. Used for creating a new collection when Collection is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.CommitChanges">
            <summary>
            Get or set whether changes are committed to the underlying data source. Setting this value triggers a commit of all pending changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.DataFormFieldDescriptors">
            <summary>
             Get or Set a list of field descriptors for customizing the data form when EditorType = "DataForm".
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.EditorType">
            <summary>
            Get or set whether the property editor is based on a PropertyGrid or a DataForm.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.IsReadOnly">
            <summary>
            Get or set whether the editor is in readonly mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.InPlaceEditorSettings">
            <summary>
            Gets or sets the EditorSettings to use for the editor when EditorType is InPlaceSingleValue.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.NewItemProvider">
            <summary>
            Gets or sets a NewItemProvider instance which, if set, is used to obtain new items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.NewItemTypes">
            <summary>
            Get or Set a list of allowed types. By default, these are generated from the target property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.PropertyGridPropertyDefinitions">
            <summary>
            Get or Set a set of property definitions which are applied to the underlying PropertyGrid's CustomPropertyDefinitions collection.
            Use this to customize the property grid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.ShowPropertyGridHelpPanel">
            <summary>
            Get or set whether the embedded PropertyGrid's help panel should be shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.ShowPropertyGridSearchBox">
            <summary>
            Get or set whether the embedded PropertyGrid's search box should be visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.ShowReadOnlyProperties">
            <summary>
            Get or set whether the embedded PropertyGrid should show read-only properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.ShowSubProperties">
            <summary>
            Get or set whether the embedded PropertyGrid should show sub properties.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CollectionEditor.CollectionItemWrapper">
            <summary>
            Wrapper for property grid items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.CollectionItemWrapper.CanCancel">
            <summary>
            Gets whether edits to this item can be canceled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.CollectionItemWrapper.DisplayName">
            <summary>
            The display name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.CollectionEditor.CollectionItemWrapper.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridEditor">
            <summary>
            Implementation of the Editor for PropertyGridItem. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.PropertyValueChangedEvent">
            <summary>
            Using a RoutedEvent as backing for ValueEdited.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.PropertyValueChangingEvent">
            <summary>
            Using RoutedEvent as backing for PropertyValueChanging.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.EditEscapedEvent">
            <summary>
            Using a RoutedEvent as backing for EditEscaped
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.AlwaysShowInCellTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlwaysShowInCellTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.CommitOnValueChangedProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommitOnPropertyChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.ErrorNotificationProperty">
            <summary>
            Using a DependencyProperty as the backing store for ErrorNotification.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.ClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.DialogWindowTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DialogWindowType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.DropDownClosesOnClickProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropDownClosesOnClick.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.DropDownTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropDownContentTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.InCellTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for InCellTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.InRowTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for InRowTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.InRowRelativePositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for InRowRelativePosition.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.IsDialogWindowOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDialogWindowOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.IsInCellEditingEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsInCellEditingEnabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.IsDropDownOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDropDownOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.IsInRowContentVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsInRowContentVisible.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.ToggleButtonIsCheckedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsToggleButtonChecked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.ToggleButtonVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToggleButtonVisibility.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridEditor.ValueStringProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValueString.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnApplyTemplate">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding to manage keyboard events.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Overriging to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.CommitPendingChanges(System.Boolean)">
            <summary>
            Causes all pending changes to be propagated to the property being edited.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.ClearPendingChanges">
            <summary>
            Clears all pending changes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnPropertyValueChanged">
            <summary>
            Virtual method called when the property value is changed and committed to the property source.
            Raises the ValueEdited event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnEditEscaped">
            <summary>
            Virtual method called to raise the EditEscaped event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridEditor.OnPropertyValueChanging(System.Windows.RoutedEventArgs)">
            <summary>
            Event called to raise the PropertyValueChanging event. Set args Handled to true to cancel the update.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridEditor.PropertyValueChanged">
            <summary>
            Event raised after pending changes are committed to the underlying property.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridEditor.PropertyValueChanging">
            <summary>
            Event raised just prior to committing pending changes to the underlying property. Set Handled to true to prevent the 
            changes from being committed.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridEditor.EditEscaped">
            <summary>
            Routed event raised when an edit operation is terminated via the escape key, or the like.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.Property">
            <summary>
            Returns the property which this editor is editing.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.AlwaysShowInCellTemplate">
            <summary>
            When true, the InCellTemplate will be shown in the value cell whether or not the drop down is enabled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.CommitOnValueChanged">
            <summary>
            Get or set whether the underlying property value is committed on value changed. By default, the changes are committed to the underlying 
            property when the editor looses focus or when the user hits the enter key. 
            If unset, this property will inherit its value from the parent PropertyGrid's property of the same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.EnableButtonForReadOnly">
            <summary>
            Get or set whether drop-down button is enabled when IsReadOnly is true. Default is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.ErrorNotification">
            <summary>
            Get or Set the Error notification type. By default, the value for this property is 
            inherited from the parent PropertyGrid property of the same name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.ClickMode">
            <summary>
            Get or Set ClickMode when DropDown button is visible.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.DialogWindowType">
            <summary>
            Get or set the Type for dialog window. When property IsDialogWindowOpen is set to true, 
            a new instance of type DialogWindowType is created and shown via call to Window.ShowDialog(). 
            Note that the dialog window type must derive from System.Windows.Window.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.DropDownClosesOnClick">
            <summary>
            Get or set whether the drop down closes automatically when a click event or mouse left button up event fires 
            from within the drop down content. (The drop down always closes with a click event that originates outside
            of the drop down content.) The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.DropDownTemplate">
            <summary>
            Get or set a ControlTemplate to apply to the ContentControl which is used to display drop down content. 
            The content of the drop down is PropertyGridEditor.Value. By default, when this property to a non-null 
            value, the editor displays a toggle button which opens and closes the drop down. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.InCellTemplate">
            <summary>
            Get or set a ControlTemplate to apply to the ContentControl which presents the property value as a string, 
            appearing in the property's Value cell (second column.) Its content is set to PropertyGridEditor.ValueString. 
            The default InCellTemplate contains a TextBox.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.InRowTemplate">
            <summary>
            Get or set a ControlTemplate used as Template for the ContentControl which displays the editor in 
            what is essentially a new row immediately below the property being edited. By default, if this 
            property is set to a non-null value, the editor displays a toggle button which toggles the visibility 
            of the in cell content. If both InRowTemplate and DropDownTemplate are set, then the toggle button is three-state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.InRowRelativePosition">
            <summary>
            Get or set a value which determines where in relation to the property being edited the in 
            row content should be located. Possible values are BelowProperty and CategoryEnd. In the 
            first case the editor is displayed directly below the property being edited. In the second, 
            the editor is displayed as the last row in the category of the property being edited 
            (applies only if PropertyGrid.ShowCategories is set to true.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.IsDialogWindowOpen">
            <summary>
            Get or set whether the dialog window is open. Setting to true when there 
            is no value for DialogWindowType will have no effect.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.IsInCellEditingEnabled">
            <summary>
            Get or set whether the Value should be editable directly in the cell TextBox. 
            If false, the text box is made read only. If true, then the TextBox is editable. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.IsDropDownOpen">
            <summary>
            Gets or sets whether the drop down is open. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.IsInRowContentVisible">
            <summary>
            Gets whether the in row content is visible. This is a read only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.IsReadOnly">
            <summary>
            Gets or sets whether the editor is read-only.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.ToggleButtonIsChecked">
            <summary>
            Gets or sets the IsChecked value of the internal toggle button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.ToggleButtonVisibility">
            <summary>
            Get or set the visibility of the internal toggle button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.Value">
            <summary>
            Get or set the value of the underlying property. A binding is created between this property 
            and the Value property of the PropertyGridProperty which wraps the actual property being 
            edited. The binding's update source trigger is LostFocus
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridEditor.ValueString">
            <summary>
            This property is bound to same source as Value. The difference is that the binding for this property includes a value converter 
            which uses the property's TypeConverter for converting between string and the underlying object type, faciliting
            editing directly in a text box.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridGroupHeaderBehavior">
            <summary>
            Exposes an attached dependency property which acts as a behavior for the purpose
            of enabling both arrow key toggling and double click toggling of the expander
            of a Category group item in PropertyGrid.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridGroupHeaderBehavior.ExpanderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Expander.
            This attached property implements a behavior on a Control by which, if the property value
            is set to a ToggleButton within the visual tree of the property owner, when the property owner
            is clicked on the toggle button will be givin focus. Also, if the property owner is double clicked
            on, the toggle button is toggled.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridGroupHeaderBehavior.SetExpander(System.Windows.Controls.Control,System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Sets the Expander attached property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColumnWidthChangedEventArgs">
            <summary>
            Event args for column width changed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnWidthChangedEventArgs.#ctor(DevComponents.WPF.Controls.ColumnDefinition,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnWidthChangedEventArgs.OldWidth">
            <summary>
            Get the previous width.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnWidthChangedEventArgs.NewWidth">
            <summary>
            Get the new width.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EnumPickerValue">
            <summary>
            Wrapper class for an enum value displayed by EnumPicker.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPickerValue.Value">
            <summary>
            Get or Set the value of the enum.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPickerValue.DisplayName">
            <summary>
            Get or Set the display name for the enum value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPickerValue.IntegerValue">
            <summary>
            Gets Value as an integer.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPickerValue.IsSelected">
            <summary>
            Get or Set whether the value is selected.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.EnumPickerValue.PropertyChanged">
            <summary>
            Implementation of INotifyPropertyChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.ClickEvent">
            <summary>
            Using a RoutedEvent for Click.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.PopupClosedEvent">
            <summary>
            Using Routed Event as backing for DropDownClosed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.PopupOpenedEvent">
            <summary>
            Using Routed Event as backing for DropDownOpened.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.ClickModeProperty">
            <Summary>
            Backing store for ClickMode.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.CloseOnClickProperty">
            <summary>
            Using a DependencyProperty as the backing store for CloseOnClick.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.PopupBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for PopupBorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.PopupPaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropDownPadding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.PopupPlacementProperty">
            <summary>
            Using a DependencyProperty as the backing store for PopupPlacement.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.HorizontalPopupAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalPopupAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.HorizontalPopupOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalPopupOffset.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.IsOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.IsPressedProperty">
            <Summary>
            Backing store for IsPressed.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.MaximumPopupHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaximumDropDownHeight.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.PopupAnimationProperty">
            <summary>
            Using a DependencyProperty as the backing store for PopupAnimation.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.ShowGlyphProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowGlyph.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.StaysOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for StaysOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.ToggleButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToggleButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.VerticalPopupAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalPopupAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.VerticalPopupOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalPopupOffset.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PopupButton.WaitForMouseUpToCloseProperty">
            <Summary>
            Backing store for WaitForMouseUpToClose.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupButton.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupButton.OnPopupOpened">
            <summary>
            Virtual method called when the drop down opens. Base implementation raises the DropDownOpened event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PopupButton.OnPopupClosed">
            <summary>
            Virtual method called when the drop down closes. Base impl. raises the DropDownClosed event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PopupButton.Click">
            <summary>
            Routed event raised in resonse to a click.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PopupButton.PopupClosed">
            <summary>
            Event raised when the drop down closes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PopupButton.PopupOpened">
            <summary>
            Event raised when the drop down Opens.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.ClickMode">
            <summary>
            Gets or sets whether a click occurs on mouse down or mouse up.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.CloseOnClick">
            <summary>
            Get or Set whether the popup should close when an unhandled click event happens within it.
            This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.PopupBorderThickness">
            <summary>
            Specifies the border thickness surrounding the popup.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.PopupPadding">
            <summary>
            Gets or Sets the padding between the drop down border and the contents.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.PopupPlacement">
            <summary>
            Get or Set the placement mode for the popup. PlacementTarget is the button itself. This is a dependency property.
            The default value is PlacementMode.Bottom.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.HorizontalPopupAlignment">
            <summary>
            Gets or sets the horizontal alignment of the popup in relationship to the button. Applies when PlacementMode is Bottom or Top."
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.HorizontalPopupOffset">
            <summary>
            Get or set the Horizontal Offset applied to the popup.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.IsOpen">
            <summary>
            Get or Set the value which determines whether the popup is open.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.IsPressed">
            <summary>
            Gets whether the button is pressed.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.MaximumPopupHeight">
            <summary>
            Gets or sets the maximum height of the popup. The default value is Positive Infinity. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.PopupAnimation">
            <summary>
            Get or set the animation used for the popup when it opens.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.ShowGlyph">
            <summary>
            Get or Set whether the drop down glyph is shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.ToggleButtonStyle">
            <summary>
            Get or Set the style to apply to the internal toggle button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.VerticalPopupAlignment">
            <summary>
            Gets or sets the vertical alignment of the popup in relationship to the button. Applies when PlacementMode is Left or Right."
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.VerticalPopupOffset">
            <summary>
            Get or set the vertical offset applied to the popup when it opens.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.WaitForMouseUpToClose">
            <summary>
            Gets or sets whether the popup should stay open until the mouse button is released, when the mouse button is pressed
            anywhere inside the parent window. Ignored if StaysOpen is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PopupButton.Popup">
            <summary>
            Get access to the popup.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CustomChromeStyle">
            <summary>
            Identifies the theme style for custom chrome.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ProgressStepHotTrackMode">
            <summary>
            Specifies when a step in the ProgressSteps control can be activated.
            This is a flags enum, so multiple values can be specified.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.None">
            <summary>
            No steps are active.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.NotStarted">
            <summary>
            All steps with progress of 0 are active.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.Started">
            <summary>
            Steps with progress greater than 0 are active
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.Completed">
            <summary>
            All steps with Progress of 1 are active.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.Active">
            <summary>
            The active step is active.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.PriorToActive">
            <summary>
            Steps with StepNumber less than the step number of the active step are active.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ProgressStepHotTrackMode.Any">
            <summary>
            All steps are active.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ToastNotificationGlowColor">
            <summary>
            Specifies the glow color around ToastNotification.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PasswordOption">
            <summary>
            Specifies whether AdvTextBox is in password mode and if so, the security 
            level of the password.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PasswordOption.PlainText">
            <summary>
            Not in password mode. Plain text.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PasswordOption.HidePassword">
            <summary>
            Password mode where text is obscured with password chars, and the Text property
            contains the password.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PasswordOption.SecurePassword">
            <summary>
            Password mode where text is obscured with password char, and the Text property does not contain the password.
            Password is obtained via SecurePassword property. SecurePassword is a read-only CLR property.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PasswordOption.SecurePasswordBindable">
            <summary>
            Password mode where text is obscured with password char, and the Text property does not contain the password.
            Password is obtained via SecurePassword property. SecurePassword is a read/write dependency property and supports data binding.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectAllOption">
            <summary>
            Specifies when all text in a text box should be selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectAllOption.OnFocused">
            <summary>
            All text is selected when the control recieves keyboard focus
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectAllOption.OnLoaded">
            <summary>
            All text is selected when the control loads.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WizardMethodInvocationTrigger">
            <summary>
            Specifies a method of the Wizard control.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WizardButtonState">
            <summary>
            Specifies the state of a button in a Wizard.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButtonState.Auto">
            <summary>
            The button's state is automatically determined.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButtonState.Disabled">
            <summary>
            The button is disabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButtonState.Enabled">
            <summary>
            The button is enabled.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.WizardButtonState.Hidden">
            <summary>
            The button is not visible.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AnimatableIsOpenState">
            <summary>
            Specifies whether a component is opening, closing, open or closed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AnimatableIsOpenState.Open">
            <summary>
            The component is open.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AnimatableIsOpenState.Opening">
            <summary>
            The component is opening.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AnimatableIsOpenState.Closed">
            <summary>
            The component is closed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AnimatableIsOpenState.Closing">
            <summary>
            The component is closing.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MenuItemClickAction">
            <summary>
            Specifies what the menu does when a menu item is clicked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.MenuItemClickAction.Nothing">
            <summary>
            No action is taken.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.MenuItemClickAction.CloseMenu">
            <summary>
            The parent menu is closed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.MenuItemClickAction.CloseSubmenu">
            <summary>
            The parent submenu is closed.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AutoCompleteOptions">
            <summary>
            Defines possible AutoComplete modes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AutoCompleteOptions.Off">
            <summary>
            AutoComplete is not used.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AutoCompleteOptions.ReadOnly">
            <summary>
            AutoComplete, without allowing values which are not in auto complete list.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AutoCompleteOptions.FreeText">
            <summary>
            AutoComplete enabled, and user is free to enter any text.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AutoCompleteOptions.DontConvertCase">
            <summary>
            When auto complete is enabled, suggestions are case sensitive.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.EnumPicker">
            <summary>
            Implementation of control EnumPicker. A control which automatically loads possible values of an enumerated type
            and presents the values in either ListBox format or ComboBox format for selection. Has full support for Flags.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.ValueChangedEvent">
            <summary>
            Using a RoutedEvent as backing store for the ValueChanged event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.DisplayValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for DisplayValue. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.DisplayNamesProperty">
            <summary>
            Using a DependencyProperty as the backing store for DisplayNames.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.EmulationModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for EmulationMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.EnumTypeProperty">
            <summary>
            Using a dependency property as backing store for EnumType
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.FlagsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Flags.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.IgnoredValuesProperty">
            <summary>
            Using a DependencyProperty as the backing store for IgnoredValues.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.IsNullableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsNullable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.IsOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.NullValueDisplayStringProperty">
            <summary>
            Using a DependencyProperty as the backing store for NullValueDisplayString.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedValue.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.SeparatorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Separator.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.EnumPicker.SortProperty">
            <summary>
            Using a DependencyProperty as the backing store for Sort.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumPicker.OnApplyTemplate">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumPicker.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to go to MouseOver state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumPicker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overriding to go to Normal state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.EnumPicker.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding for key events.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.EnumPicker.ValueChanged">
            <summary>
            A routed event raised when the value of Value changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.DisplayValue">
            <summary>
            Get or Set the value to display in the value box when EmulationMode is ComboBox. By default, this value is 
            automatically set to equal SelectedValue's display name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.DisplayNames">
            <summary>
            Get or Set a list of strings to be used as display names for the enum values. The display names
            are set in numerical order. If unset, then this property is set to a list of the default names for the enum type.
            Note that empty lists or lists with member count that is not equal to the number of values in the enum 
            type are considered as invalid.
            This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.EmulationMode">
            <summary>
            Get or Set whether the EnumPicker emulates a combo box or a list box.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.EnumType">
            <summary>
            Get or Set the type of the Enumeration. This value will be inferred if unset and a value for SelectedValue is set.
            Note: When setting, if the value is Nullable, then resulting value of EnumType is coerced into the nullable's underlying type.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.Flags">
            <summary>
            Get or Set whether to allow multiple values to be selected. If unset, this value
            will be set automatically based on presence of the Flags attribute of the EnumType.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.IgnoredValues">
            <summary>
            Gets or sets a list of values which are removed from the selection list. 
            Can be a comma separated string, an enum value or a list of enum values.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.IsNullable">
            <summary>
            Get or Set whether the value should be considered Nullable. By default, this is set based on givin EnumType. 
            This property is useful for setting up EnumPicker in Xaml where it is not possible to specify a generic type (Nullable is generic.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.IsOpen">
            <summary>
            Get or Set whether the EnumPicker is Open. Only applies if DisplayMode is ComboBox.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.NullValueDisplayString">
            <summary>
            Get or Set the string for null when property type is Nullable.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.Value">
            <summary>
            Get or set the currently selected value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.Separator">
            <summary>
            Gets or Sets a string token which is used as a separator between values when writing the DisplayValue and Flags == true.
            This is a dependency property. The default value is ", ".
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.EnumPicker.Sort">
            <summary>
            Gets or sets whether the enum values should be sorted by their display name.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BooleanToVisibilityConverter">
            <summary>
            A value converter for converting from a boolean to a Visibility. Optionally, if parameter == "Inverse"
            then the return value is reversed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from boolean to Visibility.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Visibility to boolean.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DoubleToThicknessConverter">
            <summary>
            Value converter which converts a double to a Thickness. Parameter can be a Thickness, or a string which parses into
            a Thickness. This will return a Thickness where the sides are obtained by multiplying the sides of the parameter by the input double.  
            Alternatively, the parameter can be 'Left', 'Top', 'Right' or 'Bottom', in which cases the thickness will have one side set equal to 
            the value being converted, while all other sides remain zero. (Parameter can begin with a negative sign.)
            If parameter is null, then returned Thickness has uniform values equal to the input value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform conversion
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BooleanToStringConverter">
            <summary>
            A value converter for converting from a boolean value to a string and back.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from boolean to string. Parameter may be 'Y' to indicate return of "Yes" or "No"
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BooleanToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from string to boolean.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ReverseBooleanConverter">
            <summary>
            A Value Converter for converting from boolean True to boolean False and visa versa.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns oposite of value. value must be boolean.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns oposite of value. value must be boolean.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ThicknessToDoubleConverter">
            <summary>
            A value converter for converting a part of a Thickness value to a double. Use parameter to specify whether the
            Thickness Left, Top, Right, or Bottom should be returned.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ThicknessToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Perform conversion.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeDragHandler">
            <summary>
            Implementation of custom DragHandler for AdvTree control.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeDragHandler.RemoveDataFromSource">
            <summary>
            Overriding to perform special handling for AdvTree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeDragHandler.Data">
            <summary>
            Overriding abstract property to return data attached to node being dragged.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeDragHandler.SourceNode">
            <summary>
            Access to the Node from which the drag operation began.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeDropHandler">
            <summary>
            Implementation of a DropHandler for Drag Drop into an AdvTree. Inherits from ItemsControlDropHandler. An instance of this class is used as DropHandler for the
            DragDrop utility when the registered drop target is an AdvTree and there is no override specified via DragDrop.DropHandler attached property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeDropHandler.OnDragComplete">
            <summary>
            Overriding to ensure scrolling is stopped when operation completes.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeDropHandler.CanDrop(System.Windows.Point)">
            <summary>
            Overriding to determine whether the current drag data can be dropped into the target Tree
            at the indicated location.
            </summary>
            <param name="mousePosition">Location of the mouse at time method is called, relative to the tree view.</param>
            <returns>True if a drop is allowed.</returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeDropHandler.DoDrop(System.Windows.Point)">
            <summary>
            Overriding to perform custom drop logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeDropHandler.CreateAdorner">
            <summary>
            Overriding to create a new InsertionAdorner if base implementation returns null.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeDropHandler.UpdateAdorner(System.Windows.Point)">
            <summary>
            Overriding to display the correct adorner for the indicated mouse position.
            </summary>
            <param name="mousePosition">The current mouse position, relative to the target tree veiw.</param>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeDropHandler.TreeView">
            <summary>
            Get the target AdvTree.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ItemsControlDragHandler">
            <summary>
            Implementation of a generic drag handler for ItemsControls. Used by the Drag/Drop manager implemented by the static class DragDrop.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDragHandler.RemoveDataFromSource">
            <summary>
            Removes the drag data from the source items control when DropAction is Move.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemsControlDragHandler.Data">
            <summary>
            Overriding to set the data. The data will be the item which the original 
            source of the drag operation is the container for.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenterDragHandler.Data">
            <summary>
            Overriding to set the data. The data will be the item which the original 
            source of the drag operation is the container for.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ItemsControlDropHandler">
            <summary>
            Generic DropHandler for ItemsControl based controls.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ItemsControlDropHandler._MinScrollBuffer">
            <summary>
            Determines how close the mouse pointer needs to be from control's visible edge for scrolling to be initiated.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.OnDragComplete">
            <summary>
            Overriding to ensure that scroll timer is stopped.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.CreateAdorner">
            <summary>
            Overriding to create a new InsertionAdorner if base implementation returns null.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.UpdateAdorner(System.Windows.Point)">
            <summary>
            Overriding to set size and position of adorner.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.DoDrop(System.Windows.Point)">
            <summary>
            Overriding to perform a drop into the target ItemsControl.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.CanDrop(System.Windows.Point)">
            <summary>
            Overriding to determine if the drop is allowable at given position.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.GetScrollTimerInterval(System.Double,System.Double)">
            <summary>
            Gets the interval for the scroll timer. The smaller the interval, the faster the scrolling.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.DoScroll(System.Windows.Point)">
            <summary>
            Overriding to perfor scrolling if needed and if there is a scroll viewer for this items control.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.GetOrientation">
            <summary>
            Virtual method for determining Orientation. Base implementation does its best to determine host panel's orientation.
            Inheritors can override if necessary for their specific case.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.GetInsertionIndex(System.Windows.Point,System.Windows.Point@,System.Windows.UIElement@,System.Windows.Controls.Dock@)">
            <summary>
            Method for getting the index of the insertion position. InsertionPosition is relative to the ItemsControl.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlDropHandler.GetContainerAt(System.Windows.Point)">
            <summary>
            Gets the container at the indicated mouse position, relative to the ItemsControl.
            Takes into account that there may be space between containers.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ItemsControlDropHandler.Orientation">
            <summary>
            Get the Orientation of the panel which is the ItemsControl's items host.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenterDropHandler.CanDrop(System.Windows.Point)">
            <summary>
            Overriding to enforce can drop only if data type is ColumnDefinition and if the column definition is already a member of the destination collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenterDropHandler.CreateAdorner">
            <summary>
            Overriding to set the height of the adorner to match the header height of the columns presenter.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenterDropHandler.UpdateAdorner(System.Windows.Point)">
            <summary>
            Overriding to prevent base class behavior of setting height of adorner based on target item size.
            Also preventing drop if drop target ColumnDefinition.IsLocked is true.
            Height of the adorner is set in CreateAdorner.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenterDropHandler.DoScroll(System.Windows.Point)">
            <summary>
            Overriding to perform custom scrolling.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DragDrop">
            <summary>
            This static class encapsulates the implementation of the DevComponents drag/drop manager.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DroppingEvent">
            <summary>
            Routed event raised when a Drop is about to take place. Set Handled to true to stop the Drop.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DroppedEvent">
            <summary>
            Routed event raised after a Drop has taken place.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.RemoveItemWhenDroppedOutsideDragSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for RemoveItemWhenDroppedOutsideDragSource.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.CapturesMouseOkProperty">
            <summary>
            Using a DependencyProperty as the backing store for CapturesMouseOk.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetCapturesMouseOk(System.Windows.DependencyObject)">
            <summary>
            Get whether a drag can be triggered when the mouse is captured at the time the drag source recieves the mouse down event.
            Set this property on an element contained by the drag source which will/might have mouse capture.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetCapturesMouseOk(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Set whether a drag can be triggered when the mouse is captured at the time the drag source recieves the mouse down event.
            Set this property on an element contained by the drag source which will/might have mouse capture, otherwise the mouse down event will be ignored.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DropActionProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropAction.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetDropAction(System.Windows.DependencyObject)">
            <summary>
            Gets the value of an attatched dependency property which determines 
            whether an item that is bring dropped from the element on which the property is set is moved or copied.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetDropAction(System.Windows.DependencyObject,DevComponents.WPF.Controls.DropAction)">
            <summary>
            Sets the value of an attatched dependency property which determines 
            whether an item that is bring dropped from the element on which the property is set is moved or copied.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.IsDragSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDragSource.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetIsDragSource(System.Windows.UIElement)">
            <summary>
            Gets whether an element is a drag source.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetIsDragSource(System.Windows.UIElement,System.Boolean)">
            <summary>
            Setting value to true causes the element to be set up as a drag source. Setting false will unregister the element as drag source.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.IsDropTargetProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDropTarget. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetIsDropTarget(System.Windows.UIElement)">
            <summary>
            Get whether the element is a drop target. Note that the value is a Nullable. 
            If the value is null, then the element is a drop target only for itself.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetIsDropTarget(System.Windows.UIElement,System.Nullable{System.Boolean})">
            <summary>
            Setting value true causes the element to be registered as a drop target. Setting false will unregister element as drop target.
            Note that the value is a Nullable. If the value is null, then the element is a drop target only for itself.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DragAdornerTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for DragAdornerTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetDragAdornerTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets custom drag adorner template for a drag source.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetDragAdornerTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets up a custom adorner to display when a drag source is active (dragging.)
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DropAdornerTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for DragAdornerTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetDropAdornerTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets custom drop adorner for a drop target.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetDropAdornerTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets up custom adorner to display for a drop target.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DragHandlerProperty">
            <summary>
            Using a DependencyProperty as the backing store for DragHandler.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetDragHandler(System.Windows.DependencyObject)">
            <summary>
            Gets custom drag handler for a drag source.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetDragHandler(System.Windows.DependencyObject,DevComponents.WPF.Controls.DragHandler)">
            <summary>
            Sets a custom drag handler for a drag source.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.DropHandlerProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropHandler.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetDropHandler(System.Windows.DependencyObject)">
            <summary>
            Gets attatched property value for DropHandler. DropHandler defines a custom drop handler 
            for the item when DragDrop.IsDropTarget is true for the item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetDropHandler(System.Windows.DependencyObject,DevComponents.WPF.Controls.DropHandler)">
            <summary>
            Sets up custom drop handler for a drop target.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.MultiWindowSupportOptionProperty">
            <summary>
            Using a DependencyProperty as the backing store for MultiWindowSupportOption.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetMultiWindowSupportOption(System.Windows.DependencyObject)">
            <summary>
            Gets the value which determines whether a drag source supports multiple windows. The element this value is set on
            must have DragDrop.IsDragSource set to true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetMultiWindowSupportOption(System.Windows.DependencyObject,DevComponents.WPF.Controls.MultiWindowSupportOption)">
            <summary>
            Sets a value which determines whether a drag operation supports multiple windows. The element this value is set on
            must have DragDrop.IsDragSource set to true.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.DragDrop.RecieveActionProperty">
            <summary>
            Using a DependencyProperty as the backing store for RecieveAction.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.GetRecieveAction(System.Windows.DependencyObject)">
            <summary>
            Gets the value of an attatched dependency property which determines 
            whether an item that is dropped into the element on which the property is set is moved or copied.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDrop.SetRecieveAction(System.Windows.DependencyObject,DevComponents.WPF.Controls.DropAction)">
            <summary>
            Sets the value of an attatched dependency property which determines 
            whether an item that is dropped into the element on which the property is set is moved or copied.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DragDropEventHandler">
            <summary>
            Defines a delegate to use as event handler for DragDrop events.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DragDropRoutedEventArgs">
            <summary>
            Defines EventArgs for DragDrop routed events.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Construct with routed event, the data being transfered, the drop target and drop position.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropRoutedEventArgs.Data">
            <summary>
            Data being transfered.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropRoutedEventArgs.Target">
            <summary>
            Drop target.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropRoutedEventArgs.Position">
            <summary>
            Drop position.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.IDragDropAdorner">
            <summary>
            Interface for Adorners used by DragDrop.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DragDropAdorner">
            <summary>
            Abstract base class for Adorners which may be used for DragDrop. Implements IDragDropAdorner, the requirement for DragDrop.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Create instance given the element to adorn. Gets AdornerLayer and adds itself to it.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.Detach">
            <summary>
            Removes this adorner from the adorner layer.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.SetPosition(System.Windows.Point)">
            <summary>
            Virtual method called to set the position of the adorner. The position is relative to the adorned element.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overriding to return VisualChild.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure VisualChild is measured.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure VisualChild is arranged.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DragDropAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Overriding to add positioning transform so VisualChild is rendered at correct location.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropAdorner.Position">
            <summary>
            Get or Set the position of the Adorner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropAdorner.AdornerLayer">
            <summary>
            Access a reference to the Adorner Layer.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropAdorner.VisualChild">
            <summary>
            Abstract property, inheritors must provide a reference to the UIElement which provides visual.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropAdorner.PositionOffset">
            <summary>
            Get or Set a Point which contains X and Y offsets to apply to the position when rendering.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.DragDropAdorner.VisualChildrenCount">
            <summary>
            Overriding to return 1.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.InsertionAdorner">
            <summary>
            Implementation of an Adorner to be used as DropAdorner of a DropHandler, when the drop target is a collection of items.
            Used to show a line with optional triangle shaped line caps indicating position in collection where current drop will occure.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.InsertionAdorner.#ctor(System.Windows.UIElement,System.Windows.Controls.Orientation)">
            <summary>
            Create an instance of InsertionAdorner givin the adorned element and the orientation (vertical or horizontal) of the 
            visual collection (for example, orientation of StackPanel.)
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.InsertionAdorner.SetPosition(System.Windows.Point)">
            <summary>
            Overriding to insure Mode and LineCap are up to date.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.InsertionBrush">
            <summary>
            Get or Set the Brush used to render the insertion marker.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.HighlightBrush">
            <summary>
            Get or Set the brush used as background for the highlight rectangle when Mode is InsertInto.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.HighlightBorder">
            <summary>
            Get or Set the brush used as border for the highlight rectangle when Mode is InsertInto.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.ReferenceElement">
            <summary>
            If this value is not null, it is used as reference for sizing.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.InsertionLineWidth">
            <summary>
            Get or set the width in pixels of the insertion line.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.Mode">
            <summary>
            Get or set whether to display a line indicating a position betweeen two items or a highlight box
            indicating that the drop will result in item being placed into the target.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.LineCap">
            <summary>
            Get or Set a PathGeometry to use as line cap. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.LineCapPosition">
            <summary>
            Get or Set whether the LineCap is shown at the Start, End, or Both ends of the insertion line.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.InsertionAdorner.VisualChild">
            <summary>
            Overriding to return the root of the visual child.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TemplatedDragDropAdorner">
            <summary>
            Implementation of a DragDropAdorner which uses a ContentPresenter as VisualChild.
            The ContentPresnter's ContentTemplate should be provided via the constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TemplatedDragDropAdorner.#ctor(System.Windows.UIElement,System.Windows.DataTemplate,System.Object)">
            <summary>
            Construct with the adorned element, custom DataTemplate and object to set as content.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.TemplatedDragDropAdorner.VisualChild">
            <summary>
            Overriding to return the content presenter as VisualChild.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.BindingExtension">
            <summary>
            Defines an binding extension.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BindingExtension.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.BindingMode,System.Windows.Data.IValueConverter,System.Object,System.Windows.Data.UpdateSourceTrigger,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Windows.Controls.ValidationRule})">
            <summary>
            Create and set a binding on a dependency property of a DependencyObject.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BindingExtension.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingMode,System.Windows.Data.IValueConverter,System.Object,System.Windows.Data.UpdateSourceTrigger,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Windows.Controls.ValidationRule})">
            <summary>
            Create and set a binding on a dependency property of a DependencyObject.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.BindingExtension.Unbind(System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Clears a binding.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.DependencyExtensions">
            <summary>
            Exports extension methods related to DependencyProperties and DependencyObjects.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DependencyExtensions.IsDefaultValue(System.Windows.DependencyProperty,System.Windows.DependencyObject)">
            <summary>
            Returns true if the value of the dependency property is its default value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DependencyExtensions.IsUnsetValue(System.Windows.DependencyProperty,System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Returns true if the value of ReadLocalValue == DependencyProperty.UnsetValue. Optionally doing an additional check for IsDefaultValue.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.DependencyExtensions.IsUnsetValue(System.Windows.DependencyProperty,System.Windows.DependencyObject,System.Windows.BaseValueSource[])">
            <summary>
            Returns true if the target's local value for the DP is DependencyProperty.UnsetValue and the BaseValueSource of the target's value is contained in the checkSources array.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ItemsControlExtensions">
            <summary>
            Exports Extension methods associated with ItemsControl.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlExtensions.GetItemContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Returns an enumeration of the containers for the items if the ItemsControl.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlExtensions.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Returns the Panel which is used as host for the containers of the items in the ItemsControl.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlExtensions.RemoveItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Removes the object from the ItemsControl. If the control's ItemsSource is 
            being used, then the specified list is modified. Otherwise, the Items collection is modified directly.
            </summary>       
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlExtensions.RemoveContainer(System.Windows.Controls.ItemsControl,System.Windows.UIElement)">
            <summary>
            Removes the item contained by container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlExtensions.MoveItem(System.Windows.Controls.ItemsControl,System.Object,System.Int32)">
            <summary>
            Moves the item from its current position to the specified position. If the control's ItemsSource is 
            being used, then the specified list is modified. Otherwise, the Items collection is modified directly.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ItemsControlExtensions.AddItem(System.Windows.Controls.ItemsControl,System.Object,System.Int32)">
            <summary>
            Inserts an object into the control's ItemsSource collection, if specified, else its Items collection.
            Will raise an exception if the data type is incompatible with the the underlying list of ItemsSource.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.MousePositionExtension">
            <summary>
            During drag-and-drop operations, the position of the mouse cannot be reliably determined through GetPosition. 
            This is because control of the mouse (possibly including capture) is held by the originating element 
            of the drag until the drop is completed, with much of the behavior controlled by underlying Win32 calls.
            
            Position cannot be reliably determined by DragDropArgs GetPosition either.
            
            The problem is more widespread than just drag-and-drop, though. It actually has to do with mouse capture 
            (as the quote states) - and so anytime that an element is doing something funky with mouse capture, 
            there is no guarantee that the position returned by Mouse.GetPosition will be correct.
            
            Humble thankyou goes to http://www.switchonthecode.com/tutorials/wpf-snippet-reliably-getting-the-mouse-position
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ReflectionExtensions">
            <summary>
            Defines a collection of extension methods which are based on Reflection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReflectionExtensions.GetAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the first attribute of type T in the property's Attributes collection, or null if 
            an attribute of type T is not in the collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReflectionExtensions.ResetValue(System.ComponentModel.PropertyDescriptor,System.Object,System.Boolean)">
            <summary>
            If property's CanResetValue method returns true, then the property's ResetValue method is called. Otherwise, if inferDefault is true, 
            and if poperty.CanResetValue could not return true under any cirmstances, then the default value is infered from the property type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReflectionExtensions.HasProperty(System.Object,System.String)">
            <summary>
            Uses reflection to determine if a property referenced by propertyPath exists on the object.
            propertyPath may be a complex paty with property names separated by '.'
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReflectionExtensions.GetProperty(System.Object,System.String)">
            <summary>
            Uses reflection to find the property referenced by propertyPath.
            propertyPath may be a complex path with property names separated by '.'
            Returns null if no property exists at the givin path.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ReflectionExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Uses reflection to find the property referenced by propertyPath and return its value.
            propertyPath may be a complex paty with property names separated by '.'
            Returns null if no property exists at the givin path.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.MaskProperty">
            <summary>
            Using a DependencyProperty as the backing store for Mask.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.
            Implements a behavior whereby, when Text is set to a non-null value, the text box's Text property is set equal to Text.
            If the property is not set directly on a text box, then the element's descendent tree is searched for
            first instance of a text box which is used if found.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.InitialTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for InitialText.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.SelectAllOnFocusProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectAllOnLoad.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.SelectAllOnLoadProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectAllOnLoad.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.RejectNonNumericValuesForTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for RestrictToType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.UpdateOnEnterProperty">
            <summary>
            Sets up a behavior whereby a TextBox's Text property's Binding is source updated in response to the enter key being pressed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.GetUpdateOnEnter(System.Windows.Controls.TextBox)">
            <summary>
            Gets attatched property UpdateOnEnter.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.SetUpdateOnEnter(System.Windows.Controls.TextBox,System.Boolean)">
            <summary>
            Sets attached property UpdateOnEnter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.StringFormatProperty">
            <summary>
            This attached property sets up a behavior whereby a TextBox's Text property's Binding is
            created or modified to include the provided format string.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.GetStringFormat(System.Windows.Controls.TextBox)">
            <summary>
            Get attached property StringFormat.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.SetStringFormat(System.Windows.Controls.TextBox,System.String)">
            <summary>
            Set attached property StringFormat.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.AutoCompleteOptionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoCompleteOptions.
            Provides options for the AutoComplete behavior.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.GetAutoCompleteOptions(System.Windows.DependencyObject)">
            <summary>
            Get value for AutoCompleteOptions.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.SetAutoCompleteOptions(System.Windows.DependencyObject,DevComponents.WPF.Controls.AutoCompleteOptions)">
            <summary>
            Sets value for AutoCompleteOptions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.TextBoxBehavior.AutoCompleteListProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoCompleteList.
            Implements a behavior whereby the TextBox text is populated with nearest match to value in AutoCompleteList.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.GetAutoCompleteList(System.Windows.FrameworkElement)">
            <summary>
            Get value for AutoCompleteList.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.TextBoxBehavior.SetAutoCompleteList(System.Windows.FrameworkElement,System.Collections.IEnumerable)">
            <summary>
            Set value for AutoCompleteList.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.TextBoxBehavior.TextBoxHelper">
            <summary>
            Helper class for managing behaviors of TextBox.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.UIElementExtensions">
            <summary>
            Exports extension methods related to UIElement.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UIElementExtensions.IsContextMenuOpenWithin(System.Windows.FrameworkElement)">
            <summary>
            Returns true if there is a FrameworkElement withing the visual tree of element which has
            a context menu and that context menu is open.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UIElementExtensions.GetTransform``1(System.Windows.UIElement,System.Boolean)">
            <summary>
            Gets an existing transform of a specific type, it one exists, either as the element's RenderTransform, or as a member of a TransformGroup which is set as the element's RenderTransform.
            Optionally, create a new instance of the transform if an existing one is not found.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UIElementExtensions.IsPointWithin(System.Windows.UIElement,System.Windows.Point,System.Nullable{System.Windows.Thickness})">
            <summary>
            Returns true if the point is within the bounds of the element. Position must be relative to the element.
            Uses element's RenderSize for determining bounds.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UIElementExtensions.FocusOn(System.Windows.UIElement)">
            <summary>
            Calls Focus() on the first visual child of element which can recieve focus.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UIElementExtensions.ToImage(System.Windows.UIElement)">
            <summary>
            Creates an Image from the UIElement.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.UIElementExtensions.ToVisualBrush(System.Windows.UIElement)">
            <summary>
            Creates a VisualBrush from element.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.VisualTreeExtensions">
            <summary>
            Defines VisualTreeExtensions
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.HitTestForAll``1(System.Windows.UIElement,System.Windows.Point,System.Predicate{``0})">
            <summary>
            Get all visual decendents of type T whose boundaries include position and which meet an optional condition.
            Note that this method does not rely on VisualTreeHelper.HitTest() because that method only returns primitive elements.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.HitTestForAll``1(System.Windows.UIElement,System.Windows.Point,System.Windows.Thickness,System.Predicate{``0})">
            <summary>
            Get all visual decendents of type T whose boundaries include position plus margin and which meet an optional condition.
            Note that this method does not rely on VisualTreeHelper.HitTest() because that method only returns primitive elements.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.HitTestForOne``1(System.Windows.UIElement,System.Windows.Point,System.Predicate{``0})">
            <summary>
            Get the first visual decendent of type T whose boundaries include position and which meets an optional condition.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.HitTestForOne``1(System.Windows.UIElement,System.Windows.Point,System.Windows.Thickness,System.Predicate{``0})">
            <summary>
            Get the first visual descendent of type T whose boundaries include position plus margin and which meets an optional condition.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.GetVisualRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the root visual.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.IsVisualDescendentOf(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>
            Returns true if the element is a visual descendent of the parent. 
            If element is not a Visual or Visual3D, return value is false.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.GetVisualParent``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Get the first visual parent in the visual tree which is of a specific type, with the option to include the initial descendent.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.GetVisualParent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Get the first visual parent in the visual tree which is of a specific type, with the option
            to include logical parents.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.GetFirstDescendent``1(System.Windows.DependencyObject,System.Predicate{``0})">
            <summary>
            Get the first descendent of a specified type from the visual tree in a breadth first search.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.GetTemplatedVisuals``1(System.Windows.DependencyObject)">
            <summary>
            Get all of an element's visual descendents of a specific type, and which have the element as templated parent.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VisualTreeExtensions.GetVisuals``1(System.Windows.DependencyObject,System.Predicate{``0})">
            <summary>
            Get all of an element's visual descendents of a specific type, and that optionally meed a condition.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColumnPresenter">
            <summary>
            Implementation of control responsible for rendering a single column. Serves as container for items of ColumnsPresenter.
            This object is responsible for rendering the vertical grid line for the column.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.BorderBrushKey">
            <summary>
            Resource key identifying the Style of the Path which is used to indicate column sort.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderForegroundKey">
            <summary>
            Resource key identifying the Style of the Path which is used to indicate column sort.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.ColumnSortGlyphStyleKey">
            <summary>
            Resource key identifying the Style of the Path which is used to indicate column sort.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderMarginKey">
            <summary>
            Resource key identifying the Style of the Path which is used to indicate column sort.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderSelectHighlightForegroundKey">
            <summary>
            Identifies the brush used for the foreground of the column header when it is highlighted and HeaderClickBehavior == SelectColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderSelectHighlightBackgroundKey">
            <summary>
            Identifies the brush used for the background of the column header when it is highlighted and HeaderClickBehavior == SelectColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderSelectHighlightBorderBrushKey">
            <summary>
            Identifies the brush used for the background of the column header when it is highlighted and HeaderClickBehavior == SelectColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderHighlightForegroundKey">
            <summary>
            Identifies the brush used for the foreground of the column header when it is highlighted and HeaderClickBehavior == SortByColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderHighlightBackgroundKey">
            <summary>
            Identifies the brush used for the background of the column header when it is highlighted and HeaderClickBehavior == SortByColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderHighlightBorderBrushKey">
            <summary>
            Identifies the brush used for the background of the column header when it is highlighted and HeaderClickBehavior == SortByColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderHighlightBorderThicknessKey">
            <summary>
            Resource key identifying the Thickness of the border around the highlight box of column header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderPressedForegroundKey">
            <summary>
            Identifies the brush used for the foreground of the column header when it is pressed and HeaderClickBehavior == SortByColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderPressedBackgroundKey">
            <summary>
            Identifies the brush used for the background of the column header when it is pressed and HeaderClickBehavior == SortByColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderPressedBorderBrushKey">
            <summary>
            Identifies the brush used for the background of the column header when it is pressed and HeaderClickBehavior == SortByColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.ColumnSelectedHeaderForegroundKey">
            <summary>
            Identifies the brush used for the foreground of the column header when the entire column is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.ColumnSelectedHeaderBackgroundKey">
            <summary>
            Identifies the brush used for the background of the column header when the entire column is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.ColumnSelectedHeaderBorderBrushKey">
            <summary>
            Identifies the brush used for the border of the column header when the entire column is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.CellSelectedHeaderForegroundKey">
            <summary>
            Identifies the brush used for the background of the header when a cell in this column is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.CellSelectedHeaderBackgroundKey">
            <summary>
            Identifies the brush used for the background of the header when a cell in this column is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.CellSelectedHeaderBorderBrushKey">
            <summary>
            Identifies the brush used for the border of the header when a cell in this column is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.SelectedInactiveHeaderForegroundKey">
            <summary>
            Identifies the brush used for the border of the header when either the column or a cell within the column is selected and the parent table does not have focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.SelectedInactiveHeaderBorderBrushKey">
            <summary>
            Identifies the brush used for the border of the header when either the column or a cell within the column is selected and the parent table does not have focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.SelectedInactiveHeaderBackgroundKey">
            <summary>
            Identifies the brush used for the background of the header when either the column or a cell within the column is selected and the parent table does not have focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderClickedEvent">
            <summary>
            Using RoutedEvent as backing for HeaderClicked
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.SelectedEvent">
            <summary>
            Using RoutedEvent as backing for HeaderClicked
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.UnselectedEvent">
            <summary>
            Using RoutedEvent as backing for HeaderClicked
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.PinChangedEvent">
            <summary>
            Using a RoutedEvent as the backing store for PinChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.AlternationIndexProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlternationIndex.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.HeaderGridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderGridLineBrush.    
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.IsCellSelectedWithinProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCellSelectedWithin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.IsSelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnPresenter.PinProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pin.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnPresenter.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnPresenter.OnHeaderClicked(System.Windows.RoutedEventArgs)">
            <summary>
            Virtual method called when the header is clicked. Raises the HeaderClicked routed event. 
            Handle the event args to supress default behavior.
            Use property HeaderClickBehavior to define default behavior.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnPresenter.OnSelected">
            <summary>
            Virtual method called when property IsSelected of the ColumnDefinition 
            associated with this column presenter changes from true to false.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnPresenter.OnUnselected">
            <summary>
            Virtual method called when property IsSelected of the ColumnDefinition 
            associated with this column presenter changes from false to true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnPresenter.OnPinChanged">
            <summary>
            Virtual method called to raise the PinChanged routed event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColumnPresenter.HeaderClicked">
            <summary>
            Event raised when the header is clicked on. Handle this event to suppress default handling.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColumnPresenter.Selected">
            <summary>
            Event raised when the header is clicked on. Handle this event to suppress default handling.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColumnPresenter.Unselected">
            <summary>
            Event raised when the header is clicked on. Handle this event to suppress default handling.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColumnPresenter.PinChanged">
            <summary>
            Routed event raised when the value of Pin changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.ColumnDefinition">
            <summary>
            Get the ColumnDefinition which defines the column this control is presenting.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.AlternationIndex">
            <summary>
            Hosting panel sets this value based on column definition collection's AlternationCount property. It can be used to alternate background colors for the columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.HeaderBackground">
            <summary>
            Get or Set the background for the column header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.HeaderBorderThickness">
            <summary>
            Get or set the border thickness for the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.HeaderBorderBrush">
            <summary>
            Get  or set the brush used for the border of the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.HeaderGridLineBrush">
            <summary>
            Get or set the Brush for the grid line as it extends into the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.HeaderGridLineWidth">
            <summary>
            Get or set the width of the grid line as it extends into the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.IsCellSelectedWithin">
            <summary>
            Gets whether there is a cell in this column that is selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.IsSelectable">
            <summary>
            Get or Set whether this column can be selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.IsSelected">
            <summary>
            Get or set whether the column is selected. This property is bound to ColumnDefinition.IsColumnSelected
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnPresenter.Pin">
            <summary>
            Gets or sets whether the column is pinned to the left or right of the view. This property is bound to the Pin property of ColumnDefinition.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColumnsPresenterPanel">
            <summary>
            Custom panel serves as items host for ColumnsPresenter. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenterPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to measure.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenterPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overriding to perform arrangement.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTree">
            <summary>
            Implementation of the DevComponents AdvTree control. Inherits from ItemsControl. (Cannot inherit from MuiltSelector, because MultiSelector 
            enforces internally that SelectedItem and SelectedItems must be members of ItemsControl.Items collection. But this is the case only for top
            level tree view items.)
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.BorderThicknessKey">
            <summary>
            Identifies resource for BorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.BorderBrushKey">
            <summary>
            Identifies resource for BorderBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.BackgroundKey">
            <summary>
            Identifies resource for Background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.PaddingKey">
            <summary>
            Identifies resource for Padding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ScrollViewerStyleKey">
            <summary>
            Identifies resource for the style applied to the ScrollViwer.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ColumnHeaderDropAdornerTemplateKey">
            <summary>
            Identifies resource which defines DataTemplate for DropAdorner used by column headers.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ColumnHeaderDragAdornerTemplateKey">
            <summary>
            Identifies resourced which defines DataTemplate for the DragAdorner used by column headers.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ColumnHeaderBackgroundKey">
            <summary>
            Resource key identifying the Brush used to paint the background of the Header area.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ColumnPaddingKey">
            <summary>
            Resource key identifying a resource defining value for Padding. Note that by default, the contained ColumnPresenter objects inherit this value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ColumnForegroundKey">
            <summary>
            Resource key identifying the brush used for Foreground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.GridLineBrushKey">
            <summary>
            Resource key identifying the Brush used to paint the Grid Lines.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.CalculateFullExtentOnLoadProperty">
            <summary>
            Using a DependencyProperty as the backing store for CalculateFullExtentOnLoad.       
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.CellSelectProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellSelect.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.DoubleClickExpandsNodeProperty">
            <summary>
            Using a DependencyProperty as the backing store for DoubleClickToExpandNode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ItemTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ItemTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemTemplateSelector.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.MultiSelectRuleProperty">
            <summary>
            Using a DependencyProperty as the backing store for MultiSelect.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.SelectionBoxTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for NodeHighlightType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTree.ShowRootLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowRootLines.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.IndexFromItem(System.Object)">
            <summary>
            Overriding to return FLATTENED index of item. To obtain index of the item within 
            the tree's top level of items, call ItemContainerManager.IndexFromContainer().
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.IndexFromContainer(DevComponents.WPF.Controls.AdvRowControl)">
            <summary>
            Overriding to return FLATTENED index of the node. To obtain index of the node within 
            the tree's top level of items, call ItemContainerManager.IndexFromContainer().
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.ContainerFromIndex(System.Int32,System.Boolean)">
            <summary>
            Overriding to return the node at the tree's FLATTENED index. To obtain the node at
            the index within the tree's Items collection return ItemContainerManager.ContainerFromIndex().
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.CanAddtoCurrentSelection(DevComponents.WPF.Controls.AdvRowControl)">
            <summary>
            Overriding to extend base class logic for whether a node can be added to the current selection when selection mode is multiple
            or extended. In particular, applies MultiSelectRule.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.CanAddtoCurrentSelection(DevComponents.WPF.Controls.AdvCellControl)">
            <summary>
            Overriding to extend base class logic for whether a cell can be added to the selection. In particular, MultiSelectRule is applied.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.Remove(DevComponents.WPF.Controls.AdvTreeNode)">
            <summary>
            Removes the node from its parent node and the data item for which node is the container from its parent's Items collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.CollapseAll(System.Boolean)">
            <summary>
            Collapse all expanded noCodes. If deep == true, then all expanded nodes within the entire hierarchy are collapsed,
            otherwise only the top level nodes are collapsed, and when re-expanded will remember which nodes in the descendent tree are expanded.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.ExpandToLevel(System.Int32)">
            <summary>
            Exppands all branches to a givin level of the hierarchy. If level == 0, then all nodes within the entire tree are expanded.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.ExpandToItem(System.Object,DevComponents.WPF.Controls.AdvTreeNodeSearchMethod,System.Boolean)">
            <summary>
            Expands the entire branch leading to a givin item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.ExpandToItem``1(System.Predicate{``0},DevComponents.WPF.Controls.AdvTreeNodeSearchMethod,System.Boolean)">
            <summary>
            Expands the entire branch leading to an item which is specified by a predicate function.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.FindNode(System.Object,DevComponents.WPF.Controls.AdvTreeNodeSearchMethod,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Finds the AdvTreeNode which is container for the specified item using the specified search method. 
            If createIfUnrealized == false, then only realized nodes will be returned. Collapsed nodes are 
            included in the search if searchCollapsed == true. If searchCollapsed == null, the search is first 
            performed on expanded nodes only, then if not found, search is performed again with search collapsed set to true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.IsItemSelected(System.Object)">
            <summary>
            Return true if the item is selected.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.GetNodeAt(System.Windows.Point)">
            <summary>
            Returns the Node who's header is at the position. Position is relative to the tree view.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.GetNodeAtVerticalPosition(System.Double)">
            <summary>
            Returns the Node who's header is at the vertical position. Position is relative to the tree view.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.GetNodeAt(System.Int32,System.Boolean)">
            <summary>
            Gets the node at the specified index within the flattenned tree. Optionally creates
            the node if it has not yet been realized or has been virtualized. Note that this calling this method is the same as 
            calling ContainerFromIndex().
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTree.IndexOf(DevComponents.WPF.Controls.AdvTreeNode)">
            <summary>
            Gets the index of the node within the Tree. This is the flattened index, disregarding the hierarchy.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.CanGroup">
            <summary>
            Returns true. AdvTree now supports grouping.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.ExistingNodes">
            <summary>
            Returns an enumeration of all realized nodes at all levels of the hierarchy.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.FirstVisibleNodeIndex">
            <summary>
            Returns the index in flattened tree of the first visible node.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.LastVisibleNodeIndex">
            <summary>
            Returns the index in flattened tree of the last visible node.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.LogicalExtent">
            <summary>
            Returns the number of nodes currently available for viewing, including all children of expanded nodes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.EffectiveColumnDefinitions">
            <summary>
            ColumnDefinitionCollection can set sorting and grouping of the items it has control over.
            The tree's ColumnDefinitions are used to define the column headers. But it cannot be gauranteed
            that it is intended for the tree's items to be the items targetted by the column definition collection. 
            Those items could be the child items of the tree's top level nodes, if the top level nodes are being used for example as group headers. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.CalculateFullExtentOnLoad">
            <summary>
            Get or set whether the full vertical extent should be calculated when the tree loads data. For very, very large data sets with
            a vary many expanded nodes defined at load, this process might involve a performance hit. In such a case, it might be better to turn off the feature. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.CellSelect">
            <summary>
            Get or Set whether cell selection is enabled. This property is ignored if no CellDefinitions are defined. This is a dependency propeorty
            The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.DoubleClickExpandsNode">
            <summary>
            Get or Set whether double clicking on a node toggles its IsExpanded state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.ItemTemplate">
            <summary>
            Gets or Sets a DataTemplate which shows how to render the Headers of child nodes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.ItemTemplateSelector">
            <summary>
            Get or set a DataTemplateSelector which is used to select ItemTemplate based on specific item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.MultiSelectRule">
            <summary>
            Get or set the rule to apply when in multi select mode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.SelectionBoxType">
            <summary>
            Get or Set the style which is used to render the selection and highlight boxes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.ShowRootLines">
            <summary>
            Get or Set whether the Root Lines are drawn. This property will apply to all Nodes in the tree, unless overridden by a specific node.
            Root lines are the connecting lines between the 
            header of this node and the expander button of the parent node. This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.CellSelectInternal">
            <summary>
            Overriding to fulfill abstract contract. Always returns CellSelect.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.ExistingRows">
            <summary>
            Overriding to parse tree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTree.HandlesScrolling">
            <summary>
            Overriding to prevent the scroll viewer from attempting to managing scrolling with keyboard input.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColumnDefinition">
            <summary>
            Provides a definition of a single column. Is meant to be member of ColumnDefinitionCollection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinition.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Overriding to raise PropertyChanged event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.AllowColumnResizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnResize.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.BackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for Background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.BeginEditTriggerModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for BeginEditTrigger. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.BindingMemberPathProperty">
            <summary>
            Using a DependencyProperty as the backing store for BindingMemberPath.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CanGroupByProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanGroupBy.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellContentTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellEditorStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellEditorStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellEditTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellEditTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellForegroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellForeground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellHorizontalContentAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellHorizontalContentAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellIsEditableProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellIsEditable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellIsSelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellIsSelectable. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellPaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellPadding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for CellStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.CellVerticalContentAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellVerticalContentAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.ColumnFilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnFilter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.ColumnIndexProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnIndex.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.ColumnSortProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnSort.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.ContextMenuOptionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ContextMenuOptions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.DoubleClickHeaderGridlineSizesToContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for DoubleClickHeaderGridlineSizesToContent.    
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.EditorSettingsProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorSettings.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.GridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridLineBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.GridLineWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridLineWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.GridLineVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridLineVisibility.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.GroupByLevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupByLevel.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.GroupItemDescriptorProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupItemDescriptor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderTemplateSelectorProperty">
            <Summary>
            Backing store for HeaderTemplateSelector.
            </Summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderClickBehaviorProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderClickBehavior.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HeaderClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.HorizontalContentAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalContentAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.IsColumnVirtualizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsColumnVirtualized.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.IsLockedProperty">
            <summary>
            Using a DependencyProperty as the backing store for Locked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.IsSelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.PinProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.PixelWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for PixelWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.PaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for Padding. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.PresenterStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for PresenterStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.ShowHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowHeader.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.SortPriorityLevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortPriorityLevel.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.StringFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for StringFormat.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.WidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for Width.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.VerticalContentAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalContentAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinition.VisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for Visibility.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinition.SetSizeToFitContent">
            <summary>
            Causes column to be sized so that cell content fit in view.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.ColumnDefinition.PropertyChanged">
            <summary>
            Event raised when a dependency property changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Id">
            <summary>
            Not used internally. Provided for client use only.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.AutoSizeToFitContent">
            <summary>
            A value of true will cause column width to be resized if necessary to show data of cell in a new row.
            Applies only if GridUnitType for Width is set to Auto and then only if the user has not manually sized the column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.ParentCollection">
            <summary>
            Access the parent column definition collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.AutoSizePadding">
            <summary>
            Get or set a number of pixels to be added to a cell's desired size when calculating auto size for this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Binding">
            <summary>
            Set (or Get) a Binding to use for binding Cell Content property. When set, will be used instead of BindingMemberPath.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.SelectedCellRowItems">
            <summary>
            Collection of the data objects (items) associated with the rows of the selected cells within this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.PinCommand">
            <summary>
            Gets a Command which when executed changes the value of ColumnPin to equal the value of the command's parameter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.IndexInParent">
            <summary>
            Gets the index of this column within its parent collection.
            (Including "fixed" columns - which are not part of ColumnDefinitionCollection proper.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.AllowColumnResize">
            <summary>
            Get or Set whether the column can be resized by dragging with the mouse.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Background">
            <summary>
            Get or set the column's background.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.BindingMemberPath">
            <summary>
            Get or Set a the path to the value property member relative to the data source of the current Node.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CanGroupBy">
            <summary>
            Get or set whether items can be grouped by this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellContentTemplate">
            <summary>
            Get or Set the data template to use for the Cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellEditTemplate">
            <summary>
            Gets or Sets the ControlTemplate applied the EditingContentControl which is used to edit the cell's content, when IsEditable is true.
            Note: If a style for the cell is defined and sets a value that is different from the value set here,
            the cell style will take precedence.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellForeground">
            <summary>
            When set, overrides the Foreground property of Cells in this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellHorizontalContentAlignment">
            <summary>
            Gets or Sets the HorizontalContentAlignment property for a cell based on this ColumnDefinition.
            Note: If a style for the cell is defined and sets a value that is different from the value set here,
            the cell style will take precedence.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellIsEditable">
            <summary>
            Get or Set whether the Cell is editable. Note: If a style for the cell is defined and sets a value that is different from the value set here,
            the cell style will take precedence.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellIsSelectable">
            <summary>
            Get or Set whether the cell can be selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellPadding">
            <summary>
            When set, specifies the Padding for Cells of this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellStyle">
            <summary>
            Get or Set the style to apply to a cell which is based on this definition.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.CellVerticalContentAlignment">
            <summary>
            Gets or Sets the CellVerticalContentAlignment property for a cell based on this ColumnDefinition.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.ColumnFilter">
            <summary>
            Gets or sets a predicate by which row are filtered according to the values in this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.ColumnIndex">
            <summary>
            Get or set the value which determines the order in which this column is displayed. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.ColumnSort">
            <summary>
            Get or set the current sort status of the column. Changing from None to either Ascending or Descending will 
            result in SortPriorityLevel automatically being set to 1. Changing to None will automatially cause SortPriorityLevel be changed to 0.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.ContextMenuOptions">
            <summary>
            Gets or sets the options which determine what is avaiable in the built-in context menu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.DoubleClickHeaderGridlineSizesToContent">
            <summary>
            Get or set whether double click on the header gridline causes the column to size to content.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.EditorSettings">
            <summary>
            Get or Set the EditorSettings which is used to provide options for the cell editing control.
            If unset by client, a default editor value is assigned based on the type of the bound property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.GridLineBrush">
            <summary>
            Get or Set the brush to use for the Grid Lines when visible. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.GridLineWidth">
            <summary>
            Get or Set the width of a grid line.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.GroupByLevel">
            <summary>
            Gets or sets the level at which items are grouped against the values in this column. Ignored if CanGroupBy is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.GroupItemDescriptor">
            <summary>
            Get or set a GroupItemDescriptor for the group item that is displayed when this column is grouped. (GroupByLevel > 0)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Header">
            <summary>
            Get or Set the Header content for the column based on this ColumnDefinition.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.HeaderTemplate">
            <summary>
            Get or Set the DataTemplate which shows how to render the Header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.HeaderTemplateSelector">
            <summary>
            Gets or sets a DataTemplateSelector to use for selecting the header template for this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.HeaderBackground">
            <summary>
            Get or Set the background brush that will be used for the header of this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.HeaderClickBehavior">
            <summary>
            Get or set what happens when the user clicks on the header. Default value is Nothing. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.HeaderClickMode">
            <summary>
            Get or set whether a column header click occures on mouse down or mouse up.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.HorizontalContentAlignment">
            <summary>
            Get or set the horizontal content alignment of header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.IsCellSelectedWithin">
            <summary>
            Get whether there is one or more selected cells in this column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.IsColumnVirtualized">
            <summary>
            Gets whether the cells in this column could be virtualized.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.IsLocked">
            <summary>
            Get or Set whether the end user can move this column with a drag operation. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.IsSelectable">
            <summary>
            Get or Set whether this column can be selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.IsSelected">
            <summary>
            Get or set whether this entire column is selected.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Pin">
            <summary>
            Get or set whether the column is pinned and if so, which side. A pinned column will remain in place
            when scrolling horizontally.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.PixelWidth">
            <summary>
            Gets the width of the column in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Padding">
            <summary>
            Get or Set the Padding which is applied to the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.PresenterStyle">
            <summary>
            Get or Set a Style to apply to the ColummnPresenter which presents this Column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.ShowHeader">
            <summary>
            Gets or Sets a value which determines whether the Header is visible. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.SortPriorityLevel">
            <summary>
            Get or set the priority level of sort by column for this column. Value of 1 is highest priority (i.e. rows are sorted first by this column).
            Value of 0 is same as if ColumnSort is None. If ColumnSort is None or Unsortable, setting this property will have no effect.
            Setting to 0 will cause ColumnSort to be set to None automatically.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.StringFormat">
            <summary>
            Defines a format string to use when binding data to cell content. This value is 
            used for the StringFormat property of the Binding class.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Width">
            <summary>
            Get or Set the width of the Cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.VerticalContentAlignment">
            <summary>
            Get or set the horizontal content alignment of header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinition.Visibility">
            <summary>
            Get or Set the visibility of this set of cells.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.PaddingKey">
            <summary>
            Identifies resource for Padding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.ForegroundKey">
            <summary>
            Resource key identifying the brush used for Foreground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.SelectedForegroundKey">
            <summary>
            Resource key identifying the brush used for Foreground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.HighlightedForegroundKey">
            <summary>
            Resource key identifying the brush used for Foreground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.SelectionBoxBorderStyleKey">
            <summary>
            Resource key identifying the style applied to the border which draws the selection box.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.SelectionBoxBorderBrushKey">
            <summary>
            Resource key identifying the brush used for the selection box border.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.SelectionBoxBackgroundKey">
            <summary>
            Resource key identifying the brush used for the selection box background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.HighlightBoxBorderStyleKey">
            <summary>
            Resource key identifying the style applied to the border which draws the highlight box.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.HighlightBoxBorderBrushKey">
            <summary>
            Resource key identifying the brush used for the highlight box border.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.HighlightBoxBackgroundKey">
            <summary>
            Resource key identifying the brush used for the highlight box background.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.InactiveSelectionBoxBackgroundKey">
            <summary>
            Resource key identifying the brush used for the background when the parent tree is inactive.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.InactiveSelectionBoxBorderBrushKey">
            <summary>
            Resource key identifying the brush used for the border when the parent tree is inactive.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeCell.ErrorTemplateKey">
            <summary>
            Identifies the default ErrorTemplate for this control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeCell.ParentNode">
            <summary>
            Get reference to this node's parent node, if there is a parent. (ParentNode will be null for top level nodes.)
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.ColumnDefinitionCollection">
            <summary>
            Implementation of a collection class for ColumnDefinitions. 
            Inherits from FrameworkContentElement mainly for the ability to use ElementName and DataContext bindings.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.Add(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Add an item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.IndexOf(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Get index of item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.Insert(System.Int32,DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Insert
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item at index.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.Contains(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Returns true if item is in collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.CopyTo(DevComponents.WPF.Controls.ColumnDefinition[],System.Int32)">
            <summary>
            Copy contents into array
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.Remove(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Remove the item.
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.AllowColumnReorderProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnReorder.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.AllowColumnResizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnResize.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.AlternationCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlternationCount.   
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.BorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBorderBrush. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.BorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for BorderThickness. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.CellPaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellPadding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.CellStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for CellStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.ColumnFilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnFilter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.ColumnStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.ColumnsPresenterStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnsPresenterStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.ContextMenuOptionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ContextMenuOptions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.DoubleClickHeaderGridlineSizesToContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for DoubleClickHeaderGridlineSizesToContent.    
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.GridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridLineBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.GridLineWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridLineWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackgroundBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderClickBehaviorProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderClickBehavior.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.HorizontalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.HorizontalContentAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalContentAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.IsContextMenuEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsContextMenuEnabled. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.IsUserSortByColumnEnabledProperty">
            Using a DependencyProperty as the backing store for IsUserSortByColumnEnabled.
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.MarginProperty">
            <summary>
            Using a DependencyProperty as the backing store for Margin. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.PaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for Padding. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.ShowGridLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowGridLines.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.ShowHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowHeader.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnDefinitionCollection.VerticalContentAlignmentProperty">
            <summary>
            Using a DependencyProperty for VerticalContentAlignment
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Virtual method called to raise the CollectionChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.OnColumnPropertyChanged(DevComponents.WPF.Controls.ColumnDefinition,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Virtual method called to raise the ColumnPropertyChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.OnRenderDataInvalidated(DevComponents.WPF.Controls.ColumnDefinition,DevComponents.WPF.Controls.ColumnRenderDataInvlidatedReason,System.Object)">
            <summary>
            Virtual method called to raise the RenderDataInvalidated event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.OnColumnSortChanging(DevComponents.WPF.Controls.ColumnSortChangingEventArgs)">
            <summary>
            Virtual method called to raise the ColumnSortChanging event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.OnSelectedColumnsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Virtual method called to raise the SelectedColumnsChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnDefinitionCollection.EnsureInheritedProperties(DevComponents.WPF.Controls.ColumnDefinition)">
            <summary>
            Virtual method which ensures columns inherit properties from the collection when appropriate.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.PinnedColumnSeparatorVisiblityOption">
            <summary>
            Options for showing the pinned column separator. Ignored if there are no pinned columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.MaximumSortPriorityLevel">
            <summary>
            Specifies the maximum number of SortDescriptions which can be added to the SortDescriptions collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.SelectedColumns">
            <summary>
            Returns an enumeration of the selected columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.PinOrderedVisibleColumns">
            <summary>
            Returns an enumeration of the visible columns, in the order in which they are presented.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HasSelectedColumns">
            <summary>
            Returns true if there are columns in the collection with IsSelected == true;
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.SortDescriptions">
            <summary>
            Get the set of sort descriptions used for sorting by column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.GroupDescriptions">
            <summary>
            Get the set of group descriptions used for grouping by column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.GroupedColumns">
            <summary>
            The collection of columns which define the grouping by column.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.FocusedColumn">
            <summary>
            Get the column containing the cell which currently has input focus.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.Item(System.Int32)">
            <summary>
            Access ColumnDefinition by index.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.Count">
            <summary>
            Get count of items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.AllowColumnReorder">
            <summary>
            Gets or Sets a value which determines whether the columns can be reordered by user drag and drop operation.
            This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.AllowColumnResize">
            <summary>
            Get or Set whether the columns can be resized by dragging with the mouse.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.AlternationCount">
            <summary>
            Specifies an alternation pattern for columns.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.BorderBrush">
            <summary>
            Get or Set the brush used for the columns border.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.BorderThickness">
            <summary>
            Sets the thickness of the columns border. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.CellPadding">
            <summary>
            When set, specifies the Padding for Cells of all columns, unless overridden by specific column definition.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.CellStyle">
            <summary>
            Get or Set the style to apply to the cells within this collection. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.ColumnStyle">
            <summary>
            Sets the style to use for a ColumnPresenter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.ColumnsPresenterStyle">
            <summary>
            Sets the style for the ColumnsPresenter created to present the columns defined by this collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.ContextMenuOptions">
            <summary>
            Gets or sets the options which determine what is avaiable in the built-in context menu.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.DoubleClickHeaderGridlineSizesToContent">
            <summary>
            Get or set whether double click on the header gridline causes a column to size to content.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.GridLineBrush">
            <summary>
            Get or Set the brush to use for the Grid Lines when visible. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.GridLineWidth">
            <summary>
            Get or Set the brush to use for the Grid Lines when visible. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderBackground">
            <summary>
            Get or set the brush used for header background. This value can be overridden for individual 
            columns via property in the column definition.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderBorderThickness">
            <summary>
            Get or set the thickness of the border for the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderClickBehavior">
            <summary>
            Get or set what happens by default when the user clicks on a column header. Default value is Nothing. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HeaderClickMode">
            <summary>
            Get or set whether a column header click occures on mouse down or mouse up.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HorizontalAlignment">
            <summary>
            Get or Set the Horizontal Alignment for the columns presenter. If the columns presenter has a value set for HorizontalAlignment,
            either directly or via a style, then this value will be ignored.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.HorizontalContentAlignment">
            <summary>
            Get or set a value to be applied as the columns presenter's HorizontalContentAlignment property. 
            Note that contained ColumnPresenters by default inherit their parent's HorizontalContentAlignment property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.IsContextMenuEnabled">
            <summary>
            Gets or Sets whether the built-in context menu associated with the columns is enabled.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.IsUserSortByColumnEnabled">
            <summary>
            Get or Set whether the user can sort columns by clicking on the column header. This property has been superseded by property HeaderClickBehavior.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.Margin">
            <summary>
            Get or Set a value to apply to the Margin of the columns presenter. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.Padding">
            <summary>
            Get or Set the Padding to apply to the Columns Presenter. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.ShowGridLines">
            <summary>
            Get or Set whether grid lines are to be shown for these cells.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.ShowHeader">
            <summary>
            Gets or Sets a value which determines whether the Header is shown. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnDefinitionCollection.VerticalContentAlignment">
            <summary>
            Gets or sets the alignment used for column headers.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeCellPanel">
            <summary>
            Custom panel for rendering the cells of a TreeNode. Derives from AdvCellPanel and adds logic to account for 
            AdvTreeNode's header when determining the width of the first cell and its margin, along with hiding the node's
            header when the first cell width is shrunk.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeCellPanel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeCellPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Overriding to ensure render data setup.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeCellPanel.GetStartingPositionAdjustmentForNonPinnedCells">
            <summary>
            Overriding to handle case where this cell panel is part of a table defined by a Node,
            and not the Tree itself.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeCellPanel.MeasureCell(DevComponents.WPF.Controls.AdvCellControl,System.Double,System.Int32)">
            <summary>
            Overriding to add width of node's indent, expand button etc. to the width used to measure cell if it is the first column.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeCellPanel.GetArrangeWidth(DevComponents.WPF.Controls.AdvCellControl,System.Int32)">
            <summary>
            Overriding to add first cell offset to arrange width of first cell.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeCellPanel.HandleColumnRenderDataInvalidated(System.Object,DevComponents.WPF.Controls.ColumnRenderDataInvidatedEventArgs)">
            <summary>
            Overriding to update render data.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.HeaderBackgroundKey">
            <summary>
            Resource key identifying the Brush used to paint the background of the Header area.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.BorderBrushKey">
            <summary>
            Resource key identifying the brush used to draw the Border. Note that by default, the contained ColumnPresenter objects inherit this value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.PaddingKey">
            <summary>
            Resource key identifying a resource defining value for Padding. Note that by default, the contained ColumnPresenter objects inherit this value.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.ContextMenuItemStyleKey">
            <summary>
            Resource key identifying the style to use for a menu item in the built-in context menu.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.AllowColumnReorderProperty">
            Using a DependencyProperty as the backing store for AllowColumnReorder.
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.AllowColumnResizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnResizeColumn.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.GridLineBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridLineBrush.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.HeaderBackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBackground. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.HeaderBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderBorderThickness.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.HeaderClickModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderClickMode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter._HeaderHeightPropertyKey">
            <summary>
            Using a DependencyProperty as the backing store for HeaderHeight. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.LabelProperty">
            <summary>
            Using a DependencyProperty as the backing store for Label.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.LabelTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.ShowGridLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowGridLines.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.ColumnsPresenter.ShowHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowHeader.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenter.GetContainerForItemOverride">
            <summary>
            Overriding to ensure ColumnPresenter is only container type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.WPF.Controls.ColumnsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Overriding to prepare ColumnPresenter container.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.ColumnDefinitions">
            <summary>
            Get access to the ColumnDefinitionCollection which defines this ColumnsPresenter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.ColumnPresenters">
            <summary>
            Return an enumeration of the ColumnPresenters held by this control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.AllowColumnReorder">
            <summary>
            Get or set whether the user can reorder the columns by dragging the column headers. By default, this property takes 
            its value from the property of same name on the ColumnDefinitionCollection which this view is based on.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.AllowColumnResize">
            <summary>
            Gets or sets whether the user can resize columns by dragging with the mouse.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.HeaderBackground">
            <summary>
            Get or Set the background of the Header. This is a dependency proerty. The default value is unset.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.HeaderClickBehavior">
            <summary>
            Get or set what happens by default when the user clicks on a column header. Default value is Nothing. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.HeaderClickMode">
            <summary>
            Get or set whether the click event of the column header happens on mouse left button press or release.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.HeaderHeight">
            <summary>
            Gets the render height of the header. This is a readonly property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.Label">
            <summary>
            Get or set a label for the columns
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.LabelTemplate">
            <summary>
            Get or set a DataTemplate which shows how to render Label.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.ShowGridLines">
            <summary>
            Get or Set whether grid lines are shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.ColumnsPresenter.ShowHeader">
            <summary>
            Gets or Sets a value which determines whether the Header is shown. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeNode">
            <summary>
            AdvTreeNode is the control which implements a single node of the AdvTree. It derives from AdvRowControl, which in turn is a HeaderedItemsControl.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.PaddingKey">
            <summary>
            Identifies resource for Padding.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ForegroundKey">
            <summary>
            Identifies Brush used by default for Foreground.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.SelectedForegroundKey">
            <summary>
            Identifies Brush used for Foreground when IsSelected = true.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HighlightedForegroundKey">
            <summary>
            Identifies Brush used for Foreground when IsSelected = true.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ErrorTemplateKey">
            <summary>
            Identifies the ControlTemplate used by default for Validation ErrorTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.RowErrorTemplateKey">
            <summary>
            Identifies the ControlTemplate used by default for Validation ErrorTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.VerticalRootLinePenKey">
            <summary>
            Identifies resource for the brush used for vertical root line stroke.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HorizontalRootLinePenKey">
            <summary>
            Identifies resource for the brush used for horizontal root line stroke.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ContainedSelectionBoxBorderStyleKey">
            <summary>
            Identifies resource for the style applied to the border that is the selection box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ContainedHighlightBoxBorderStyleKey">
            <summary>
            Identifies resource for the style applied to the border that is the highlight box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ContainedSelectionBoxBorderBrushKey">
            <summary>
            Identifies resource for the border brush of the selection box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ContainedSelectionBoxBackgroundKey">
            <summary>
            Identifies resource for the background of the selection box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ContainedHighlightBoxBorderBrushKey">
            <summary>
            Identifies resource for the border brush of the highlight box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ContainedHighlightBoxBackgroundKey">
            <summary>
            Identifies resource for the background of the highlight box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FullSelectionBoxBorderStyleKey">
            <summary>
            Identifies resource for the Style applied to the Border that is the Selection box when SelectionBoxType is Full.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FullHighlightBoxBorderStyleKey">
            <summary>
            Identifies resource for the Style applied to the Border that is the Highlight box when SelectionBoxType is Full.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FullSelectionBoxBorderBrushKey">
            <summary>
            Identifies resource for the border brush of the selection box when SelectionBoxType is Full.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FullHighlightBoxBorderBrushKey">
            <summary>
            Identifies resource for the border brush of the highlight box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FullSelectionBoxBackgroundKey">
            <summary>
            Identifies resource for the background of the selection box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FullHighlightBoxBackgroundKey">
            <summary>
            Identifies resource for the background of the highlight box when SelectionBoxType is Contained.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.InactiveSelectionBoxBorderBrushKey">
            <summary>
            Identifies resource for the border brush of the selection box when the parent Tree does not contain focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.InactiveSelectionBoxBackgroundKey">
            <summary>
            Identifies resource for the background of the selection box when the parent Tree does not contain focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.PlusMinusExpanderToggleButtonStyleKey">
            <summary>
            Identifies resource for the style applied to the expander toggle button when ExpanderButtonType is PlusMinus
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.TriangleExpanderToggleButtonStyleKey">
            <summary>
            Identifies resource for the style applied to the expander toggle button when ExpanderButtonType is Triangle
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.PlusMinusExpanderToggleButtonBackgroundKey">
            <summary>
            Identifies the resource for the background of the plus-minus expander toggle button.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.DefaultGroupingStyleKey">
            <summary>
            Itentifies the resource for the style applied to an AdvTreeNode if it's item is a GroupCollectionGroup.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ItemsChangedEvent">
            <summary>
            Using RoutedEvent as backing store for ItemsChanged
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.SortByColumnRequestedEvent">
            <summary>
            Using a Routed Event as backing store for SortByColumnRequested.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CollapsedEvent">
            <summary>
            Using a RoutedEvent as backing for Collapsed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ExpandedEvent">
            <summary>
            Using a RoutedEvent as backing for Expanded.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CheckedEvent">
            <summary>
            Using a RoutedEvent as backing for Checked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.UncheckedEvent">
            <summary>
            Using a RoutedEvent as backing for Unchecked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.EditBeginningEvent">
            <summary>
            Using a RoutedEvent as the backing store for EditBeginning.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.EditCommittedEvent">
            <summary>
            Using a RoutedEvent as backing for EditCommitted event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.DeletingSelectedItemsEvent">
            <summary>
            Using a RoutedEvent as the backing store for DeletingSelectedItems.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.AlternationCountProperty">
            <summary>
            Using a DependencyProperty for AlternationCount.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.BeginEditTriggerModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for BeginEditTrigger.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CanHaveItemsProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanHaveItems.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CanUserDeleteItemProperty">
            <summary>
            Using a DependencyProperty as backing store for CanUserDeleteItem.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CanUserCollapseProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanCollapse.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CellSelectProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellSelect.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.CheckBoxProperty">
            <summary>
            Using a DependencyProperty as the backing store for CheckBox.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ColumnDefinitionsProperty">
            <summary>
            Using a dependency property as the backing store for ColumnDefinitions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.EditorSettingsProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorSettings.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.EditorStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.EditTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ExpanderButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ExpanderButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ExpanderButtonTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ExpanderButtonType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.FilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for Filter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HasItemsPropertyKey">
            <summary>
            Using a DependencyProperty as the backing store for HasItems.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HeaderTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HeaderStringFormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderStringFormat.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.HierarchyLevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for readonly property HierarchyLevel.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ImageSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for ImageSource.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.IndentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderIndent.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.InheritsColumnsProperty">
            <summary>
            Using a DependencyProperty as the backing store for InheritsColumnDefinitions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.IsCheckedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsChecked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.IsEditableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.IsExpandedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsExpanded.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ItemsSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsSource.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ItemContainerStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemContainerStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ItemTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ItemTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemTemplateSelector.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.PreHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for OptionalElement.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.SelectionBoxTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectionBoxType.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.ShowRootLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowRootLine. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNode.TreeIndentProperty">
            <Summary>
            Backing store for TreeIndent.
            </Summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Overriding to return valid hit test result when the point is within the bounds of the header.
            Default implementation always returns null... By returning valid result, allows parent tree to
            find the node at point with much greater performance than otherwise.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.HandleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to perform Edit and Selection logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.DoMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to perform edit logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overriding to perform edit and/or navigation logic.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Overriding to begin edit.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Overriding to set parent table's ActiveItem when this row gets keyboard focus.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.NavigateLeft(System.Windows.Input.KeyboardNavigationMode,System.Boolean,System.Boolean)">
            <summary>
            Overriding to allow navigation into CheckBox from Cell index 0, if the check box is being used.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.CommitEdit(System.Boolean)">
            <summary>
            Commits pending changes if IsDirty is true. Returs false if the commit was not performed because the proposed values 
            do not pass validation rules.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.CreateRootLineAdorner">
            <summary>
            Virtual method called to obtain a IRootLineAdorner for rendering the root lines which
            are attached to the root of this node.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overriding to notify parent tree that items changed.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnExpanded">
            <summary>
            Virtual method called when the value of IsExpanded changes from false to true. Raises the Expanded event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnEditCommitted">
            <summary>
            Virtual method called when an edit has ended and the value committed. Raises the EditCommitted routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.OnDeletingSelectedItems(System.Windows.RoutedEventArgs)">
            <summary>
            Virtual method called to raise the DeletingSelectedItems routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.SortByColumn(DevComponents.WPF.Controls.ColumnDefinition,System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Cause the node to sort children by column of givin path.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.GetChildNodes(System.Boolean,System.Boolean)">
            <summary>
            Gets an enumeration of all child nodes, with option to included all descendents (in a flattenned tree) and whether to include 
            unrealized children nodes (which will only apply if VirtualizingMode of the parent tree is not VirtualizingMode.None.)
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.BeginEdit(System.String)">
            <summary>
            Puts the node into Edit mode. Does nothing if property IsEditable is not true.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.ExpandToLevel(System.Int32)">
            <summary>
            Recursively expand to a givin level in the tree hierarchy. If level = 0, then the entire sub 
            tree is expanded, otherwise, if level is less HierarchyLevel, nothing is done, if equal to, then this node is expanded but no children are expanded.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.Collapse(System.Boolean)">
            <summary>
            Collapses the node (sets IsExpanded to false) and optionally recurses through all descendent
            nodes collapsing them as well. If deep is not true, then when the node is expanded again the
            state of expanded nodes within will be preserved.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvTreeNode.GetEffectiveCellDefinitions">
            <summary>
            Overriding to allow a parent node to not inherit columns while its children do inherit
            the columns  - a sort of pass through of column definitions.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ParentTree">
            <summary>
            Get access to the parent AdvTree, strongly typed.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ColumnsPresenter">
            <summary>
            Get a reference to the columns presenter. This value is only valid if ColumnDefinitions is set.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ParentNode">
            <summary>
            Get access to the parent AdvTreeNode.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.PreviousSibling">
            <summary>
            Get the previous sibling node to this node. Returns null if this is the first under the parent.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.NextSibling">
            <summary>
            Get the next sibling node to this node. Returns null if this is the last sibling.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.PreviousNode">
            <summary>
            Gets the node previous to this node in the parent Tree's hierarchy of nodes, irregardless of hierarchy level.
            Returns null if this is the first node in the tree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.NextNode">
            <summary>
            Gets the node immediately following this node in the parent Tree's hierarchy of nodes, irregardless of hierarchy level, or 
            null if this is the last node in the tree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ItemsHost">
            <summary>
            Returns a reference to the internal panel used to display items. Value may be null if visual tree has not yet been created.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.RootLineAdorner">
            <summary>
            Gets the adorner which is responsible for drawing the Root Lines that connect this node
            to its children nodes. The default root line adorner is an instance of RootLineAdorner, however this
            can be changed by inheriting classes by overriding method CreateRootLineAdorner.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ItemOwner">
            <summary>
            Gets the owner of the node's Item. 
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.ItemsChanged">
            <summary>
            Routed Event raised when the Items collection changes.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.SortByColumnRequested">
            <summary>
            Routed Event raised when the the user clicks a column header with intention of sorting.
            Handle this event to prevent the default sorting.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.Collapsed">
            <summary>
            A bubbling routed event raised when the node's IsExpanded property changes from true to false.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.Expanded">
            <summary>
            A bubbling routed event raised when IsExpanded changes from false to true.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.Checked">
            <summary>
            A bubbling routed event raised when the built-in CheckBox is checked. Property CheckBox must be either TwoState or ThreeState. 
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.Unchecked">
            <summary>
            A bubbling routed event raised when the built-in CheckBox is un-checked. Property CheckBox must be either TwoState or ThreeState. 
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.EditBeginning">
            <summary>
            Event fired when the node is about to go into edit mode. Handle the event to prevent the node from entering edit mode.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.EditCommitted">
            <summary>
            Event is fired after an edit is successfully committed to the underlying data source.
            This is a routed event with a routing stragety of Bubble.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.AdvTreeNode.DeletingSelectedItems">
            <summary>
            Event raised from the DeleteSelected method, just before the items are removed. Handle the event to prevent the deletion.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.AlternationCount">
            <summary>
            Get or Set Alternation Count. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.BeginEditTriggerMode">
            <summary>
            Get or Set the trigger mode for beginning an edit.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.CanHaveItems">
            <summary>
            Get or set whether this node can have child nodes. If false, then the expander is made collapsed. If true, and 
            there are no items to show, the expander is made hidden and not collapsed. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.CanUserDeleteItem">
            <summary>
            Get or set whether the user can delete a selected item with the delete key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.CanUserCollapse">
            <summary>
            Gets or Sets whether the user can collapse the node via UI interaction. If false, the user will not
            be able to affect property IsExpanded through the UI. However, IsExpanded can still be modified in code.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.CellSelect">
            <summary>
            Get or Set whether individual cells are selectable for this node. Only applies when showing column data.
            By default, this property inherits its value from it's parent's CellSelect property. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.CheckBox">
            <summary>
            Get or Set whether the Node has a check box and if so is it two state or three state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ColumnDefinitions">
            <summary>
            Get or Set the column definitions which define whether and how columns are presented for the nodes data.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.EditorSettings">
            <summary>
            Get or sets the settings for the editor which is used to edit the node's header value. If the node is 
            displaying column data, this property is ignored.
            By default, this value is static instance EditorSettings.Default. 
            Can customize editor behavior by setting to a different value. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.EditorStyle">
            <summary>
            Get or Set the style which is used for the embedded EditingContentControl control.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.EditTemplate">
            <summary>
            Get or Set the control template used for editing the header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ExpanderButtonStyle">
            <summary>
            Get or Set the style used for the toggle button that expands and collapses the node's children.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ExpanderButtonType">
            <summary>
            Gets or sets a value which specifies which built-in expander button style to use. Setting this property causes the value of ExpanderButtonStyle
            to be set to the indicated built-in style.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.Filter">
            <summary>
            Get or set a Predicate with which to filter the items with.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.HierarchyLevel">
            <summary>
            Get the level of this node within the parent tree's hierarchy, beginning with 1 for items at root level.
            This is a readonly dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ImageSource">
            <summary>
            Get or Set the source Uri for an image to be included in Node.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.Indent">
            <summary>
            Get or Set a value which determines the indent of the Node. If not explicitly set, then the indent is automatically calculated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.InheritsColumns">
            <summary>
            Gets or Sets whether the tree node inherits the cell definitions (columns) of its parent.
            Possible values are Always, Never and IfColumnDataPresent. The default value is IfColumnDataPresent. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.IsChecked">
            <summary>
            Get or Set whether the item is checked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.IsEditable">
            <summary>
            Get or Set whether the Header of this node can be edited in place.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.IsExpanded">
            <summary>
            Get or Set whether this node is expanded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.PreHeader">
            <summary>
            Get or set an optional object which is inserted immediately in front of the node's header.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.PreHeaderTemplate">
            <summary>
            Get or set  a DataTemplate which shows how to render the PreTemplate object.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.SelectionBoxType">
            <summary>
            Get or set whether selection and highlight boxes extend the entire width of the tree
            or are restricted to the bounds of the node itself. By default, this value is inherited
            from the parent node or tree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.ShowRootLines">
            <summary>
            Get or Set whether the Root Lines are drawn. Root lines are the connecting lines between the 
            header of this node and the expander button of the parent node. 
            Note that if unset, then this property is bound to the parent tree's ShowRootLines property.
            This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.TreeIndent">
            <summary>
            Gets the distance in pixels from the edge of the node to the edge of the parent tree.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvTreeNode.AreCellsSelectable">
            <summary>
            Returns whether cells are selectable. Will return True only if both IsSelectable and CellSelect are true.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeVisualStyle">
            <summary>
            Enumeration of built-in VisualStyles for AdvTree.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeVisualStyle.Default">
            <summary>
            Indicates the default visual style (i.e. no visual style is applied.)
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeVisualStyle.WindowsExplorer">
            <summary>
            Indicates the Windows Explorer like visual style[
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeVisualStyle.Office2010Blue">
            <summary>
            Indicates Office 2010 Blue visual style.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeVisualStyle.Office2010Silver">
            <summary>
            Indicates Office 2010 Silver visual style.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeVisualStyle.Office2010Black">
            <summary>
            Indicates Office 2010 Black visual style.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeSelectionBoxType">
            <summary>
            Enumeration of types of Selection boxes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeSelectionBoxType.None">
            <summary>
            No selection box will be shown.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeSelectionBoxType.Full">
            <summary>
            The selection box will extend the entire width of the AdvTree control.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeSelectionBoxType.Contained">
            <summary>
            The selection box will be contained within the bounds of the highlighted AdvTreeNode.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeMultiSelectRule">
            <summary>
            Enumeration of the multi select rules applicable to AdvTree. This is a Flags enumeration[
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeMultiSelectRule.AnyNode">
            <summary>
            Any node can be selected. (Zero value)
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeMultiSelectRule.SameLevel">
            <summary>
            Nodes must be same level of hierarchy.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeMultiSelectRule.SameParent">
            <summary>
            Nodes must have same parent.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeMultiSelectRule.SameType">
            <summary>
            Nodes must have same data type for Item.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeMultiSelectRule.SameColumn">
            <summary>
            If CellSelect is true, selected cells must be in same column.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeNodeCheckBoxType">
            <summary>
            Enumeration of possible values for AdvTreeNode CheckBox.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeCheckBoxType.None">
            <summary>
            Indicates no check box.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeCheckBoxType.TwoState">
            <summary>
            Indicates check box that is two state.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeCheckBoxType.ThreeState">
            <summary>
            Indicates check box that is three state.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeNodeExpanderButtonType">
            <summary>
            Enumeration of the type of available built-in expander buttons for AdvTreeNode.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeExpanderButtonType.Triangle">
            <summary>
            Indicates the triangle shaped expander button.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeExpanderButtonType.PlusMinus">
            <summary>
            Indicates the expander button with a plus sign for expanded and minus sign for collapsed.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeExpanderButtonType.Custom">
            <summary>
            Indicates a custom style.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeNodeInheritsColumnsMode">
            <summary>
            Enumerates the different ways that an AdvTreeNode can inherit its columns.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeInheritsColumnsMode.IfColumnDataPresent">
            <summary>
            Inherits columns only if it has data for at least one column[
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeInheritsColumnsMode.Always">
            <summary>
            Inherits columns regardless of data available.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeInheritsColumnsMode.Never">
            <summary>
            Never inherits columns.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvTreeNodeSearchMethod">
            <summary>
            Enumerates the possible methods to use for tree node search.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeSearchMethod.DataTraversal">
            <summary>
            The tree data is traversed using reflection. This method will work if the data object bound to the tree's ItemsSource
            is hierarchical and the properties which supply child data can be cast to IEnumerable.
            In general, this method will have better performance than Node traversal.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.AdvTreeNodeSearchMethod.NodeTraversal">
            <summary>
            The tree nodes are traversed. Nodes are created if they have not been generated. This method 
            is potentially very lengthy if the data set is large. However, it does not require that the data be structured
            in any particular way.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.AdvCellSelectionData">
            <summary>
            Represents a cell which is selected. The actual cell may not exist due to virtualization. 
            Instances of this class are value to SelectedCell and SelectedCells properties of AdvTabularControl.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellSelectionData.#ctor(DevComponents.WPF.Controls.ColumnDefinition,System.Object)">
            <summary>
            Construct with column and row item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellSelectionData.#ctor(DevComponents.WPF.Controls.AdvCellControl)">
            <summary>
            Construct with the Cell control.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.AdvCellSelectionData.Equals(DevComponents.WPF.Controls.AdvCellControl)">
            <summary>
            Returns true if the data held by this object matches it with the provided cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellSelectionData.Definition">
            <summary>
            Gets the ColumnDefinition which is used to create the cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellSelectionData.Column">
            <summary>
            Gets the ColumnDefinition which is used to create the cell.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.AdvCellSelectionData.RowItem">
            <summary>
            Returns a reference to the data object represented by the cell's parent row. If the parent 
            row is not data bound, then this value will be the parent row itself. Note that the returned
            value may be null, if the underlying data has been garbage collected, since the value is held 
            privately inside of a WeakReference.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.VirtualizingTreePanel.GetLayoutClip(System.Windows.Size)">
            <summary>
            Overriging to provide custom layout clip. In particular, clip top and bottom but
            extend the clip region left and right to include margin.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.Office2010UtilityScrollViewerStyle">
            <summary>
            The Office2010UtilityScrollViewerStyle is a style for a ScrollViewer that is based on the scroll viewer which is used for "Utility" objects, such as the FontFamily or FontSize 
            combo boxes in Word 2010. This is as opposed to the scroll viewer that is displayed for scrolling the Document itself. An instance of this dictionary is merged into Office2010VisualStyleResources
            dictionary - which in turn is added to VisualStylesDictionary's merged dictionaries - when the effective visual style is Office 2010.
            </summary>
            <summary>
            Office2010UtilityScrollViewerStyle
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2010UtilityScrollViewerStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.Office2010UtilityScrollViewerStyle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyDefinition">
            <summary>
            Provides a means for customizing properties in the PropertyGrid control.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyDefinition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.AllowResetOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowResetOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.CategoryOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for CategoryOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.CategorySortStringOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for CategorySortStringOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.DescriptionOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for DescriptionOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.DisplayNameOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for DisplayNameOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.EditorDescriptorOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorDescriptorOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.EditorStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.MaxSubPropertyLevelOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxSubPropertyLevelOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.PropertyGridItemStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyGridItemStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.ShowPropertyOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowPropertyOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.ShowSubPropertiesOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowSubPropertiesOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.SortStringOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortStringOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.TypeConverterOverrideProperty">
            <summary>
            Using a DependencyProperty as the backing store for TypeConverterOverride.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyDefinition.ValidationErrorTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValidationErrorTemplate.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyDefinition.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyDefinition.PropertyChanged">
            <summary>
            Event raised when the value of one of the dependency properties changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.PropertyGridPropertyType">
            <summary>
            Get or Set a custom PropertyGridProperty upon which to base the property grid item as it 
            is displayed in the grid. Use to define a custom property, one which does not exist 
            in the list of properties obtained via TypeDescriptor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.SelectedObjectType">
            <summary>
            Use to restrict the definition so that it applies only when the PropertyGrid.SelectedItem is of the specified Type.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.TargetCategory">
            <summary>
            Get or Set the category of the property or properties which this definition applies.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.TargetPropertyName">
            <summary>
            Get or set the name of the property for which this edit template should apply. Note that
            TargetPropertyName takes precedence over TargetPropertyType.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.TargetPropertyType">
            <summary>
            Get or set the Type of the property for which this edit template should apply. Note that
            TargetPropertyName takes precedence over TargetPropertyType.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.TargetPropertyOwnerType">
            <summary>
            Get or Set the Type of the owner of a dependency property. Useful for identifying a class of attached dependency properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.AllowResetOverride">
            <summary>
            Nullable Boolean which if set will override the default value of AllowReset on the targeted PropertyGridProperty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.CategoryOverride">
            <summary>
            Get or Set the Category for the property. If set, this 
            value will override the Category obtained from the property's PropertyDescriptor.
            This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.CategorySortStringOverride">
            <summary>
            Get or Set a string by which the category should be sorted by. By default, categories are sorted by their Name,
            this provides a means of customizing the category sort order.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.DescriptionOverride">
            <summary>
            Get or Set a description for the property. If set, this 
            value will override the description obtained from the property's PropertyDescriptor.
            This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.DisplayNameOverride">
            <summary>
            Get or Set a value for the display name of the property. If set, this 
            value will override the display name obtained from the property's PropertyDescriptor.
            This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.EditorDescriptorOverride">
            <summary>
            Override the default editor descriptor. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.EditorStyle">
            <summary>
            Set the Editor Style.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.MaxSubPropertyLevelOverride">
            <summary>
            Override PropertyGrid.MaxSubPropertyLevel. Determines the maximum level in the sub property hierarchy which will be displayed.
            Note that a value of 0 (the default) results in using the value set on the parent property grid. (Use ShowSubPropertiesOverride to turn off sub properties all together.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.IsReadOnlyOverride">
            <summary>
            Override
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.PropertyGridItemStyle">
            <summary>
            Get or Set a Style for the container of this property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.ShowAdvancedPropertiesButton">
            <summary>
            When set, determines whether the advanced properties button is shown on the property grid item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.ShowPropertyOverride">
            <summary>
            Get or Set whether this property should be shown. Provides a means of overriding PropertyGridProperty.Show.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.ShowSubPropertiesOverride">
            <summary>
            Nullable boolean to indicate whether or not to display sub properties of this property.
            Provides a means of overriding the global value PropertyGrid.ShowSubProperties for individual properties.
            Has no effect if null. Null is the default value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.SortStringOverride">
            <summary>
            Get or Set a string by which the property is sotred. By default, properties are sorted by their Display Name.
            This property provides a means of overriding that behavior.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.TypeConverterOverride">
            <summary>
            Provides a means of overriding the default TypeConverter for the property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyDefinition.ValidationErrorTemplate">
            <summary>
            Get or Set the ControlTemplate used for validation error display when editing the value. To turn off error display,
            set ValidationErrorTemplate = {x:Null}
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGrid">
            <summary>
            Implementation of a property grid control. Provides form for editing properties associated with object set as value of 
            property SelectedObject.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.SelectedObjectChangedEvent">
            <summary>
            Using RoutedEvent as backing for SelectedObjectChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.SelectedObjectsChangedEvent">
            <summary>
            Using RoutedEvent as backing for SelectedObjectsChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.AlwaysTabIntoEditorProperty">
            <summary>
            Using a DependencyProperty as the backing store for AlwaysTabIntoEditor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.BrowsableAttributesProperty">
            <summary>
            Using a DependencyProperty as the backing store for BrowsableAttributes.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.CommitOnValueChangedProperty">
            <summary>
            Using a DependencyProperty as the backing store for CommitOnValueChanged.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.CustomPropertyDefinitionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for CustomPropertyDefinitions.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ErrorNotificationProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowValidationErrors.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ExpanderAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for ExpanderAlignment.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.FilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyFilter.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.FirstColumnWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for FirstColumnInitialWidth.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.HelpPanelHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for HelpPanelHeight.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.IgnoredCategoriesProperty">
            <summary>
            Using a DependencyProperty as the backing store for IgnoredProperties.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.IgnoredPropertiesProperty">
            <summary>
            Using a DependencyProperty as the backing store for IgnoredProperties.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.InnerLeftMarginProperty">
            <summary>
            Using a DependencyProperty as the backing store for InnerLeftMargin.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.IsActivePropertyKey">
            <summary>
            Using a DependencyProperty as the backing store for IsActive.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.IsSelectionFocusAwareProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectionFocusAware.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.IsLockedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsLocked.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.PropertyItemContextMenuProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyItemContextMenu.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.PropertyValidatorProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyValidator.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.SelectedObjectProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedObject.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.SelectedObjectsProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedObjects.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.SelectedPropertyProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedProperty. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowAdvancedPropertiesButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAdvancedPropertiesButton.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowAttachedDependencyPropertiesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAttachedDependencyProperties. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowCategoriesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowCategories.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowHelpPanelProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowHelpPanel.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowReadOnlyPropertiesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowReadOnlyProperties. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowSearchBoxProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowSearchBox.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowSubPropertiesProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowSubProperties.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowToolTipsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowToolTips.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.ShowToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToolBarVisibility.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.SortPropertiesProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortProperties.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGrid.VisualStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for VisualStyle.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.OnSelectedObjectChanged">
            <summary>
            Virtual method called to raise the SelectedObjectChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.OnSelectedObjectsChanged">
            <summary>
            Virtual method called to raise the SelectedObjectsChanged routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.FindContainer(DevComponents.WPF.Controls.PropertyGridProperty,System.Boolean)">
            <summary>
            Find the container for the specified property. If waitForContainersToLoad is true,
            and if the containers have not been generated yet, then the method will block until Dispatcher has processed all
            messages with priority greater than ContextIdle, which will allow the containers to be generated.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGrid.GetPropertyGridItems(System.Boolean)">
            <summary>
            Gets an enumeration of all PropertyGridItem children of the property grid. If waitForContainersToLoad is true,
            and if the containers have not been generated yet, then the method will block until Dispatcher has processed all
            messages with priority greater than ContextIdle, which will allow the containers to be generated.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGrid.SelectedObjectChanged">
            <summary>
            Event raised when the value of SelectedObject changes and the property grid's properties have been updated.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGrid.SelectedObjectsChanged">
            <summary>
            Event raised when the content of the SelectedObjects collection changes, after the property grid's properties have been updated.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.Properties">
            <summary>
            Provides access to the collection of PropertyGridProperty objects which define the properties that are shown.
            The instance of PropertyGridPropertyCollection is set once and never changes. Its collection of PropertyGridProperty is reset each time
            the value of SelectedObject changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.DefaultEditorDescriptors">
            <summary>
            Gets the set of default editor descriptors, which can be modified at run-time, before properties are loaded.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.PropertyDefinitions">
            <summary>
            Access the collection of property definitions. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ToolBarItems">
            <summary>
            Access the collection of ToolBar items.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.PropertyItemsControl">
            <summary>
            Get the PropertyGridItemsControl which houses the property grid items of this PropertyGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.MaxSubPropertyLevel">
            <summary>
            Get or Set a maximum sub properpty hierarchy level.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.AlwaysTabIntoEditor">
            <summary>
            Get or set whether tab key always moves focus to the editor cell of the next property
            (instead of the default behavior where when tabbing out of editor the keyboard focus moves to the header of the next property.)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.BrowsableAttributes">
            <summary>
            Get or Set a collection of Attributes to use as filter when loading available properties for proeprty grid. 
            Please see MSDN Documentation for TypeDescriptor.GetProperties method for complete documentation.
            This is a dependency property. If this property is unset, then by default a collection with BrowsableAttribute.Yes is used.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.CommitOnValueChanged">
            <summary>
            Get or set whether the underlying property value is committed on value changed. By default, the changes are committed to the underlying 
            property when the editor looses focus or when the user hits the enter key.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.CustomPropertyDefinitions">
            <summary>
            Get or Set a list of custom property definitions. Custom property definitions always take precedence over the built-in property definitions.
            This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ErrorNotification">
            <summary>
            Get or Set how validation errors are reported to the user. Either None, MessageBox or ValidationTemplate. The default ValidationTemplate for 
            a ContentControl is used unless overridden by an applicable PropertyDefinition ValidationErrorTemplate property.
            Custom validation rules can be set up on a PropertyDefinition as well. 
            For more details of Validation in general, please see MSDN Validation class and the Binding class.
            This is a dependency property. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ExpanderAlignment">
            <summary>
            Get or Set the value which determines whether the expander buttons for property sub items are aligned in a single
            column along the left margin, or are indented according to level in the sub property hierarchy.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.Filter">
            <summary>
            Gets or Sets a string by which to filter properties. If a property display name contains the filter string, 
            then it will be displayed. This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.FirstColumnWidth">
            <summary>
            Get or set the initial width of the first column of the property grid. 
            Can be a relative value between 0 and 1, an absolute value in pixels, or Auto.
            This is a dependency property. The default value is 0.45.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.HelpPanelHeight">
            <summary>
            Get or set the height of the help panel. Note that once the property grid is loaded, setting this value will have no effect.
            However, the value will continue to be updated as the actual height of the help panel changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.IgnoredCategories">
            <summary>
            Defines a list of names of categories to ignore. Properties who's category is in this list are not shown in the property grid.
            This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.IgnoredProperties">
            <summary>
            Defines a list of names of properties to ignore. Properties who's name is in this list are not shown in the property grid.
            This is a dependency property. The default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.InnerLeftMargin">
            <summary>
            Get or Set the width of the inner left margin - the space between the control's left edge and the
            beginning of the item headers. This area is where the expand buttons are located.
            This is a dependency property. By default, the value is bound by DynamicResource reference to 
            component resource key PropertyGrid.InnerLeftMargin.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.IsActive">
            <summary>
            Get whether the property grid is in active state. PropertyGrid is Active is it has Keyboard focus or if there is
            a context menu open from within. This is a read-only dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.IsSelectionFocusAware">
            <summary>
            Get or Set whether selected property highlight color should change when the PropertyGrid does not have focus.
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.IsLocked">
            <summary>
            Get or set whether all properties are rendered non-editable, as if they were readonly, without changing their readonly status. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.PropertyItemContextMenu">
            <summary>
            Gets or Sets the context menu used for property grid properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.PropertyValidator">
            <summary>
            Get or Set an instance of a class which implements IPropertyGridPropertyValidator. If ErrorNotification is not set to None, 
            the validator's Validate method is called when a property's value changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.SelectedObject">
            <summary>
            Get or Set the object which the property grid is currently bound to.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.SelectedObjects">
            <summary>
            Get the selected objects collection. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.SelectedProperty">
            <summary>
            Gets or Sets the currently selected (or active) property in the property grid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowAdvancedPropertiesButton">
            <summary>
            Get or Set whether the built-in button for showing advanced properties is shown for the properties. This value can be overridden
            on an individual property level. This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowAttachedDependencyProperties">
            <summary>
            Get or Set whether to show attached properties which may be applied to the current object.
            This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowCategories">
            <summary>
            Gets or Sets whether Categories are shown.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowHelpPanel">
            <summary>
            Gets or Sets whether to show the Help panel. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowReadOnlyProperties">
            <summary>
            Gets or Sets whether Read-only properties should be shown in the grid.
            This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowSearchBox">
            <summary>
            Get or Set whether the built-in search box should be shown in the ToolBar. ToolBarVisibility must be set to Visible.
            This is a dependency property. The default value is False.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowSubProperties">
            <summary>
            Get or Set whether property sub properties, if there are any, should be shown. This value affects
            all proerties in the grid. To affect individual properties, use a PropertyDefinition or access
            the PropertyGridProperty directly from the Properties collection of this class.
            This is a dependency property. The default value is True.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowToolTips">
            <summary>
            Get or Set whether the default tool tips should be shown for property grid items. 
            This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.ShowToolBar">
            <summary>
            Get or Set whether the ToolBar is visible. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.SortProperties">
            <summary>
            Get or set whether the properties are sorted. When true, properties are sorted by the property wrapper's (PropertyGridProperty) SortString property,
            which by default is the property's name. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGrid.VisualStyle">
            <summary>
            Get or Set a pre-defined built-in visual style. This is a dependency property. The default value is PropertyGridVisualStyle.Default.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridItem">
            <summary>
            This is a control which represents a single property in the property grid. It is a HeaderedItemsControl. The Header property
            is for the property name, the Items contains sub properties. Property Content is defined for the property value. ContentTemplate property
            can be used to customize the content. Instances of PropertyGridItem are generated by PropertyGridItemControl when objects of 
            type PropertyGridProperty are added to it. The PropertyGrid control contains a PropertyGridItemControl for purpose of displaying the property items.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.CellPaddingKey">
            <summary>
            Resource key which identifies the Brush used to highlight the Header when this item is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.SelectedHeaderBackgroundKey">
            <summary>
            Resource key which identifies the Brush used to highlight the Header when this item is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.SelectedHeaderForegroundKey">
            <summary>
            Resource key which identifies the Brush used for the Header when this item is selected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.SubPropertyIndentationKey">
            <summary>
            Resource key which identifies the Double which is used as default value for the Indentation of the Header when IsSubProperty is true.
            (When IsSubProperty is false, then the indentation is bound to PropertyGrid.InnerLeftMargin.)
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.ToolTipStyleKey">
            <summary>
            Resource key which identifies the Style which is applied to the ToolTip when parent PropertyGrid property ShowToolTips = true.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.ToolTipContentTemplateKey">
            <summary>
            Resource key which identifies the DataTemplate for the ToolTip content, which is applied to the ToolTip when parent PropertyGrid property ShowToolTips = true.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.DefaultHeaderReadOnlyTemplateKey">
            <summary>
            Resource key which identifies the default DataTemplate as value of property HeaderReadonlyTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.DefaultValueReadOnlyTemplateKey">
            <summary>
            Resource key which identifies the default DataTemplate as value of property ValueReadonlyTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.InactiveSelectionBoxBorderBrushKey">
            <summary>
            Identifies resource for the border brush of the selection box when the parent PropertyGrid does not contain focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.InactiveSelectedHeaderBackgroundKey">
            <summary>
            Identifies resource for the background of the selection box when the parent PropertyGrid does not contain focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.InactiveSelectedHeaderForegroundKey">
            <summary>
            Identifies resource for the background of the selection box when the parent PropertyGrid does not contain focus.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonStyleKey">
            <summary>
            Identifies the default style for the button which is used to show advanced properties dialog.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.ExpanderToggleButtonStyleKey">
            <summary>
            Identifies the default style for the toggle button which is used to toggle whether the property is expanded.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.SelectedEvent">
            <summary>
            Using a RoutedEvent as backing for Selected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.UnselectedEvent">
            <summary>
            Using a RoutedEvent as backing for Unselected event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonClickEvent">
            <summary>
            Using a RoutedEvent as backing for AdvancedPropertiesButtonClick event.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonCommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for AdvancedPropertiesButtonCommand.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for AdvancedPropertiesButtonStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.CellPaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellPadding. 
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.EditorStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for EditorStyle.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.HeaderReadOnlyTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderReadOnlyTemplate.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.IsExpandedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsExpanded.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.IsSelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelectable.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.ShowAdvancedPropertiesButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAdvancedPropertiesButton.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.IndentProperty">
            Using a DependencyProperty as the backing store for Indent.
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItem.NameColumnWidthProperty">
            Using a DependencyProperty as the backing store for NameColumnWidth. 
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnApplyTemplate">
            <summary>
            Overriding to Setup State.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Overriding to prevent the control from stealing focus when it loads.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overriding to ensure that only PropertyGridItem is child container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.GetContainerForItemOverride">
            <summary>
            Overriding to create new PropertyGridItem.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Overriding to tear down state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overriding to set up state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.HandleMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to set IsSelected.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriding to toggle IsExpanded
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Overriding to manage selected when focused, etc. And go to focused state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Overriding to go to Unfocused state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.FindContainer(DevComponents.WPF.Controls.PropertyGridProperty)">
            <summary>
            Finds the container for the property, if the property is a sub property of this items's property.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.Focus(System.Boolean)">
            <summary>
            Set focus on this property, optionally setting focus on the editor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.FocusNext(System.Boolean)">
            <summary>
            Sets focus on the next property, optionally focusing the editor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.FocusPrevious(System.Boolean)">
            <summary>
            Sets focus on the previous property, optionally focusing the editor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.FocusEditor(DevComponents.WPF.Controls.TextBoxFocusAction)">
            <summary>
            Sets focus on the editor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnSelected">
            <summary>
            Virtual method called to raise the Selected routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnUnselected">
            <summary>
            Virtual method called to raise the Unselected routed event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItem.OnAdvancedPropertiesButtonClicked">
            <summary>
            Called when the AdvancedProperties button is clicked. Raises the routed event AdvancedPropertiesButtonClick and executes
            the command AdvancedPropertiesButtonCommand if set.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridItem.Selected">
            <summary>
            Routed Event raised when the value of IsSelected changes from false to true.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridItem.Unselected">
            <summary>
            Event raised when value of IsSelected changes from true to false.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonClick">
            <summary>
            Event raised when the built-in advanced properties button is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.ParentPropertyGrid">
            <summary>
            Get a reference to the parent PropertyGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.ParentPropertyGridItem">
            <summary>
            Gets a reference to the parent property grid item control, if this is not a top level property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.Property">
            <summary>
            Access the Property which is being represented by this control. Return value is strongly typed
            DataContext, cast to PropertyGridProperty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.Editor">
            <summary>
            Get the Editor control embedded in this item.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonCommand">
            <summary>
            Get or Set the command for the advanced properties button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.AdvancedPropertiesButtonStyle">
            <summary>
            Get or Set the style used for the advanced properties button.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.CellPadding">
            <summary>
            Get or Set the padding for each of the cells.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.EditorStyle">
            <summary>
            Get or Set the style for the Editor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.HeaderReadOnlyTemplate">
            <summary>
            Get or Set a DataTemplate for the Header display when the property is Readonly. This is a dependency property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.IsExpanded">
            <summary>
            Get or Set whether this property's sub properties are expanded. Has no effect if there are no sub properties.
            This is a dependency property. The default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.IsSelectable">
            <summary>
            Gets or Sets whether this item can be selected. This is a dependency property. The default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.IsSelected">
            <summary>
            Get or Set whether this item is currently selected within the PropertyGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItem.ShowAdvancedPropertiesButton">
            <summary>
            Get or Set whether to show the built-in button for bringing up the advanced properties dialog.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridItemsControl">
            <summary>
            Custom ItemsControl for presenting the PropertyGridProperty instances which are created from properties of PropertyGrid.SelectedObject.
            Uses PropertyGridItem as container for PropertyGridProperty items.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.PropertyGridItemsControl.GridLinePositionProperty">
            <summary>
            Using dependency property as backing store for GridLinePosition.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.OnApplyTemplate">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overriding to ensure only PropertyGridItem as container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.GetContainerForItemOverride">
            <summary>
            Overriding to return new PropertyGridItem as container.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Overriding to setup state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Overriding to tear down state.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridItemsControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Overriding to ensure that selected item gets focus when the container recieves focus.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItemsControl.GridLinePosition">
            <summary>
            Provides horizontal position of the vertical grid line. Readonly depencency property. This value changes as user resizes column width.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItemsControl.ParentPropertyGrid">
            <summary>
            Access the parent PropertyGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridItemsControl.FirstVisibleProperty">
            <summary>
            Gets the first visible property.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridProperty">
            <summary>
            Eposes properties which define a single item in the Property Grid.
            Instances of this class serve as data context for PropertyGridItem controls.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.#ctor(System.ComponentModel.PropertyDescriptor,DevComponents.WPF.Controls.PropertyDefinition)">
            <summary>
            Construct with optional property descriptor and property definition.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.Refresh">
            <summary>
            Call this method to set value from original source.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.Reset(System.Boolean)">
            <summary>
            Virtual method for resetting the value to the property's default value.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.OnPropertyChanged(System.String)">
            <summary>
            Raises PropertyChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.OnValueChanged">
            <summary>
            Virtual method called when Value changes. Raises the ValueChanged event and calls OnPropertyChanged.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.OnParentCollectionChanged">
            <summary>
            Virtual method called when the parent collection changes. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.SetValueNoVerify(System.Object)">
            <summary>
            Proteted method which can be used to set the value of the private variable 
            which stores the value for Value without value checking.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.UpdatePropertySourceFromValue">
            <summary>
            Updates the value of the source object or objects from the current value of Value, 
            taking into account the case of multiple selected objects in the property grid.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridProperty.SetValueFromPropertySource(System.Boolean)">
            <summary>
            Sets the value of Value from the source object, taking into account the possibility that there
            may be multiple source objects.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridProperty.PropertyChanged">
            <summary>
            Fires when a property changes (Implements INotifyPropertyChanged.)
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridProperty.ValueChanged">
            <summary>
            Fires when the value of the underlying property owner changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Tag">
            <summary>
            Get or set an arbitrary object value that can be used to store custom information about this property. 
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.AllowResetOnlyIfPropertyDescriptorCan">
            <summary>
            When set to true, and AllowReset is not explicitly set, then when determining
            whether a property can be reset a check is always made with the underlying PropertyDescriptor's
            CanResetValue method. Default value is false, meaning an attempt is made to reset values
            even when PropertyDescriptor.CanResetValue is false. For more information, see MSDN.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.ShowSubProperties">
            <summary>
            When set to a non-null value, 
            directly overrides any other settings which affect whether sub properties are shown for this property, 
            including PropertyGrid.ShowSubProperties and PropertyDefinition.ShowSubPropertiesOverride.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.RootProperty">
            <summary>
            Gets the propety grid property which is at the root of this property, if this property is a sub property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.ParentCollection">
            <summary>
            Access to the parent PropertyGridPropertyCollection of which this property is a member.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.ParentProperty">
            <summary>
            Access to the parent property, if this is a sub property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Property">
            <summary>
            Access the underlying PropertyDescriptor.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.EditorDescriptor">
            <summary>
            Get or Set an EditorDescriptor which provides services such as optional values for the property's editor.
            If unset at the time property grid item is loading, then the default EditorDesciptor will be used,
            determined by the property type, and obtained from the set of editor descriptors provided by parent
            property grid property DefaultEditorDescriptors.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Validator">
            <summary>
            If non-null, this object's Validate method is called when Value is being committed to the underlying property. 
            If the new value is in error, then the Validate method returns a string describing the problem.  
            Note that the new value is accessible via the Value
            property of the PropertyGridProperty which is sent in as parameter to Validate.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.ValidationCallback">
            <summary>
            If non-null, the delegate will be executed prior to the new value being set on underlying property. 
            Return string describing error or null if no error. Note that the new value is accessible via the Value
            property of the input parameter.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.PropertyDefinition">
            <summary>
            Access the effective PropertyDefinition for this property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Show">
            <summary>
            Get or Set whether the property is shown in the property grid. Setting false results in the
            property being removed from the parent property collection.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.IsSelected">
            <summary>
            Gets whether this property is currently selected in the parent PropertyGrid.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Target">
            <summary>
            Get a reference to the Object which provides the backing for the property.
            Note that if this value is not null, then property Targets will be null and visa-versa.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Targets">
            <summary>
            Get a reference to the collection of objects which are targets of this property.
            In general cases, this list will match the SelectedObjects property of the parent property grid.
            Note that if this value is not null, then property Target will be null and visa-versa.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.HierarchyLevel">
            <summary>
            Gets the level in the hierarchy of this property. Top level properties have HierarchyLevel == 0;
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.IsSubProperty">
            <summary>
            Gets whether this property is the sub property of another property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.DisplayName">
            <summary>
            Get or Set the name to display for this property. By default DisplayName is obtained from the 
            underlying property descriptor's DisplayName value, and if that is not set, then DisplayName is set equal to Name.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Category">
            <summary>
            Get or Set the Category for this property. By default, Category is obtained from the underlying PropertyDescriptor.Category value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.CategorySortString">
            <summary>
            Gets or sets the string by which the property category is sorted. By default the return
            value is Category, but this may be overridden by setting the value explicitly.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.SortString">
            <summary>
            Gets or sets the string by which the property is sorted in the property grid.
            By default, the return value is DisplayName, but this may be overridden by setting 
            the value explicitly.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Description">
            <summary>
            Gets or Sets the description for this property. By default, Description is obtained from 
            the underlying PropertyDescriptor.Description value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.IsReadOnly">
            <summary>
            Get or Set whether the property should be considered as read-only. By default this value
            is obtained from the underlying property descriptor's value for its IsReadOnly property.
            Explicitly setting this value to True will recursively set all sub property's IsReadOnly to true.
            Explicitly setting to false will recursively revert all sub property's to their underlying property descriptor's IsReadOnly value.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.IsNullable">
            <summary>
            Gets whether the property is a Nullable.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.IsEditorInErrorState">
            <summary>
            Gets whether the editor for this property is in an error state.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.PropertyType">
            <summary>
            Gets or sets the Type of the property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.Value">
            <summary>
            Get or Set the value of the property on the underlying object.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.SubProperties">
            <summary>
            Get the sub properties of this property, if there are sub properties.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.TypeConverter">
            <summary>
            Provides a means of specifying a custom TypeConverter for the property.
            By default, this value is obtained from the property descriptor of the underlying property.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.AllowReset">
            <summary>
            Get or Set whether the Reset command should be enabled. 
            Default value is true for non-ReadOnly properties if the property descriptor returns true for CanResetValue(..)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridProperty.ResetCommand">
            <summary>
            Gets or Sets an ICommand which when executed calls the Reset method. By default, 
            returns a RelayCommand which calls Reset() when executed and calls GetCanReset() to determine if CanExecute is true.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.PropertyGridPropertyCollection">
            <summary>
            Defines a collection of PropertyGridItems to be displayed by the PropertyGrid. This class
            handles loading of the property grid items when ever the current object of the property grid changes.
            In use, the PropertyGrid has a single instance of PropertyGridPropertyCollection, and the collection items
            are reset each time the property grid's current/selected item is changed. 
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.#ctor(DevComponents.WPF.Controls.PropertyGrid,System.Object)">
            <summary>
            Construct with property grid and external target.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.#ctor(DevComponents.WPF.Controls.PropertyGrid)">
            <summary>
            Construct with the owning PropertyGrid. Use this constructor for top level collection.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.#ctor(DevComponents.WPF.Controls.PropertyGridProperty,DevComponents.WPF.Controls.PropertyGrid)">
            <summary>
            Construct with parent property, when this collection represents the sub properties of a property of the main object.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.InsertItem(System.Int32,DevComponents.WPF.Controls.PropertyGridProperty)">
            <summary>
            Overriding to set state of item.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.Load">
            <summary>
            Loads (or reloads) the properties based on current Target.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.Refresh">
            <summary>
            Refresh all properties so they display current value as read from data source.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.OnTargetChanged">
            <summary>
            Virtual method called when Target changes, after the new PropertyGridProperty items
            have been generated and the collection updated. Raises the TargetChanged event.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.PropertyGridPropertyCollection.OnPropertyValueChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Virtual method called to raise the PropertyValueChanged event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridPropertyCollection.TargetChanged">
            <summary>
            Event raised when the Target changes. In effect, this event is raised in conjunction with
            PropertyGrid.SelectedObjectChanged event.
            </summary>
        </member>
        <member name="E:DevComponents.WPF.Controls.PropertyGridPropertyCollection.PropertyValueChanged">
            <summary>
            Event raised when the value of a property contained in this collection changes.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.AllowResetOnlyIfPropertyDescriptorCan">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.ParentProperty">
            <summary>
            Get access to the property which owns this collection of sub-properties, if there is one.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.IsSubPropertyCollection">
            <summary>
            Returns true if this is a collection of sub properties. (ParantProperty != null)
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.DefaultProperty">
            <summary>
            Get or Set the default property for the collection's target component. The default behavior is
            to use value obtained from TypeDescriptor.GetDefaultProperty.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.Target">
            <summary>
            Get the object whose properties are being represented/edited.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.Targets">
            <summary>
            Get the collection of objects whose properties are being edited simultaneously.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.Item(System.Type,System.Boolean)">
            <summary>
            Gets an enumeration of all Properties of the givin type, optionally including derived types.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.PropertyGridPropertyCollection.Item(System.String)">
            <summary>
            Get the Property with the givin name, or null if name is not found.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.CommonResources">
            <summary>
            Encapsulates a set of resources which are commonly used across several controls and styles. These resources are
            merged at runtime into the current application's Resources.
            </summary>
            <summary>
            CommonResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CommonResources.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.CommonResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectorEditorDescriptor">
            <summary>
            This editor descriptor is for setting up a set of possible values which are selectable in a drop down.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectorEditorDescriptor.#ctor">
            <summary>
            Construct with optional value for EnableInCellEditing and Type.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectorEditorDescriptor.#ctor(System.Object[])">
            <summary>
            Construct with possible values.
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.SelectorEditorDescriptor.GetEditorStyle(DevComponents.WPF.Controls.PropertyGridItem)">
            <summary>
            Overriding to return the default Selector editor style. The editor style for Selector is
            referenced by the component resource key PropertyGridEditor.DefaultSelectorEditorStyleKey.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorDescriptor.PossibleValues">
            <summary>
            Get or Set an array of possible values for the property. Note: the Type of this property is an array of objects,
            which ensures that arrays of all primitive types can be defined when this class is used as an Attribute.
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorDescriptor.PossibleValuesSource">
            <summary>
            Defines a Type which exposes a set of static properties each of which is a possible value.
            Examples are the classes FontWeights or FontStyles
            </summary>
        </member>
        <member name="P:DevComponents.WPF.Controls.SelectorEditorDescriptor.Type">
            <summary>
            Determines whether the possible values are presented in a drop down or directly in the cell.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.SelectorEditorDescriptor.EditorType">
            <summary>
            Identifies the possible types of selector editor.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectorEditorDescriptor.EditorType.DropDown">
            <summary>
            The value is selected from a drop down.
            </summary>
        </member>
        <member name="F:DevComponents.WPF.Controls.SelectorEditorDescriptor.EditorType.InLine">
            <summary>
            The values are presented directly in the cell.
            </summary>
        </member>
        <member name="T:DevComponents.WPF.Controls.WindowsExplorerVisualStyleResources">
            <summary>
            WindowsExplorerVisualStyleResources
            </summary>
        </member>
        <member name="M:DevComponents.WPF.Controls.WindowsExplorerVisualStyleResources.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
